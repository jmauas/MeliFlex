{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T13:21:10.045Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T13:23:08.556Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T13:23:11.505Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T13:23:13.306Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T13:25:06.603Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T13:28:15.011Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T13:28:37.475Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T13:31:38.690Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T13:32:29.851Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T13:46:04.833Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T13:47:03.345Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T13:47:58.025Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T13:49:05.507Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T13:50:17.800Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T13:50:47.406Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T13:51:15.688Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T14:03:49.476Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T14:05:55.620Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T14:07:49.101Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T14:08:14.242Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T14:12:30.921Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T14:13:32.075Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T14:14:30.272Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T14:21:05.715Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T14:22:03.323Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T14:22:38.253Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T14:27:50.685Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T14:31:17.876Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T14:37:43.332Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T14:37:46.015Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T14:38:09.473Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T14:39:22.064Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T14:39:31.658Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T14:39:46.492Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T14:39:50.440Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T14:41:06.182Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T14:59:48.746Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:05:50.036Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:09:25.630Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:10:05.890Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:11:31.759Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:15:18.226Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:16:18.416Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:26:04.647Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:26:51.411Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:26:54.421Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:27:27.254Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:29:06.951Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:29:27.824Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:29:36.350Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:29:42.402Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:30:11.143Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:30:19.670Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:35:24.271Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:36:27.570Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:36:35.761Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:36:38.599Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:36:39.740Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:36:42.107Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:36:44.951Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:37:28.068Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:40:08.526Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:41:00.195Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:41:09.694Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:41:53.253Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:42:29.152Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:42:58.731Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:43:12.902Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:43:18.867Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:43:20.621Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:43:49.285Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:44:07.261Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:44:13.835Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:44:16.746Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:44:47.979Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:45:02.857Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:45:13.765Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:45:15.642Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:45:17.522Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:45:28.014Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:45:29.326Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:45:34.771Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:45:41.358Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:46:24.870Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:46:31.601Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:46:34.814Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:46:35.985Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:46:41.660Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:46:44.265Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:47:09.811Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:47:15.427Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:47:24.023Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:47:26.770Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:47:29.381Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:47:31.177Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:47:33.090Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:47:36.921Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:47:41.522Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:47:48.663Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:48:14.823Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:48:18.906Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:48:26.733Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:48:32.199Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:48:41.439Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:49:08.725Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:49:21.985Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:50:34.600Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:50:36.483Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T15:50:59.323Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:00:17.017Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:00:19.864Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:00:38.444Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:00:47.747Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:01:19.853Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:01:47.896Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:02:49.673Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:02:59.385Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:03:29.494Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:03:36.504Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:06:54.650Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:07:03.986Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:07:06.726Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:07:16.261Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:07:26.598Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:07:28.676Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:07:37.618Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:07:38.771Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:07:44.516Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:07:45.674Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:07:49.476Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:07:59.490Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:08:01.382Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:08:02.670Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:08:04.292Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:08:09.451Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:08:12.365Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:08:14.168Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:08:17.347Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:08:20.039Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:08:23.170Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:08:25.367Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:08:27.676Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:08:33.626Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:08:42.837Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:08:47.852Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:09:00.115Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:09:02.024Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:09:03.321Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:09:06.737Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:09:11.073Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:09:13.853Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:09:24.395Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:09:27.070Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:09:45.508Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:09:50.224Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:10:12.714Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:11:55.739Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:12:37.961Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:12:45.241Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:13:21.610Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:13:30.410Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:13:42.684Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:13:49.098Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:13:54.050Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:13:58.934Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:15:18.268Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:15:24.161Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:15:31.351Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:15:38.908Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:20:35.654Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:30:25.488Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:31:38.816Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:31:56.928Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:32:01.397Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:32:26.954Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:34:59.100Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:35:12.113Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:35:38.372Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:35:42.714Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:35:43.830Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:35:48.666Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:36:19.841Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:36:35.353Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:38:11.857Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:40:45.929Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:40:56.281Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:41:25.844Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:41:29.811Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:41:36.714Z'
}
{
  message: <ref *4> IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: [],
      flowing: null,
      ended: true,
      endEmitted: false,
      reading: false,
      constructed: true,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: true,
      destroyed: false,
      errored: null,
      closed: false,
      closeEmitted: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      dataEmitted: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: <ref *3> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        constructed: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [
          [Function: onReadableStreamEnd],
          [Function: bound socketOnEnd]
        ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [
          [Function: bound socketOnClose],
          [Function: onServerResponseClose]
        ],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: <ref *2> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *1> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *1] },
            response: ServerResponse { app: [Circular *1] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'D:\\Proyectos\\MeliFlex\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'D:\\Proyectos\\MeliFlex\\views',
                'jsonp callback name': 'callback'
              },
              db: ConnectionPool {
                _events: [Object: null prototype] {},
                _eventsCount: 0,
                _maxListeners: undefined,
                _connectStack: [],
                _closeStack: [],
                _connected: true,
                _connecting: false,
                _healthy: true,
                config: {
                  user: 'sa',
                  password: 'Estudio1426',
                  server: 'NBJMAUAS',
                  port: 1433,
                  database: 'KarinaEcht2',
                  options: {
                    instanceName: 'NEWMANAG',
                    encrypt: false,
                    trustServerCertificate: true
                  },
                  pool: { max: 10, min: 0, idleTimeoutMillis: 300000 },
                  stream: false,
                  parseJSON: false,
                  arrayRowMode: false,
                  validateConnection: true
                },
                collation: Collation {
                  lcid: 3082,
                  flags: 13,
                  version: 0,
                  sortId: 0,
                  codepage: 'CP1252',
                  buffer: undefined
                },
                pool: Pool {
                  destroyed: false,
                  emitter: EventEmitter {
                    _events: [Object: null prototype] {},
                    _eventsCount: 0,
                    _maxListeners: undefined,
                    [Symbol(kCapture)]: false
                  },
                  creator: [Function: create],
                  destroyer: [Function: bound _poolDestroy],
                  validate: [Function: bound _poolValidate],
                  log: [Function (anonymous)],
                  acquireTimeoutMillis: 30000,
                  createTimeoutMillis: 30000,
                  destroyTimeoutMillis: 5000,
                  idleTimeoutMillis: 300000,
                  reapIntervalMillis: 1000,
                  createRetryIntervalMillis: 200,
                  propagateCreateError: true,
                  min: 0,
                  max: 10,
                  used: [],
                  free: [],
                  pendingCreates: [],
                  pendingAcquires: [],
                  pendingDestroys: [],
                  pendingValidations: [],
                  interval: null,
                  eventId: 1
                },
                [Symbol(kCapture)]: false
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: serveStatic],
                  name: 'serveStatic',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                        route: Route {
                          path: '/',
                          stack: [
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      }
                    ]
                  },
                  name: 'router',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/subir\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function: bound dispatch],
                  name: 'bound dispatch',
                  params: {},
                  path: '/',
                  keys: [],
                  regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                  route: Route {
                    path: '/',
                    stack: [
                      Layer {
                        handle: [AsyncFunction (anonymous)],
                        name: '<anonymous>',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                        method: 'get'
                      }
                    ],
                    methods: { get: true }
                  }
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 2,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *2]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        noDelay: false,
        keepAlive: false,
        keepAliveInitialDelay: 0,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        maxRequestsPerSocket: 0,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::3080',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 159
      },
      _server: <ref *2> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *1> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *1] },
            response: ServerResponse { app: [Circular *1] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'D:\\Proyectos\\MeliFlex\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'D:\\Proyectos\\MeliFlex\\views',
                'jsonp callback name': 'callback'
              },
              db: ConnectionPool {
                _events: [Object: null prototype] {},
                _eventsCount: 0,
                _maxListeners: undefined,
                _connectStack: [],
                _closeStack: [],
                _connected: true,
                _connecting: false,
                _healthy: true,
                config: {
                  user: 'sa',
                  password: 'Estudio1426',
                  server: 'NBJMAUAS',
                  port: 1433,
                  database: 'KarinaEcht2',
                  options: {
                    instanceName: 'NEWMANAG',
                    encrypt: false,
                    trustServerCertificate: true
                  },
                  pool: { max: 10, min: 0, idleTimeoutMillis: 300000 },
                  stream: false,
                  parseJSON: false,
                  arrayRowMode: false,
                  validateConnection: true
                },
                collation: Collation {
                  lcid: 3082,
                  flags: 13,
                  version: 0,
                  sortId: 0,
                  codepage: 'CP1252',
                  buffer: undefined
                },
                pool: Pool {
                  destroyed: false,
                  emitter: EventEmitter {
                    _events: [Object: null prototype] {},
                    _eventsCount: 0,
                    _maxListeners: undefined,
                    [Symbol(kCapture)]: false
                  },
                  creator: [Function: create],
                  destroyer: [Function: bound _poolDestroy],
                  validate: [Function: bound _poolValidate],
                  log: [Function (anonymous)],
                  acquireTimeoutMillis: 30000,
                  createTimeoutMillis: 30000,
                  destroyTimeoutMillis: 5000,
                  idleTimeoutMillis: 300000,
                  reapIntervalMillis: 1000,
                  createRetryIntervalMillis: 200,
                  propagateCreateError: true,
                  min: 0,
                  max: 10,
                  used: [],
                  free: [],
                  pendingCreates: [],
                  pendingAcquires: [],
                  pendingDestroys: [],
                  pendingValidations: [],
                  interval: null,
                  eventId: 1
                },
                [Symbol(kCapture)]: false
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: serveStatic],
                  name: 'serveStatic',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                        route: Route {
                          path: '/',
                          stack: [
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      }
                    ]
                  },
                  name: 'router',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/subir\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function: bound dispatch],
                  name: 'bound dispatch',
                  params: {},
                  path: '/',
                  keys: [],
                  regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                  route: Route {
                    path: '/',
                    stack: [
                      Layer {
                        handle: [AsyncFunction (anonymous)],
                        name: '<anonymous>',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                        method: 'get'
                      }
                    ],
                    methods: { get: true }
                  }
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 2,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *2]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        noDelay: false,
        keepAlive: false,
        keepAliveInitialDelay: 0,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        maxRequestsPerSocket: 0,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::3080',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 159
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *3],
        incoming: [Circular *4],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: HTTPServerAsyncResource {
          type: 'HTTPINCOMINGMESSAGE',
          socket: [Circular *3]
        }
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      setEncoding: [Function: socketSetEncoding],
      _paused: false,
      _httpMessage: ServerResponse {
        _events: [Object: null prototype] {
          finish: [Function: bound resOnFinish]
        },
        _eventsCount: 1,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        _closed: false,
        socket: [Circular *3],
        _header: null,
        _keepAliveTimeout: 5000,
        _onPendingData: [Function: bound updateOutgoingData],
        req: [Circular *4],
        _sent100: false,
        _expect_continue: false,
        locals: [Object: null prototype] {},
        [Symbol(kCapture)]: false,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          'x-powered-by': [ 'X-Powered-By', 'Express' ]
        }
      },
      [Symbol(async_id_symbol)]: 172,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *3]
      },
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: false,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: true,
    rawHeaders: [
      'Host',
      'localhost:3080',
      'Connection',
      'keep-alive',
      'Cache-Control',
      'max-age=0',
      'sec-ch-ua',
      '" Not A;Brand";v="99", "Chromium";v="102", "Google Chrome";v="102"',
      'sec-ch-ua-mobile',
      '?0',
      'sec-ch-ua-platform',
      '"Windows"',
      'DNT',
      '1',
      'Upgrade-Insecure-Requests',
      '1',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36',
      'Accept',
      'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
      'Sec-Fetch-Site',
      'none',
      'Sec-Fetch-Mode',
      'navigate',
      'Sec-Fetch-User',
      '?1',
      'Sec-Fetch-Dest',
      'document',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'es-ES,es;q=0.9',
      'If-None-Match',
      'W/"88e-181547dc48c"',
      'If-Modified-Since',
      'Sat, 11 Jun 2022 20:38:57 GMT'
    ],
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: <ref *3> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        constructed: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [
          [Function: onReadableStreamEnd],
          [Function: bound socketOnEnd]
        ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [
          [Function: bound socketOnClose],
          [Function: onServerResponseClose]
        ],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: <ref *2> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *1> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *1] },
            response: ServerResponse { app: [Circular *1] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'D:\\Proyectos\\MeliFlex\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'D:\\Proyectos\\MeliFlex\\views',
                'jsonp callback name': 'callback'
              },
              db: ConnectionPool {
                _events: [Object: null prototype] {},
                _eventsCount: 0,
                _maxListeners: undefined,
                _connectStack: [],
                _closeStack: [],
                _connected: true,
                _connecting: false,
                _healthy: true,
                config: {
                  user: 'sa',
                  password: 'Estudio1426',
                  server: 'NBJMAUAS',
                  port: 1433,
                  database: 'KarinaEcht2',
                  options: {
                    instanceName: 'NEWMANAG',
                    encrypt: false,
                    trustServerCertificate: true
                  },
                  pool: { max: 10, min: 0, idleTimeoutMillis: 300000 },
                  stream: false,
                  parseJSON: false,
                  arrayRowMode: false,
                  validateConnection: true
                },
                collation: Collation {
                  lcid: 3082,
                  flags: 13,
                  version: 0,
                  sortId: 0,
                  codepage: 'CP1252',
                  buffer: undefined
                },
                pool: Pool {
                  destroyed: false,
                  emitter: EventEmitter {
                    _events: [Object: null prototype] {},
                    _eventsCount: 0,
                    _maxListeners: undefined,
                    [Symbol(kCapture)]: false
                  },
                  creator: [Function: create],
                  destroyer: [Function: bound _poolDestroy],
                  validate: [Function: bound _poolValidate],
                  log: [Function (anonymous)],
                  acquireTimeoutMillis: 30000,
                  createTimeoutMillis: 30000,
                  destroyTimeoutMillis: 5000,
                  idleTimeoutMillis: 300000,
                  reapIntervalMillis: 1000,
                  createRetryIntervalMillis: 200,
                  propagateCreateError: true,
                  min: 0,
                  max: 10,
                  used: [],
                  free: [],
                  pendingCreates: [],
                  pendingAcquires: [],
                  pendingDestroys: [],
                  pendingValidations: [],
                  interval: null,
                  eventId: 1
                },
                [Symbol(kCapture)]: false
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: serveStatic],
                  name: 'serveStatic',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                        route: Route {
                          path: '/',
                          stack: [
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      }
                    ]
                  },
                  name: 'router',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/subir\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function: bound dispatch],
                  name: 'bound dispatch',
                  params: {},
                  path: '/',
                  keys: [],
                  regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                  route: Route {
                    path: '/',
                    stack: [
                      Layer {
                        handle: [AsyncFunction (anonymous)],
                        name: '<anonymous>',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                        method: 'get'
                      }
                    ],
                    methods: { get: true }
                  }
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 2,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *2]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        noDelay: false,
        keepAlive: false,
        keepAliveInitialDelay: 0,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        maxRequestsPerSocket: 0,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::3080',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 159
      },
      _server: <ref *2> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype] {
          request: <ref *1> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *1] },
            response: ServerResponse { app: [Circular *1] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'D:\\Proyectos\\MeliFlex\\views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'D:\\Proyectos\\MeliFlex\\views',
                'jsonp callback name': 'callback'
              },
              db: ConnectionPool {
                _events: [Object: null prototype] {},
                _eventsCount: 0,
                _maxListeners: undefined,
                _connectStack: [],
                _closeStack: [],
                _connected: true,
                _connecting: false,
                _healthy: true,
                config: {
                  user: 'sa',
                  password: 'Estudio1426',
                  server: 'NBJMAUAS',
                  port: 1433,
                  database: 'KarinaEcht2',
                  options: {
                    instanceName: 'NEWMANAG',
                    encrypt: false,
                    trustServerCertificate: true
                  },
                  pool: { max: 10, min: 0, idleTimeoutMillis: 300000 },
                  stream: false,
                  parseJSON: false,
                  arrayRowMode: false,
                  validateConnection: true
                },
                collation: Collation {
                  lcid: 3082,
                  flags: 13,
                  version: 0,
                  sortId: 0,
                  codepage: 'CP1252',
                  buffer: undefined
                },
                pool: Pool {
                  destroyed: false,
                  emitter: EventEmitter {
                    _events: [Object: null prototype] {},
                    _eventsCount: 0,
                    _maxListeners: undefined,
                    [Symbol(kCapture)]: false
                  },
                  creator: [Function: create],
                  destroyer: [Function: bound _poolDestroy],
                  validate: [Function: bound _poolValidate],
                  log: [Function (anonymous)],
                  acquireTimeoutMillis: 30000,
                  createTimeoutMillis: 30000,
                  destroyTimeoutMillis: 5000,
                  idleTimeoutMillis: 300000,
                  reapIntervalMillis: 1000,
                  createRetryIntervalMillis: 200,
                  propagateCreateError: true,
                  min: 0,
                  max: 10,
                  used: [],
                  free: [],
                  pendingCreates: [],
                  pendingAcquires: [],
                  pendingDestroys: [],
                  pendingValidations: [],
                  interval: null,
                  eventId: 1
                },
                [Symbol(kCapture)]: false
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: serveStatic],
                  name: 'serveStatic',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                        route: Route {
                          path: '/',
                          stack: [
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      }
                    ]
                  },
                  name: 'router',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/subir\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function: bound dispatch],
                  name: 'bound dispatch',
                  params: {},
                  path: '/',
                  keys: [],
                  regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                  route: Route {
                    path: '/',
                    stack: [
                      Layer {
                        handle: [AsyncFunction (anonymous)],
                        name: '<anonymous>',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                        method: 'get'
                      }
                    ],
                    methods: { get: true }
                  }
                }
              ]
            }
          },
          connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 2,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *2]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        noDelay: false,
        keepAlive: false,
        keepAliveInitialDelay: 0,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        maxRequestsPerSocket: 0,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::3080',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 159
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *3],
        incoming: [Circular *4],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: HTTPServerAsyncResource {
          type: 'HTTPINCOMINGMESSAGE',
          socket: [Circular *3]
        }
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      setEncoding: [Function: socketSetEncoding],
      _paused: false,
      _httpMessage: ServerResponse {
        _events: [Object: null prototype] {
          finish: [Function: bound resOnFinish]
        },
        _eventsCount: 1,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        _closed: false,
        socket: [Circular *3],
        _header: null,
        _keepAliveTimeout: 5000,
        _onPendingData: [Function: bound updateOutgoingData],
        req: [Circular *4],
        _sent100: false,
        _expect_continue: false,
        locals: [Object: null prototype] {},
        [Symbol(kCapture)]: false,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          'x-powered-by': [ 'X-Powered-By', 'Express' ]
        }
      },
      [Symbol(async_id_symbol)]: 172,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *3]
      },
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: false,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/',
      path: '/',
      href: '/',
      _raw: '/'
    },
    params: {},
    query: {},
    res: <ref *5> ServerResponse {
      _events: [Object: null prototype] {
        finish: [Function: bound resOnFinish]
      },
      _eventsCount: 1,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      _closed: false,
      socket: <ref *3> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
          ],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *2> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *1> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *1] },
              response: ServerResponse { app: [Circular *1] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'D:\\Proyectos\\MeliFlex\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'D:\\Proyectos\\MeliFlex\\views',
                  'jsonp callback name': 'callback'
                },
                db: ConnectionPool {
                  _events: [Object: null prototype] {},
                  _eventsCount: 0,
                  _maxListeners: undefined,
                  _connectStack: [],
                  _closeStack: [],
                  _connected: true,
                  _connecting: false,
                  _healthy: true,
                  config: {
                    user: 'sa',
                    password: 'Estudio1426',
                    server: 'NBJMAUAS',
                    port: 1433,
                    database: 'KarinaEcht2',
                    options: {
                      instanceName: 'NEWMANAG',
                      encrypt: false,
                      trustServerCertificate: true
                    },
                    pool: { max: 10, min: 0, idleTimeoutMillis: 300000 },
                    stream: false,
                    parseJSON: false,
                    arrayRowMode: false,
                    validateConnection: true
                  },
                  collation: Collation {
                    lcid: 3082,
                    flags: 13,
                    version: 0,
                    sortId: 0,
                    codepage: 'CP1252',
                    buffer: undefined
                  },
                  pool: Pool {
                    destroyed: false,
                    emitter: EventEmitter {
                      _events: [Object: null prototype] {},
                      _eventsCount: 0,
                      _maxListeners: undefined,
                      [Symbol(kCapture)]: false
                    },
                    creator: [Function: create],
                    destroyer: [Function: bound _poolDestroy],
                    validate: [Function: bound _poolValidate],
                    log: [Function (anonymous)],
                    acquireTimeoutMillis: 30000,
                    createTimeoutMillis: 30000,
                    destroyTimeoutMillis: 5000,
                    idleTimeoutMillis: 300000,
                    reapIntervalMillis: 1000,
                    createRetryIntervalMillis: 200,
                    propagateCreateError: true,
                    min: 0,
                    max: 10,
                    used: [],
                    free: [],
                    pendingCreates: [],
                    pendingAcquires: [],
                    pendingDestroys: [],
                    pendingValidations: [],
                    interval: null,
                    eventId: 1
                  },
                  [Symbol(kCapture)]: false
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: serveStatic],
                    name: 'serveStatic',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/',
                            stack: [
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        }
                      ]
                    },
                    name: 'router',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/subir\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: bound dispatch],
                    name: 'bound dispatch',
                    params: {},
                    path: '/',
                    keys: [],
                    regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                    route: Route {
                      path: '/',
                      stack: [
                        Layer {
                          handle: [AsyncFunction (anonymous)],
                          name: '<anonymous>',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          method: 'get'
                        }
                      ],
                      methods: { get: true }
                    }
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 2,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *2]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          noDelay: false,
          keepAlive: false,
          keepAliveInitialDelay: 0,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          maxRequestsPerSocket: 0,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::3080',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 159
        },
        _server: <ref *2> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          _events: [Object: null prototype] {
            request: <ref *1> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *1] },
              response: ServerResponse { app: [Circular *1] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'D:\\Proyectos\\MeliFlex\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'D:\\Proyectos\\MeliFlex\\views',
                  'jsonp callback name': 'callback'
                },
                db: ConnectionPool {
                  _events: [Object: null prototype] {},
                  _eventsCount: 0,
                  _maxListeners: undefined,
                  _connectStack: [],
                  _closeStack: [],
                  _connected: true,
                  _connecting: false,
                  _healthy: true,
                  config: {
                    user: 'sa',
                    password: 'Estudio1426',
                    server: 'NBJMAUAS',
                    port: 1433,
                    database: 'KarinaEcht2',
                    options: {
                      instanceName: 'NEWMANAG',
                      encrypt: false,
                      trustServerCertificate: true
                    },
                    pool: { max: 10, min: 0, idleTimeoutMillis: 300000 },
                    stream: false,
                    parseJSON: false,
                    arrayRowMode: false,
                    validateConnection: true
                  },
                  collation: Collation {
                    lcid: 3082,
                    flags: 13,
                    version: 0,
                    sortId: 0,
                    codepage: 'CP1252',
                    buffer: undefined
                  },
                  pool: Pool {
                    destroyed: false,
                    emitter: EventEmitter {
                      _events: [Object: null prototype] {},
                      _eventsCount: 0,
                      _maxListeners: undefined,
                      [Symbol(kCapture)]: false
                    },
                    creator: [Function: create],
                    destroyer: [Function: bound _poolDestroy],
                    validate: [Function: bound _poolValidate],
                    log: [Function (anonymous)],
                    acquireTimeoutMillis: 30000,
                    createTimeoutMillis: 30000,
                    destroyTimeoutMillis: 5000,
                    idleTimeoutMillis: 300000,
                    reapIntervalMillis: 1000,
                    createRetryIntervalMillis: 200,
                    propagateCreateError: true,
                    min: 0,
                    max: 10,
                    used: [],
                    free: [],
                    pendingCreates: [],
                    pendingAcquires: [],
                    pendingDestroys: [],
                    pendingValidations: [],
                    interval: null,
                    eventId: 1
                  },
                  [Symbol(kCapture)]: false
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: serveStatic],
                    name: 'serveStatic',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: Route {
                            path: '/',
                            stack: [
                              Layer {
                                handle: [Function (anonymous)],
                                name: '<anonymous>',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                method: 'post'
                              }
                            ],
                            methods: { post: true }
                          }
                        }
                      ]
                    },
                    name: 'router',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/subir\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: bound dispatch],
                    name: 'bound dispatch',
                    params: {},
                    path: '/',
                    keys: [],
                    regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                    route: Route {
                      path: '/',
                      stack: [
                        Layer {
                          handle: [AsyncFunction (anonymous)],
                          name: '<anonymous>',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/?$/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          method: 'get'
                        }
                      ],
                      methods: { get: true }
                    }
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 2,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *2]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          noDelay: false,
          keepAlive: false,
          keepAliveInitialDelay: 0,
          httpAllowHalfOpen: false,
          timeout: 0,
          keepAliveTimeout: 5000,
          maxHeadersCount: null,
          maxRequestsPerSocket: 0,
          headersTimeout: 60000,
          requestTimeout: 0,
          _connectionKey: '6::::3080',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 159
        },
        parser: HTTPParser {
          '0': [Function: bound setRequestTimeout],
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *3],
          incoming: [Circular *4],
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *3]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        setEncoding: [Function: socketSetEncoding],
        _paused: false,
        _httpMessage: [Circular *5],
        [Symbol(async_id_symbol)]: 172,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *3]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: false,
        [Symbol(kSetKeepAliveInitialDelay)]: 0,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      _header: null,
      _keepAliveTimeout: 5000,
      _onPendingData: [Function: bound updateOutgoingData],
      req: [Circular *4],
      _sent100: false,
      _expect_continue: false,
      locals: [Object: null prototype] {},
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        'x-powered-by': [ 'X-Powered-By', 'Express' ]
      }
    },
    body: {},
    _parsedOriginalUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/',
      path: '/',
      href: '/',
      _raw: '/'
    },
    route: Route {
      path: '/',
      stack: [
        Layer {
          handle: [AsyncFunction (anonymous)],
          name: '<anonymous>',
          params: undefined,
          path: undefined,
          keys: [],
          regexp: /^\/?$/i { fast_star: false, fast_slash: false },
          method: 'get'
        }
      ],
      methods: { get: true }
    },
    [Symbol(kCapture)]: false,
    [Symbol(kHeaders)]: {
      host: 'localhost:3080',
      connection: 'keep-alive',
      'cache-control': 'max-age=0',
      'sec-ch-ua': '" Not A;Brand";v="99", "Chromium";v="102", "Google Chrome";v="102"',
      'sec-ch-ua-mobile': '?0',
      'sec-ch-ua-platform': '"Windows"',
      dnt: '1',
      'upgrade-insecure-requests': '1',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36',
      accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
      'sec-fetch-site': 'none',
      'sec-fetch-mode': 'navigate',
      'sec-fetch-user': '?1',
      'sec-fetch-dest': 'document',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'es-ES,es;q=0.9',
      'if-none-match': 'W/"88e-181547dc48c"',
      'if-modified-since': 'Sat, 11 Jun 2022 20:38:57 GMT'
    },
    [Symbol(kHeadersCount)]: 36,
    [Symbol(kTrailers)]: null,
    [Symbol(kTrailersCount)]: 0,
    [Symbol(RequestTimeout)]: undefined
  },
  level: 'error',
  timestamp: '2022-06-12T16:41:37.854Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:44:44.936Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:46:01.221Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:46:41.367Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:47:02.329Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:47:05.653Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:47:11.632Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:47:17.595Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:47:22.727Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:47:32.886Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:49:43.093Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:50:31.107Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:50:32.989Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:51:10.250Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:51:33.645Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:51:38.470Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:51:39.364Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:51:46.580Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:52:14.404Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:52:36.618Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:52:40.287Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:52:42.543Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:52:59.664Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:53:24.655Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:54:31.571Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:54:36.481Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:55:17.404Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:55:37.190Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:55:45.426Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:55:57.684Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:56:36.406Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:58:09.083Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T16:58:12.582Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T17:00:40.501Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T17:01:25.623Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T17:01:34.305Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T17:01:57.237Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T17:02:14.960Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T17:02:20.041Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T17:02:25.057Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T17:02:28.416Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T17:03:07.949Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T17:05:56.260Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T17:06:02.275Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T17:19:41.205Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T17:20:14.290Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T17:20:28.246Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T17:20:30.640Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T17:20:34.213Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T17:20:35.146Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T17:20:40.861Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T17:38:59.820Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T17:39:26.595Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T17:39:32.148Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T17:39:33.933Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T17:39:46.677Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T17:40:03.863Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T17:40:11.074Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T17:40:22.788Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T17:40:25.975Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T17:55:47.483Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T17:55:49.912Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T17:56:00.555Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T17:56:02.286Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T17:56:12.085Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T17:57:42.320Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T17:57:44.561Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T17:57:50.067Z'
}
{
  code: 'EREQUEST',
  originalError: Error: Invalid column name 'object Promise'.
      at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:382:19)
      at Connection.emit (node:events:527:28)
      at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
      at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
      at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
      at Readable.emit (node:events:527:28)
      at addChunk (node:internal/streams/readable:315:12)
      at readableAddChunk (node:internal/streams/readable:289:9)
      at Readable.push (node:internal/streams/readable:228:10)
      at next (node:internal/streams/from:98:31) {
    info: ErrorMessageToken {
      name: 'ERROR',
      handlerName: 'onErrorMessage',
      number: 207,
      state: 1,
      class: 16,
      message: "Invalid column name 'object Promise'.",
      serverName: 'NBJMAUAS\\NEWMANAG',
      procName: '',
      lineNumber: 1
    }
  },
  name: 'RequestError',
  number: 207,
  lineNumber: 1,
  state: 1,
  class: 16,
  serverName: 'NBJMAUAS\\NEWMANAG',
  procName: '',
  precedingErrors: [],
  level: 'error',
  timestamp: '2022-06-12T18:00:00.896Z'
}
{
  code: 'EREQUEST',
  originalError: Error: Invalid column name 'object Promise'.
      at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:382:19)
      at Connection.emit (node:events:527:28)
      at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
      at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
      at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
      at Readable.emit (node:events:527:28)
      at addChunk (node:internal/streams/readable:315:12)
      at readableAddChunk (node:internal/streams/readable:289:9)
      at Readable.push (node:internal/streams/readable:228:10)
      at next (node:internal/streams/from:98:31) {
    info: ErrorMessageToken {
      name: 'ERROR',
      handlerName: 'onErrorMessage',
      number: 207,
      state: 1,
      class: 16,
      message: "Invalid column name 'object Promise'.",
      serverName: 'NBJMAUAS\\NEWMANAG',
      procName: '',
      lineNumber: 1
    }
  },
  name: 'RequestError',
  number: 207,
  lineNumber: 1,
  state: 1,
  class: 16,
  serverName: 'NBJMAUAS\\NEWMANAG',
  procName: '',
  precedingErrors: [],
  level: 'error',
  timestamp: '2022-06-12T18:00:45.175Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:01:43.130Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:01:46.044Z'
}
{
  code: 'ETIMEOUT',
  originalError: ConnectionError: Failed to connect to NBJMAUAS\NEWMANAG in 15000ms
      at Connection.connectTimeout (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1284:26)
      at Timeout._onTimeout (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1229:12)
      at listOnTimeout (node:internal/timers:559:17)
      at processTimers (node:internal/timers:502:7) {
    code: 'ETIMEOUT',
    isTransient: undefined
  },
  name: 'ConnectionError',
  level: 'error',
  timestamp: '2022-06-12T18:02:11.913Z'
}
{
  code: 'ETIMEOUT',
  originalError: ConnectionError: Failed to connect to NBJMAUAS\NEWMANAG in 15000ms
      at Connection.connectTimeout (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1284:26)
      at Timeout._onTimeout (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1229:12)
      at listOnTimeout (node:internal/timers:559:17)
      at processTimers (node:internal/timers:502:7) {
    code: 'ETIMEOUT',
    isTransient: undefined
  },
  name: 'ConnectionError',
  level: 'error',
  timestamp: '2022-06-12T18:02:11.913Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:03:35.636Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:03:38.175Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:03:57.243Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:05:08.875Z'
}
{
  code: 'EREQUEST',
  originalError: Error: Conversion failed when converting date and/or time from character string.
      at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:382:19)
      at Connection.emit (node:events:527:28)
      at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
      at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
      at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
      at Readable.emit (node:events:527:28)
      at addChunk (node:internal/streams/readable:315:12)
      at readableAddChunk (node:internal/streams/readable:289:9)
      at Readable.push (node:internal/streams/readable:228:10)
      at next (node:internal/streams/from:98:31) {
    info: ErrorMessageToken {
      name: 'ERROR',
      handlerName: 'onErrorMessage',
      number: 241,
      state: 1,
      class: 16,
      message: 'Conversion failed when converting date and/or time from character string.',
      serverName: 'NBJMAUAS\\NEWMANAG',
      procName: '',
      lineNumber: 1
    }
  },
  name: 'RequestError',
  number: 241,
  lineNumber: 1,
  state: 1,
  class: 16,
  serverName: 'NBJMAUAS\\NEWMANAG',
  procName: '',
  precedingErrors: [],
  level: 'error',
  timestamp: '2022-06-12T18:05:21.236Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:05:50.530Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:06:07.769Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:06:10.860Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:11:53.912Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:12:02.958Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:12:09.992Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:12:55.850Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:22:41.740Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:23:10.586Z'
}
{
  code: 'EREQUEST',
  originalError: Error: Invalid column name 'NaN'.
      at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:382:19)
      at Connection.emit (node:events:527:28)
      at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
      at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
      at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
      at Readable.emit (node:events:527:28)
      at addChunk (node:internal/streams/readable:315:12)
      at readableAddChunk (node:internal/streams/readable:289:9)
      at Readable.push (node:internal/streams/readable:228:10)
      at next (node:internal/streams/from:98:31) {
    info: ErrorMessageToken {
      name: 'ERROR',
      handlerName: 'onErrorMessage',
      number: 207,
      state: 1,
      class: 16,
      message: "Invalid column name 'NaN'.",
      serverName: 'NBJMAUAS\\NEWMANAG',
      procName: '',
      lineNumber: 1
    }
  },
  name: 'RequestError',
  number: 207,
  lineNumber: 1,
  state: 1,
  class: 16,
  serverName: 'NBJMAUAS\\NEWMANAG',
  procName: '',
  precedingErrors: [],
  level: 'error',
  timestamp: '2022-06-12T18:23:16.191Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:24:14.008Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:24:15.600Z'
}
{
  code: 'EREQUEST',
  originalError: Error: Invalid column name 'NaN'.
      at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:382:19)
      at Connection.emit (node:events:527:28)
      at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
      at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
      at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
      at Readable.emit (node:events:527:28)
      at addChunk (node:internal/streams/readable:315:12)
      at readableAddChunk (node:internal/streams/readable:289:9)
      at Readable.push (node:internal/streams/readable:228:10)
      at next (node:internal/streams/from:98:31) {
    info: ErrorMessageToken {
      name: 'ERROR',
      handlerName: 'onErrorMessage',
      number: 207,
      state: 1,
      class: 16,
      message: "Invalid column name 'NaN'.",
      serverName: 'NBJMAUAS\\NEWMANAG',
      procName: '',
      lineNumber: 1
    }
  },
  name: 'RequestError',
  number: 207,
  lineNumber: 1,
  state: 1,
  class: 16,
  serverName: 'NBJMAUAS\\NEWMANAG',
  procName: '',
  precedingErrors: [],
  level: 'error',
  timestamp: '2022-06-12T18:24:23.037Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:24:58.243Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:25:02.222Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:25:09.417Z'
}
{
  code: 'EREQUEST',
  originalError: Error: Invalid column name 'NaN'.
      at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:382:19)
      at Connection.emit (node:events:527:28)
      at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
      at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
      at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
      at Readable.emit (node:events:527:28)
      at addChunk (node:internal/streams/readable:315:12)
      at readableAddChunk (node:internal/streams/readable:289:9)
      at Readable.push (node:internal/streams/readable:228:10)
      at next (node:internal/streams/from:98:31) {
    info: ErrorMessageToken {
      name: 'ERROR',
      handlerName: 'onErrorMessage',
      number: 207,
      state: 1,
      class: 16,
      message: "Invalid column name 'NaN'.",
      serverName: 'NBJMAUAS\\NEWMANAG',
      procName: '',
      lineNumber: 1
    }
  },
  name: 'RequestError',
  number: 207,
  lineNumber: 1,
  state: 1,
  class: 16,
  serverName: 'NBJMAUAS\\NEWMANAG',
  procName: '',
  precedingErrors: [],
  level: 'error',
  timestamp: '2022-06-12T18:25:17.259Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:25:51.702Z'
}
{
  code: 'EREQUEST',
  originalError: Error: Invalid column name 'NaN'.
      at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:382:19)
      at Connection.emit (node:events:527:28)
      at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
      at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
      at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
      at Readable.emit (node:events:527:28)
      at addChunk (node:internal/streams/readable:315:12)
      at readableAddChunk (node:internal/streams/readable:289:9)
      at Readable.push (node:internal/streams/readable:228:10)
      at next (node:internal/streams/from:98:31) {
    info: ErrorMessageToken {
      name: 'ERROR',
      handlerName: 'onErrorMessage',
      number: 207,
      state: 1,
      class: 16,
      message: "Invalid column name 'NaN'.",
      serverName: 'NBJMAUAS\\NEWMANAG',
      procName: '',
      lineNumber: 1
    }
  },
  name: 'RequestError',
  number: 207,
  lineNumber: 1,
  state: 1,
  class: 16,
  serverName: 'NBJMAUAS\\NEWMANAG',
  procName: '',
  precedingErrors: [],
  level: 'error',
  timestamp: '2022-06-12T18:25:57.519Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:26:10.403Z'
}
{
  code: 'EREQUEST',
  originalError: Error: Invalid column name 'NaN'.
      at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:382:19)
      at Connection.emit (node:events:527:28)
      at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
      at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
      at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
      at Readable.emit (node:events:527:28)
      at addChunk (node:internal/streams/readable:315:12)
      at readableAddChunk (node:internal/streams/readable:289:9)
      at Readable.push (node:internal/streams/readable:228:10)
      at next (node:internal/streams/from:98:31) {
    info: ErrorMessageToken {
      name: 'ERROR',
      handlerName: 'onErrorMessage',
      number: 207,
      state: 1,
      class: 16,
      message: "Invalid column name 'NaN'.",
      serverName: 'NBJMAUAS\\NEWMANAG',
      procName: '',
      lineNumber: 1
    }
  },
  name: 'RequestError',
  number: 207,
  lineNumber: 1,
  state: 1,
  class: 16,
  serverName: 'NBJMAUAS\\NEWMANAG',
  procName: '',
  precedingErrors: [],
  level: 'error',
  timestamp: '2022-06-12T18:26:17.652Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:26:28.361Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:26:30.473Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:26:35.327Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:26:39.084Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:27:12.516Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:27:25.496Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:27:51.654Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:27:57.148Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:28:01.361Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:28:03.118Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:28:37.989Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:28:41.442Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:28:51.349Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:30:36.478Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:31:24.791Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:31:54.647Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:31:56.707Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:31:59.359Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:32:09.902Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:32:34.913Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:32:38.399Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:32:42.204Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:36:16.381Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:36:29.187Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:36:39.158Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:37:08.757Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:37:21.577Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:37:23.611Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:37:25.976Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:37:28.072Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:37:49.364Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:37:56.056Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:37:57.776Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:38:01.344Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:38:02.481Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:38:03.805Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T18:45:49.525Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T19:19:25.318Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T19:19:28.073Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T19:19:58.818Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T19:20:08.911Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:26:23.561Z'
}
{
  code: 'EREQUEST',
  originalError: Error: Error converting data type varchar to numeric.
      at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:382:19)
      at Connection.emit (node:events:527:28)
      at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
      at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
      at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
      at Readable.emit (node:events:527:28)
      at addChunk (node:internal/streams/readable:315:12)
      at readableAddChunk (node:internal/streams/readable:289:9)
      at Readable.push (node:internal/streams/readable:228:10)
      at next (node:internal/streams/from:98:31) {
    info: ErrorMessageToken {
      name: 'ERROR',
      handlerName: 'onErrorMessage',
      number: 8114,
      state: 5,
      class: 16,
      message: 'Error converting data type varchar to numeric.',
      serverName: 'NBJMAUAS\\NEWMANAG',
      procName: '',
      lineNumber: 1
    }
  },
  name: 'RequestError',
  number: 8114,
  lineNumber: 1,
  state: 5,
  class: 16,
  serverName: 'NBJMAUAS\\NEWMANAG',
  procName: '',
  precedingErrors: [],
  level: 'error',
  timestamp: '2022-06-12T21:27:03.255Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:29:10.183Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:29:28.732Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:29:30.878Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:29:32.411Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:29:37.610Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:29:56.608Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:30:01.698Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:30:09.443Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:30:14.716Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:30:37.656Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:30:40.212Z'
}
{
  code: 'EREQUEST',
  originalError: Error: Error converting data type varchar to numeric.
      at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:382:19)
      at Connection.emit (node:events:527:28)
      at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
      at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
      at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
      at Readable.emit (node:events:527:28)
      at addChunk (node:internal/streams/readable:315:12)
      at readableAddChunk (node:internal/streams/readable:289:9)
      at Readable.push (node:internal/streams/readable:228:10)
      at next (node:internal/streams/from:98:31) {
    info: ErrorMessageToken {
      name: 'ERROR',
      handlerName: 'onErrorMessage',
      number: 8114,
      state: 5,
      class: 16,
      message: 'Error converting data type varchar to numeric.',
      serverName: 'NBJMAUAS\\NEWMANAG',
      procName: '',
      lineNumber: 1
    }
  },
  name: 'RequestError',
  number: 8114,
  lineNumber: 1,
  state: 5,
  class: 16,
  serverName: 'NBJMAUAS\\NEWMANAG',
  procName: '',
  precedingErrors: [],
  level: 'error',
  timestamp: '2022-06-12T21:30:45.650Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:31:24.453Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:31:52.479Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:32:09.968Z'
}
{
  code: 'EREQUEST',
  originalError: Error: Error converting data type varchar to numeric.
      at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:382:19)
      at Connection.emit (node:events:527:28)
      at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
      at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
      at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
      at Readable.emit (node:events:527:28)
      at addChunk (node:internal/streams/readable:315:12)
      at readableAddChunk (node:internal/streams/readable:289:9)
      at Readable.push (node:internal/streams/readable:228:10)
      at next (node:internal/streams/from:98:31) {
    info: ErrorMessageToken {
      name: 'ERROR',
      handlerName: 'onErrorMessage',
      number: 8114,
      state: 5,
      class: 16,
      message: 'Error converting data type varchar to numeric.',
      serverName: 'NBJMAUAS\\NEWMANAG',
      procName: '',
      lineNumber: 1
    }
  },
  name: 'RequestError',
  number: 8114,
  lineNumber: 1,
  state: 5,
  class: 16,
  serverName: 'NBJMAUAS\\NEWMANAG',
  procName: '',
  precedingErrors: [],
  level: 'error',
  timestamp: '2022-06-12T21:32:14.096Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:33:06.852Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:33:11.121Z'
}
{
  code: 'EREQUEST',
  originalError: Error: Error converting data type varchar to numeric.
      at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:382:19)
      at Connection.emit (node:events:527:28)
      at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
      at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
      at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
      at Readable.emit (node:events:527:28)
      at addChunk (node:internal/streams/readable:315:12)
      at readableAddChunk (node:internal/streams/readable:289:9)
      at Readable.push (node:internal/streams/readable:228:10)
      at next (node:internal/streams/from:98:31) {
    info: ErrorMessageToken {
      name: 'ERROR',
      handlerName: 'onErrorMessage',
      number: 8114,
      state: 5,
      class: 16,
      message: 'Error converting data type varchar to numeric.',
      serverName: 'NBJMAUAS\\NEWMANAG',
      procName: '',
      lineNumber: 1
    }
  },
  name: 'RequestError',
  number: 8114,
  lineNumber: 1,
  state: 5,
  class: 16,
  serverName: 'NBJMAUAS\\NEWMANAG',
  procName: '',
  precedingErrors: [],
  level: 'error',
  timestamp: '2022-06-12T21:33:17.959Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:37:45.611Z'
}
{
  code: 'EREQUEST',
  originalError: Error: Error converting data type varchar to numeric.
      at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:382:19)
      at Connection.emit (node:events:527:28)
      at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
      at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
      at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
      at Readable.emit (node:events:527:28)
      at addChunk (node:internal/streams/readable:315:12)
      at readableAddChunk (node:internal/streams/readable:289:9)
      at Readable.push (node:internal/streams/readable:228:10)
      at next (node:internal/streams/from:98:31) {
    info: ErrorMessageToken {
      name: 'ERROR',
      handlerName: 'onErrorMessage',
      number: 8114,
      state: 5,
      class: 16,
      message: 'Error converting data type varchar to numeric.',
      serverName: 'NBJMAUAS\\NEWMANAG',
      procName: '',
      lineNumber: 1
    }
  },
  name: 'RequestError',
  number: 8114,
  lineNumber: 1,
  state: 5,
  class: 16,
  serverName: 'NBJMAUAS\\NEWMANAG',
  procName: '',
  precedingErrors: [],
  level: 'error',
  timestamp: '2022-06-12T21:37:53.399Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:40:26.983Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:40:37.495Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:40:40.879Z'
}
{
  code: 'EREQUEST',
  originalError: Error: Error converting data type varchar to numeric.
      at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:382:19)
      at Connection.emit (node:events:527:28)
      at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
      at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
      at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
      at Readable.emit (node:events:527:28)
      at addChunk (node:internal/streams/readable:315:12)
      at readableAddChunk (node:internal/streams/readable:289:9)
      at Readable.push (node:internal/streams/readable:228:10)
      at next (node:internal/streams/from:98:31) {
    info: ErrorMessageToken {
      name: 'ERROR',
      handlerName: 'onErrorMessage',
      number: 8114,
      state: 5,
      class: 16,
      message: 'Error converting data type varchar to numeric.',
      serverName: 'NBJMAUAS\\NEWMANAG',
      procName: '',
      lineNumber: 1
    }
  },
  name: 'RequestError',
  number: 8114,
  lineNumber: 1,
  state: 5,
  class: 16,
  serverName: 'NBJMAUAS\\NEWMANAG',
  procName: '',
  precedingErrors: [],
  level: 'error',
  timestamp: '2022-06-12T21:40:57.618Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:45:50.786Z'
}
{
  code: 'EREQUEST',
  originalError: Error: Error converting data type varchar to numeric.
      at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:382:19)
      at Connection.emit (node:events:527:28)
      at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
      at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
      at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
      at Readable.emit (node:events:527:28)
      at addChunk (node:internal/streams/readable:315:12)
      at readableAddChunk (node:internal/streams/readable:289:9)
      at Readable.push (node:internal/streams/readable:228:10)
      at next (node:internal/streams/from:98:31) {
    info: ErrorMessageToken {
      name: 'ERROR',
      handlerName: 'onErrorMessage',
      number: 8114,
      state: 5,
      class: 16,
      message: 'Error converting data type varchar to numeric.',
      serverName: 'NBJMAUAS\\NEWMANAG',
      procName: '',
      lineNumber: 1
    }
  },
  name: 'RequestError',
  number: 8114,
  lineNumber: 1,
  state: 5,
  class: 16,
  serverName: 'NBJMAUAS\\NEWMANAG',
  procName: '',
  precedingErrors: [],
  level: 'error',
  timestamp: '2022-06-12T21:45:59.907Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:46:37.479Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:47:00.298Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:47:06.511Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:48:19.032Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:49:58.729Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:50:00.557Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:51:12.420Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:51:20.532Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:51:22.495Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:51:41.443Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:53:00.996Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:53:03.570Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:53:05.094Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:53:39.436Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:53:46.625Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:53:49.811Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:54:26.566Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:54:40.093Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:55:00.637Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:55:02.966Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:55:15.281Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:55:48.450Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:55:51.489Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:55:57.185Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:56:00.415Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:56:43.949Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:59:16.973Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:59:19.173Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:59:56.335Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T21:59:59.064Z'
}
{
  code: 'EREQUEST',
  originalError: Error: Invalid column name 'undefined'.
      at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:382:19)
      at Connection.emit (node:events:527:28)
      at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
      at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
      at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
      at Readable.emit (node:events:527:28)
      at addChunk (node:internal/streams/readable:315:12)
      at readableAddChunk (node:internal/streams/readable:289:9)
      at Readable.push (node:internal/streams/readable:228:10)
      at next (node:internal/streams/from:98:31) {
    info: ErrorMessageToken {
      name: 'ERROR',
      handlerName: 'onErrorMessage',
      number: 207,
      state: 1,
      class: 16,
      message: "Invalid column name 'undefined'.",
      serverName: 'NBJMAUAS\\NEWMANAG',
      procName: '',
      lineNumber: 1
    }
  },
  name: 'RequestError',
  number: 207,
  lineNumber: 1,
  state: 1,
  class: 16,
  serverName: 'NBJMAUAS\\NEWMANAG',
  procName: '',
  precedingErrors: [],
  level: 'error',
  timestamp: '2022-06-12T22:00:10.231Z'
}
{ level: 'error', timestamp: '2022-06-12T22:00:10.237Z' }
{
  message: 'Request failed with status code 400',
  name: 'AxiosError',
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [Function: httpAdapter],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] {
        LINE_BREAK: '\r\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      }
    },
    validateStatus: [Function: validateStatus],
    headers: {
      Accept: 'application/json, text/plain, */*',
      'User-Agent': 'axios/0.27.2'
    },
    method: 'get',
    url: 'https://api.mercadolibre.com/orders/undefined?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
    data: undefined
  },
  request: <ref *2> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      prefinish: [Function: requestOnPrefinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: false,
    socket: <ref *1> TLSSocket {
      _tlsOptions: {
        allowHalfOpen: undefined,
        pipe: false,
        secureContext: SecureContext { context: SecureContext {} },
        isServer: false,
        requestCert: true,
        rejectUnauthorized: true,
        session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 7a 6c 13 75 14 cf 44 cf e2 91 f6 44 86 94 ff 1d e2 82 fb 95 cc 39 48 4f 9f 06 91 36 a9 67 01 b4 04 ... 1937 more bytes>,
        ALPNProtocols: undefined,
        requestOCSP: undefined,
        enableTrace: undefined,
        pskCallback: undefined,
        highWaterMark: undefined,
        onread: undefined,
        signal: undefined
      },
      _secureEstablished: true,
      _securePending: false,
      _newSessionPending: false,
      _controlReleased: true,
      secureConnecting: false,
      _SNICallback: null,
      servername: 'api.mercadolibre.com',
      alpnProtocol: false,
      authorized: true,
      authorizationError: null,
      encrypted: true,
      _events: [Object: null prototype] {
        close: [
          [Function: onSocketCloseDestroySSL],
          [Function: bound onceWrapper] {
            listener: [Function (anonymous)]
          },
          [Function: onClose],
          [Function: socketCloseListener]
        ],
        end: [Function: onReadableStreamEnd],
        newListener: [Function: keylogNewListener],
        secure: [Function: onConnectSecure],
        session: [Function (anonymous)],
        free: [Function: onFree],
        timeout: [Function: onTimeout],
        agentRemove: [Function: onRemove],
        error: [Function: socketErrorListener],
        finish: [Function: bound onceWrapper] { listener: [Function: destroy] }
      },
      _eventsCount: 10,
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'api.mercadolibre.com',
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        constructed: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: true,
        needDrain: false,
        ending: true,
        ended: true,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: undefined,
      _server: null,
      ssl: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      _requestCert: true,
      _rejectUnauthorized: true,
      parser: null,
      _httpMessage: [Circular *2],
      [Symbol(res)]: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(verified)]: true,
      [Symbol(pendingSession)]: null,
      [Symbol(async_id_symbol)]: 476,
      [Symbol(kHandle)]: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: false,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 60,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(connect-options)]: {
        rejectUnauthorized: true,
        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
        checkServerIdentity: [Function: checkServerIdentity],
        minDHSize: 1024,
        session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 7a 6c 13 75 14 cf 44 cf e2 91 f6 44 86 94 ff 1d e2 82 fb 95 cc 39 48 4f 9f 06 91 36 a9 67 01 b4 04 ... 1937 more bytes>,
        maxRedirects: 21,
        maxBodyLength: 10485760,
        protocol: 'https:',
        path: null,
        method: 'GET',
        headers: {
          Accept: 'application/json, text/plain, */*',
          'User-Agent': 'axios/0.27.2'
        },
        agent: undefined,
        agents: { http: undefined, https: undefined },
        auth: undefined,
        hostname: 'api.mercadolibre.com',
        port: 443,
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 41 71 bf 3e 63 00 af d5 98 7f a8 b9 34 2b f9 d6 61 fd c2 a6 5c b0 06 19 14 66 fb 66 db 35 ab a5 04 ... 1937 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/orders/undefined',
        search: '?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
        _defaultAgent: Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] { path: null },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          maxCachedSessions: 100,
          _sessionCache: {
            map: {
              'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 41 71 bf 3e 63 00 af d5 98 7f a8 b9 34 2b f9 d6 61 fd c2 a6 5c b0 06 19 14 66 fb 66 db 35 ab a5 04 ... 1937 more bytes>
            },
            list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
          },
          [Symbol(kCapture)]: false
        },
        host: 'api.mercadolibre.com',
        servername: 'api.mercadolibre.com',
        _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
        encoding: null,
        singleUse: true
      },
      [Symbol(RequestTimeout)]: undefined
    },
    _header: 'GET /orders/undefined?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378 HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'User-Agent: axios/0.27.2\r\n' +
      'Host: api.mercadolibre.com\r\n' +
      'Connection: close\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: <ref *3> Agent {
      _events: [Object: null prototype] {
        free: [Function (anonymous)],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] { path: null },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {
        'api.mercadolibre.com:443:::::::::::::::::::::': [
          <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 7a 6c 13 75 14 cf 44 cf e2 91 f6 44 86 94 ff 1d e2 82 fb 95 cc 39 48 4f 9f 06 91 36 a9 67 01 b4 04 ... 1937 more bytes>,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'api.mercadolibre.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 10,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'api.mercadolibre.com',
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *2],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 476,
            [Symbol(kHandle)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 7a 6c 13 75 14 cf 44 cf e2 91 f6 44 86 94 ff 1d e2 82 fb 95 cc 39 48 4f 9f 06 91 36 a9 67 01 b4 04 ... 1937 more bytes>,
              maxRedirects: 21,
              maxBodyLength: 10485760,
              protocol: 'https:',
              path: null,
              method: 'GET',
              headers: {
                Accept: 'application/json, text/plain, */*',
                'User-Agent': 'axios/0.27.2'
              },
              agent: undefined,
              agents: { http: undefined, https: undefined },
              auth: undefined,
              hostname: 'api.mercadolibre.com',
              port: 443,
              nativeProtocols: {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: [Circular *3],
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/orders/undefined',
              search: '?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
              _defaultAgent: [Circular *3],
              host: 'api.mercadolibre.com',
              servername: 'api.mercadolibre.com',
              _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            },
            [Symbol(RequestTimeout)]: undefined
          }
        ]
      },
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      maxCachedSessions: 100,
      _sessionCache: {
        map: {
          'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 41 71 bf 3e 63 00 af d5 98 7f a8 b9 34 2b f9 d6 61 fd c2 a6 5c b0 06 19 14 66 fb 66 db 35 ab a5 04 ... 1937 more bytes>
        },
        list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
      },
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    path: '/orders/undefined?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
    _ended: true,
    res: IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        constructed: true,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        destroyed: true,
        errored: null,
        closed: true,
        closeEmitted: true,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: true,
        dataEmitted: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
        data: [Function: handleStreamData],
        aborted: [Function: handlerStreamAborted],
        error: [Function: handleStreamError]
      },
      _eventsCount: 4,
      _maxListeners: undefined,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 7a 6c 13 75 14 cf 44 cf e2 91 f6 44 86 94 ff 1d e2 82 fb 95 cc 39 48 4f 9f 06 91 36 a9 67 01 b4 04 ... 1937 more bytes>,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadolibre.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadolibre.com',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 476,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 7a 6c 13 75 14 cf 44 cf e2 91 f6 44 86 94 ff 1d e2 82 fb 95 cc 39 48 4f 9f 06 91 36 a9 67 01 b4 04 ... 1937 more bytes>,
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: null,
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: 443,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 41 71 bf 3e 63 00 af d5 98 7f a8 b9 34 2b f9 d6 61 fd c2 a6 5c b0 06 19 14 66 fb 66 db 35 ab a5 04 ... 1937 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/orders/undefined',
          search: '?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
          _defaultAgent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 41 71 bf 3e 63 00 af d5 98 7f a8 b9 34 2b f9 d6 61 fd c2 a6 5c b0 06 19 14 66 fb 66 db 35 ab a5 04 ... 1937 more bytes>
              },
              list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'api.mercadolibre.com',
          servername: 'api.mercadolibre.com',
          _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        },
        [Symbol(RequestTimeout)]: undefined
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [
        'Content-Type',
        'text/html',
        'Content-Length',
        '242',
        'Connection',
        'close',
        'Date',
        'Sun, 12 Jun 2022 22:00:10 GMT',
        'X-Content-Type-Options',
        'nosniff',
        'X-Request-Id',
        'c3b75908-4a36-49e9-a072-82134c39ddd0',
        'X-Frame-Options',
        'DENY',
        'X-XSS-Protection',
        '1; mode=block',
        'Access-Control-Allow-Origin',
        '*',
        'Access-Control-Allow-Headers',
        'Content-Type',
        'Access-Control-Allow-Methods',
        'PUT, GET, POST, DELETE, OPTIONS',
        'Access-Control-Max-Age',
        '86400',
        'X-Cache',
        'Error from cloudfront',
        'Via',
        '1.1 fccb6b9c4ebd61ac6c5fc94394de34f2.cloudfront.net (CloudFront)',
        'X-Amz-Cf-Pop',
        'EZE51-C1',
        'X-Amz-Cf-Id',
        'qG0Ub5_UWTFUojaB2ZEc2ZSuVz41qeQP5iEDuvxXROtl2KlEpKGhMQ=='
      ],
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 400,
      statusMessage: 'Bad Request',
      client: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 7a 6c 13 75 14 cf 44 cf e2 91 f6 44 86 94 ff 1d e2 82 fb 95 cc 39 48 4f 9f 06 91 36 a9 67 01 b4 04 ... 1937 more bytes>,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadolibre.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadolibre.com',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 476,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 7a 6c 13 75 14 cf 44 cf e2 91 f6 44 86 94 ff 1d e2 82 fb 95 cc 39 48 4f 9f 06 91 36 a9 67 01 b4 04 ... 1937 more bytes>,
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: null,
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: 443,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 41 71 bf 3e 63 00 af d5 98 7f a8 b9 34 2b f9 d6 61 fd c2 a6 5c b0 06 19 14 66 fb 66 db 35 ab a5 04 ... 1937 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/orders/undefined',
          search: '?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
          _defaultAgent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 41 71 bf 3e 63 00 af d5 98 7f a8 b9 34 2b f9 d6 61 fd c2 a6 5c b0 06 19 14 66 fb 66 db 35 ab a5 04 ... 1937 more bytes>
              },
              list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'api.mercadolibre.com',
          servername: 'api.mercadolibre.com',
          _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        },
        [Symbol(RequestTimeout)]: undefined
      },
      _consuming: false,
      _dumped: false,
      req: [Circular *2],
      responseUrl: 'https://api.mercadolibre.com/orders/undefined?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
      redirects: [],
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: {
        'content-type': 'text/html',
        'content-length': '242',
        connection: 'close',
        date: 'Sun, 12 Jun 2022 22:00:10 GMT',
        'x-content-type-options': 'nosniff',
        'x-request-id': 'c3b75908-4a36-49e9-a072-82134c39ddd0',
        'x-frame-options': 'DENY',
        'x-xss-protection': '1; mode=block',
        'access-control-allow-origin': '*',
        'access-control-allow-headers': 'Content-Type',
        'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
        'access-control-max-age': '86400',
        'x-cache': 'Error from cloudfront',
        via: '1.1 fccb6b9c4ebd61ac6c5fc94394de34f2.cloudfront.net (CloudFront)',
        'x-amz-cf-pop': 'EZE51-C1',
        'x-amz-cf-id': 'qG0Ub5_UWTFUojaB2ZEc2ZSuVz41qeQP5iEDuvxXROtl2KlEpKGhMQ=='
      },
      [Symbol(kHeadersCount)]: 32,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: false,
    host: 'api.mercadolibre.com',
    protocol: 'https:',
    _redirectable: Writable {
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      _events: [Object: null prototype] {
        response: [Function: handleResponse],
        error: [Function: handleRequestError],
        socket: [Function: handleRequestSocket]
      },
      _eventsCount: 3,
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: 10485760,
        protocol: 'https:',
        path: '/orders/undefined?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
        method: 'GET',
        headers: {
          Accept: 'application/json, text/plain, */*',
          'User-Agent': 'axios/0.27.2'
        },
        agent: undefined,
        agents: { http: undefined, https: undefined },
        auth: undefined,
        hostname: 'api.mercadolibre.com',
        port: null,
        nativeProtocols: <ref *4> {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [
                  <ref *1> TLSSocket {
                    _tlsOptions: {
                      allowHalfOpen: undefined,
                      pipe: false,
                      secureContext: SecureContext { context: SecureContext {} },
                      isServer: false,
                      requestCert: true,
                      rejectUnauthorized: true,
                      session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 7a 6c 13 75 14 cf 44 cf e2 91 f6 44 86 94 ff 1d e2 82 fb 95 cc 39 48 4f 9f 06 91 36 a9 67 01 b4 04 ... 1937 more bytes>,
                      ALPNProtocols: undefined,
                      requestOCSP: undefined,
                      enableTrace: undefined,
                      pskCallback: undefined,
                      highWaterMark: undefined,
                      onread: undefined,
                      signal: undefined
                    },
                    _secureEstablished: true,
                    _securePending: false,
                    _newSessionPending: false,
                    _controlReleased: true,
                    secureConnecting: false,
                    _SNICallback: null,
                    servername: 'api.mercadolibre.com',
                    alpnProtocol: false,
                    authorized: true,
                    authorizationError: null,
                    encrypted: true,
                    _events: [Object: null prototype] {
                      close: [
                        [Function: onSocketCloseDestroySSL],
                        [Function: bound onceWrapper] {
                          listener: [Function (anonymous)]
                        },
                        [Function: onClose],
                        [Function: socketCloseListener]
                      ],
                      end: [Function: onReadableStreamEnd],
                      newListener: [Function: keylogNewListener],
                      secure: [Function: onConnectSecure],
                      session: [Function (anonymous)],
                      free: [Function: onFree],
                      timeout: [Function: onTimeout],
                      agentRemove: [Function: onRemove],
                      error: [Function: socketErrorListener],
                      finish: [Function: bound onceWrapper] {
                        listener: [Function: destroy]
                      }
                    },
                    _eventsCount: 10,
                    connecting: false,
                    _hadError: false,
                    _parent: null,
                    _host: 'api.mercadolibre.com',
                    _readableState: ReadableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      buffer: BufferList { head: null, tail: null, length: 0 },
                      length: 0,
                      pipes: [],
                      flowing: true,
                      ended: false,
                      endEmitted: false,
                      reading: true,
                      constructed: true,
                      sync: false,
                      needReadable: true,
                      emittedReadable: false,
                      readableListening: false,
                      resumeScheduled: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      destroyed: false,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      defaultEncoding: 'utf8',
                      awaitDrainWriters: null,
                      multiAwaitDrain: false,
                      readingMore: false,
                      dataEmitted: true,
                      decoder: null,
                      encoding: null,
                      [Symbol(kPaused)]: false
                    },
                    _maxListeners: undefined,
                    _writableState: WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      finalCalled: true,
                      needDrain: false,
                      ending: true,
                      ended: true,
                      finished: false,
                      destroyed: false,
                      decodeStrings: false,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: false,
                      bufferProcessing: false,
                      onwrite: [Function: bound onwrite],
                      writecb: null,
                      writelen: 0,
                      afterWriteTickInfo: null,
                      buffered: [],
                      bufferedIndex: 0,
                      allBuffers: true,
                      allNoop: true,
                      pendingcb: 1,
                      constructed: true,
                      prefinished: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      [Symbol(kOnFinished)]: []
                    },
                    allowHalfOpen: false,
                    _sockname: null,
                    _pendingData: null,
                    _pendingEncoding: '',
                    server: undefined,
                    _server: null,
                    ssl: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _requestCert: true,
                    _rejectUnauthorized: true,
                    parser: null,
                    _httpMessage: [Circular *2],
                    [Symbol(res)]: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    [Symbol(verified)]: true,
                    [Symbol(pendingSession)]: null,
                    [Symbol(async_id_symbol)]: 476,
                    [Symbol(kHandle)]: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    [Symbol(lastWriteQueueSize)]: 0,
                    [Symbol(timeout)]: null,
                    [Symbol(kBuffer)]: null,
                    [Symbol(kBufferCb)]: null,
                    [Symbol(kBufferGen)]: null,
                    [Symbol(kCapture)]: false,
                    [Symbol(kSetNoDelay)]: false,
                    [Symbol(kSetKeepAlive)]: true,
                    [Symbol(kSetKeepAliveInitialDelay)]: 60,
                    [Symbol(kBytesRead)]: 0,
                    [Symbol(kBytesWritten)]: 0,
                    [Symbol(connect-options)]: {
                      rejectUnauthorized: true,
                      ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                      checkServerIdentity: [Function: checkServerIdentity],
                      minDHSize: 1024,
                      session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 7a 6c 13 75 14 cf 44 cf e2 91 f6 44 86 94 ff 1d e2 82 fb 95 cc 39 48 4f 9f 06 91 36 a9 67 01 b4 04 ... 1937 more bytes>,
                      maxRedirects: 21,
                      maxBodyLength: 10485760,
                      protocol: 'https:',
                      path: null,
                      method: 'GET',
                      headers: {
                        Accept: 'application/json, text/plain, */*',
                        'User-Agent': 'axios/0.27.2'
                      },
                      agent: undefined,
                      agents: { http: undefined, https: undefined },
                      auth: undefined,
                      hostname: 'api.mercadolibre.com',
                      port: 443,
                      nativeProtocols: [Circular *4],
                      pathname: '/orders/undefined',
                      search: '?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                      _defaultAgent: [Circular *3],
                      host: 'api.mercadolibre.com',
                      servername: 'api.mercadolibre.com',
                      _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
                      encoding: null,
                      singleUse: true
                    },
                    [Symbol(RequestTimeout)]: undefined
                  }
                ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 41 71 bf 3e 63 00 af d5 98 7f a8 b9 34 2b f9 d6 61 fd c2 a6 5c b0 06 19 14 66 fb 66 db 35 ab a5 04 ... 1937 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/orders/undefined',
        search: '?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378'
      },
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *2],
      _currentUrl: 'https://api.mercadolibre.com/orders/undefined?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
      [Symbol(kCapture)]: false
    },
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [ 'Accept', 'application/json, text/plain, */*' ],
      'user-agent': [ 'User-Agent', 'axios/0.27.2' ],
      host: [ 'Host', 'api.mercadolibre.com' ]
    }
  },
  response: {
    status: 400,
    statusText: 'Bad Request',
    headers: {
      'content-type': 'text/html',
      'content-length': '242',
      connection: 'close',
      date: 'Sun, 12 Jun 2022 22:00:10 GMT',
      'x-content-type-options': 'nosniff',
      'x-request-id': 'c3b75908-4a36-49e9-a072-82134c39ddd0',
      'x-frame-options': 'DENY',
      'x-xss-protection': '1; mode=block',
      'access-control-allow-origin': '*',
      'access-control-allow-headers': 'Content-Type',
      'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
      'access-control-max-age': '86400',
      'x-cache': 'Error from cloudfront',
      via: '1.1 fccb6b9c4ebd61ac6c5fc94394de34f2.cloudfront.net (CloudFront)',
      'x-amz-cf-pop': 'EZE51-C1',
      'x-amz-cf-id': 'qG0Ub5_UWTFUojaB2ZEc2ZSuVz41qeQP5iEDuvxXROtl2KlEpKGhMQ=='
    },
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [Function: httpAdapter],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        }
      },
      validateStatus: [Function: validateStatus],
      headers: {
        Accept: 'application/json, text/plain, */*',
        'User-Agent': 'axios/0.27.2'
      },
      method: 'get',
      url: 'https://api.mercadolibre.com/orders/undefined?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
      data: undefined
    },
    request: <ref *2> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        prefinish: [Function: requestOnPrefinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 7a 6c 13 75 14 cf 44 cf e2 91 f6 44 86 94 ff 1d e2 82 fb 95 cc 39 48 4f 9f 06 91 36 a9 67 01 b4 04 ... 1937 more bytes>,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadolibre.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadolibre.com',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 476,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 7a 6c 13 75 14 cf 44 cf e2 91 f6 44 86 94 ff 1d e2 82 fb 95 cc 39 48 4f 9f 06 91 36 a9 67 01 b4 04 ... 1937 more bytes>,
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: null,
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: 443,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 41 71 bf 3e 63 00 af d5 98 7f a8 b9 34 2b f9 d6 61 fd c2 a6 5c b0 06 19 14 66 fb 66 db 35 ab a5 04 ... 1937 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/orders/undefined',
          search: '?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
          _defaultAgent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 41 71 bf 3e 63 00 af d5 98 7f a8 b9 34 2b f9 d6 61 fd c2 a6 5c b0 06 19 14 66 fb 66 db 35 ab a5 04 ... 1937 more bytes>
              },
              list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'api.mercadolibre.com',
          servername: 'api.mercadolibre.com',
          _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        },
        [Symbol(RequestTimeout)]: undefined
      },
      _header: 'GET /orders/undefined?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378 HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'User-Agent: axios/0.27.2\r\n' +
        'Host: api.mercadolibre.com\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: <ref *3> Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype] { path: null },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'api.mercadolibre.com:443:::::::::::::::::::::': [
            <ref *1> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: true,
                session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 7a 6c 13 75 14 cf 44 cf e2 91 f6 44 86 94 ff 1d e2 82 fb 95 cc 39 48 4f 9f 06 91 36 a9 67 01 b4 04 ... 1937 more bytes>,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'api.mercadolibre.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 10,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'api.mercadolibre.com',
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: false,
                errored: null,
                closed: false,
                closeEmitted: false,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: true,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 1,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular *2],
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 476,
              [Symbol(kHandle)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(connect-options)]: {
                rejectUnauthorized: true,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 7a 6c 13 75 14 cf 44 cf e2 91 f6 44 86 94 ff 1d e2 82 fb 95 cc 39 48 4f 9f 06 91 36 a9 67 01 b4 04 ... 1937 more bytes>,
                maxRedirects: 21,
                maxBodyLength: 10485760,
                protocol: 'https:',
                path: null,
                method: 'GET',
                headers: {
                  Accept: 'application/json, text/plain, */*',
                  'User-Agent': 'axios/0.27.2'
                },
                agent: undefined,
                agents: { http: undefined, https: undefined },
                auth: undefined,
                hostname: 'api.mercadolibre.com',
                port: 443,
                nativeProtocols: <ref *4> {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: [Circular *3],
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/orders/undefined',
                search: '?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                _defaultAgent: [Circular *3],
                host: 'api.mercadolibre.com',
                servername: 'api.mercadolibre.com',
                _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
                encoding: null,
                singleUse: true
              },
              [Symbol(RequestTimeout)]: undefined
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        maxCachedSessions: 100,
        _sessionCache: {
          map: {
            'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 41 71 bf 3e 63 00 af d5 98 7f a8 b9 34 2b f9 d6 61 fd c2 a6 5c b0 06 19 14 66 fb 66 db 35 ab a5 04 ... 1937 more bytes>
          },
          list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
        },
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      path: '/orders/undefined?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          constructed: true,
          sync: true,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          destroyed: true,
          errored: null,
          closed: true,
          closeEmitted: true,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: true,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          data: [Function: handleStreamData],
          aborted: [Function: handlerStreamAborted],
          error: [Function: handleStreamError]
        },
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 7a 6c 13 75 14 cf 44 cf e2 91 f6 44 86 94 ff 1d e2 82 fb 95 cc 39 48 4f 9f 06 91 36 a9 67 01 b4 04 ... 1937 more bytes>,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'api.mercadolibre.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'api.mercadolibre.com',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 476,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 7a 6c 13 75 14 cf 44 cf e2 91 f6 44 86 94 ff 1d e2 82 fb 95 cc 39 48 4f 9f 06 91 36 a9 67 01 b4 04 ... 1937 more bytes>,
            maxRedirects: 21,
            maxBodyLength: 10485760,
            protocol: 'https:',
            path: null,
            method: 'GET',
            headers: {
              Accept: 'application/json, text/plain, */*',
              'User-Agent': 'axios/0.27.2'
            },
            agent: undefined,
            agents: { http: undefined, https: undefined },
            auth: undefined,
            hostname: 'api.mercadolibre.com',
            port: 443,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] { path: null },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 41 71 bf 3e 63 00 af d5 98 7f a8 b9 34 2b f9 d6 61 fd c2 a6 5c b0 06 19 14 66 fb 66 db 35 ab a5 04 ... 1937 more bytes>
                    },
                    list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/orders/undefined',
            search: '?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 41 71 bf 3e 63 00 af d5 98 7f a8 b9 34 2b f9 d6 61 fd c2 a6 5c b0 06 19 14 66 fb 66 db 35 ab a5 04 ... 1937 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'api.mercadolibre.com',
            servername: 'api.mercadolibre.com',
            _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          },
          [Symbol(RequestTimeout)]: undefined
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
          'Content-Type',
          'text/html',
          'Content-Length',
          '242',
          'Connection',
          'close',
          'Date',
          'Sun, 12 Jun 2022 22:00:10 GMT',
          'X-Content-Type-Options',
          'nosniff',
          'X-Request-Id',
          'c3b75908-4a36-49e9-a072-82134c39ddd0',
          'X-Frame-Options',
          'DENY',
          'X-XSS-Protection',
          '1; mode=block',
          'Access-Control-Allow-Origin',
          '*',
          'Access-Control-Allow-Headers',
          'Content-Type',
          'Access-Control-Allow-Methods',
          'PUT, GET, POST, DELETE, OPTIONS',
          'Access-Control-Max-Age',
          '86400',
          'X-Cache',
          'Error from cloudfront',
          'Via',
          '1.1 fccb6b9c4ebd61ac6c5fc94394de34f2.cloudfront.net (CloudFront)',
          'X-Amz-Cf-Pop',
          'EZE51-C1',
          'X-Amz-Cf-Id',
          'qG0Ub5_UWTFUojaB2ZEc2ZSuVz41qeQP5iEDuvxXROtl2KlEpKGhMQ=='
        ],
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 400,
        statusMessage: 'Bad Request',
        client: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 7a 6c 13 75 14 cf 44 cf e2 91 f6 44 86 94 ff 1d e2 82 fb 95 cc 39 48 4f 9f 06 91 36 a9 67 01 b4 04 ... 1937 more bytes>,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'api.mercadolibre.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'api.mercadolibre.com',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 476,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 7a 6c 13 75 14 cf 44 cf e2 91 f6 44 86 94 ff 1d e2 82 fb 95 cc 39 48 4f 9f 06 91 36 a9 67 01 b4 04 ... 1937 more bytes>,
            maxRedirects: 21,
            maxBodyLength: 10485760,
            protocol: 'https:',
            path: null,
            method: 'GET',
            headers: {
              Accept: 'application/json, text/plain, */*',
              'User-Agent': 'axios/0.27.2'
            },
            agent: undefined,
            agents: { http: undefined, https: undefined },
            auth: undefined,
            hostname: 'api.mercadolibre.com',
            port: 443,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] { path: null },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 41 71 bf 3e 63 00 af d5 98 7f a8 b9 34 2b f9 d6 61 fd c2 a6 5c b0 06 19 14 66 fb 66 db 35 ab a5 04 ... 1937 more bytes>
                    },
                    list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/orders/undefined',
            search: '?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 41 71 bf 3e 63 00 af d5 98 7f a8 b9 34 2b f9 d6 61 fd c2 a6 5c b0 06 19 14 66 fb 66 db 35 ab a5 04 ... 1937 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'api.mercadolibre.com',
            servername: 'api.mercadolibre.com',
            _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          },
          [Symbol(RequestTimeout)]: undefined
        },
        _consuming: false,
        _dumped: false,
        req: [Circular *2],
        responseUrl: 'https://api.mercadolibre.com/orders/undefined?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
        redirects: [],
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
          'content-type': 'text/html',
          'content-length': '242',
          connection: 'close',
          date: 'Sun, 12 Jun 2022 22:00:10 GMT',
          'x-content-type-options': 'nosniff',
          'x-request-id': 'c3b75908-4a36-49e9-a072-82134c39ddd0',
          'x-frame-options': 'DENY',
          'x-xss-protection': '1; mode=block',
          'access-control-allow-origin': '*',
          'access-control-allow-headers': 'Content-Type',
          'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
          'access-control-max-age': '86400',
          'x-cache': 'Error from cloudfront',
          via: '1.1 fccb6b9c4ebd61ac6c5fc94394de34f2.cloudfront.net (CloudFront)',
          'x-amz-cf-pop': 'EZE51-C1',
          'x-amz-cf-id': 'qG0Ub5_UWTFUojaB2ZEc2ZSuVz41qeQP5iEDuvxXROtl2KlEpKGhMQ=='
        },
        [Symbol(kHeadersCount)]: 32,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'api.mercadolibre.com',
      protocol: 'https:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError],
          socket: [Function: handleRequestSocket]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: '/orders/undefined?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: null,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [
                    <ref *1> TLSSocket {
                      _tlsOptions: {
                        allowHalfOpen: undefined,
                        pipe: false,
                        secureContext: SecureContext { context: SecureContext {} },
                        isServer: false,
                        requestCert: true,
                        rejectUnauthorized: true,
                        session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 7a 6c 13 75 14 cf 44 cf e2 91 f6 44 86 94 ff 1d e2 82 fb 95 cc 39 48 4f 9f 06 91 36 a9 67 01 b4 04 ... 1937 more bytes>,
                        ALPNProtocols: undefined,
                        requestOCSP: undefined,
                        enableTrace: undefined,
                        pskCallback: undefined,
                        highWaterMark: undefined,
                        onread: undefined,
                        signal: undefined
                      },
                      _secureEstablished: true,
                      _securePending: false,
                      _newSessionPending: false,
                      _controlReleased: true,
                      secureConnecting: false,
                      _SNICallback: null,
                      servername: 'api.mercadolibre.com',
                      alpnProtocol: false,
                      authorized: true,
                      authorizationError: null,
                      encrypted: true,
                      _events: [Object: null prototype] {
                        close: [
                          [Function: onSocketCloseDestroySSL],
                          [Function: bound onceWrapper] {
                            listener: [Function (anonymous)]
                          },
                          [Function: onClose],
                          [Function: socketCloseListener]
                        ],
                        end: [Function: onReadableStreamEnd],
                        newListener: [Function: keylogNewListener],
                        secure: [Function: onConnectSecure],
                        session: [Function (anonymous)],
                        free: [Function: onFree],
                        timeout: [Function: onTimeout],
                        agentRemove: [Function: onRemove],
                        error: [Function: socketErrorListener],
                        finish: [Function: bound onceWrapper] {
                          listener: [Function: destroy]
                        }
                      },
                      _eventsCount: 10,
                      connecting: false,
                      _hadError: false,
                      _parent: null,
                      _host: 'api.mercadolibre.com',
                      _readableState: ReadableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        buffer: BufferList { head: null, tail: null, length: 0 },
                        length: 0,
                        pipes: [],
                        flowing: true,
                        ended: false,
                        endEmitted: false,
                        reading: true,
                        constructed: true,
                        sync: false,
                        needReadable: true,
                        emittedReadable: false,
                        readableListening: false,
                        resumeScheduled: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        destroyed: false,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        defaultEncoding: 'utf8',
                        awaitDrainWriters: null,
                        multiAwaitDrain: false,
                        readingMore: false,
                        dataEmitted: true,
                        decoder: null,
                        encoding: null,
                        [Symbol(kPaused)]: false
                      },
                      _maxListeners: undefined,
                      _writableState: WritableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        finalCalled: true,
                        needDrain: false,
                        ending: true,
                        ended: true,
                        finished: false,
                        destroyed: false,
                        decodeStrings: false,
                        defaultEncoding: 'utf8',
                        length: 0,
                        writing: false,
                        corked: 0,
                        sync: false,
                        bufferProcessing: false,
                        onwrite: [Function: bound onwrite],
                        writecb: null,
                        writelen: 0,
                        afterWriteTickInfo: null,
                        buffered: [],
                        bufferedIndex: 0,
                        allBuffers: true,
                        allNoop: true,
                        pendingcb: 1,
                        constructed: true,
                        prefinished: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        [Symbol(kOnFinished)]: []
                      },
                      allowHalfOpen: false,
                      _sockname: null,
                      _pendingData: null,
                      _pendingEncoding: '',
                      server: undefined,
                      _server: null,
                      ssl: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _requestCert: true,
                      _rejectUnauthorized: true,
                      parser: null,
                      _httpMessage: [Circular *2],
                      [Symbol(res)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(verified)]: true,
                      [Symbol(pendingSession)]: null,
                      [Symbol(async_id_symbol)]: 476,
                      [Symbol(kHandle)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(lastWriteQueueSize)]: 0,
                      [Symbol(timeout)]: null,
                      [Symbol(kBuffer)]: null,
                      [Symbol(kBufferCb)]: null,
                      [Symbol(kBufferGen)]: null,
                      [Symbol(kCapture)]: false,
                      [Symbol(kSetNoDelay)]: false,
                      [Symbol(kSetKeepAlive)]: true,
                      [Symbol(kSetKeepAliveInitialDelay)]: 60,
                      [Symbol(kBytesRead)]: 0,
                      [Symbol(kBytesWritten)]: 0,
                      [Symbol(connect-options)]: {
                        rejectUnauthorized: true,
                        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                        checkServerIdentity: [Function: checkServerIdentity],
                        minDHSize: 1024,
                        session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 7a 6c 13 75 14 cf 44 cf e2 91 f6 44 86 94 ff 1d e2 82 fb 95 cc 39 48 4f 9f 06 91 36 a9 67 01 b4 04 ... 1937 more bytes>,
                        maxRedirects: 21,
                        maxBodyLength: 10485760,
                        protocol: 'https:',
                        path: null,
                        method: 'GET',
                        headers: {
                          Accept: 'application/json, text/plain, */*',
                          'User-Agent': 'axios/0.27.2'
                        },
                        agent: undefined,
                        agents: { http: undefined, https: undefined },
                        auth: undefined,
                        hostname: 'api.mercadolibre.com',
                        port: 443,
                        nativeProtocols: [Circular *4],
                        pathname: '/orders/undefined',
                        search: '?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                        _defaultAgent: [Circular *3],
                        host: 'api.mercadolibre.com',
                        servername: 'api.mercadolibre.com',
                        _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
                        encoding: null,
                        singleUse: true
                      },
                      [Symbol(RequestTimeout)]: undefined
                    }
                  ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 41 71 bf 3e 63 00 af d5 98 7f a8 b9 34 2b f9 d6 61 fd c2 a6 5c b0 06 19 14 66 fb 66 db 35 ab a5 04 ... 1937 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/orders/undefined',
          search: '?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 0,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *2],
        _currentUrl: 'https://api.mercadolibre.com/orders/undefined?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'user-agent': [ 'User-Agent', 'axios/0.27.2' ],
        host: [ 'Host', 'api.mercadolibre.com' ]
      }
    },
    data: '<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">\r\n' +
      '<html>\r\n' +
      '<head><title>400 Bad Request</title></head>\r\n' +
      '<body bgcolor="white">\r\n' +
      '<h1>400 Bad Request</h1>\r\n' +
      '<p>Your browser sent a request that this server could not understand.</body>\r\n' +
      '</html>\r\n'
  },
  level: 'error',
  timestamp: '2022-06-12T22:00:10.435Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:00:25.884Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:00:41.598Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:01:27.405Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:03:01.669Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:03:03.901Z'
}
{
  message: 'Request failed with status code 400',
  name: 'AxiosError',
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [Function: httpAdapter],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] {
        LINE_BREAK: '\r\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      }
    },
    validateStatus: [Function: validateStatus],
    headers: {
      Accept: 'application/json, text/plain, */*',
      'User-Agent': 'axios/0.27.2'
    },
    method: 'get',
    url: 'https://api.mercadolibre.com/orders/undefined?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
    data: undefined
  },
  request: <ref *2> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      prefinish: [Function: requestOnPrefinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: false,
    socket: <ref *1> TLSSocket {
      _tlsOptions: {
        allowHalfOpen: undefined,
        pipe: false,
        secureContext: SecureContext { context: SecureContext {} },
        isServer: false,
        requestCert: true,
        rejectUnauthorized: true,
        session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 4e d5 af d2 04 74 b1 83 ca 91 e0 e2 8a fb 52 7b 3f ba f4 73 9e 2f 0d ac 24 40 b9 3f f2 cc 79 a6 04 ... 1937 more bytes>,
        ALPNProtocols: undefined,
        requestOCSP: undefined,
        enableTrace: undefined,
        pskCallback: undefined,
        highWaterMark: undefined,
        onread: undefined,
        signal: undefined
      },
      _secureEstablished: true,
      _securePending: false,
      _newSessionPending: false,
      _controlReleased: true,
      secureConnecting: false,
      _SNICallback: null,
      servername: 'api.mercadolibre.com',
      alpnProtocol: false,
      authorized: true,
      authorizationError: null,
      encrypted: true,
      _events: [Object: null prototype] {
        close: [
          [Function: onSocketCloseDestroySSL],
          [Function: bound onceWrapper] {
            listener: [Function (anonymous)]
          },
          [Function: onClose],
          [Function: socketCloseListener]
        ],
        end: [Function: onReadableStreamEnd],
        newListener: [Function: keylogNewListener],
        secure: [Function: onConnectSecure],
        session: [Function (anonymous)],
        free: [Function: onFree],
        timeout: [Function: onTimeout],
        agentRemove: [Function: onRemove],
        error: [Function: socketErrorListener],
        finish: [Function: bound onceWrapper] { listener: [Function: destroy] }
      },
      _eventsCount: 10,
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'api.mercadolibre.com',
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        constructed: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: true,
        needDrain: false,
        ending: true,
        ended: true,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: undefined,
      _server: null,
      ssl: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      _requestCert: true,
      _rejectUnauthorized: true,
      parser: null,
      _httpMessage: [Circular *2],
      [Symbol(res)]: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(verified)]: true,
      [Symbol(pendingSession)]: null,
      [Symbol(async_id_symbol)]: 651,
      [Symbol(kHandle)]: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: false,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 60,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(connect-options)]: {
        rejectUnauthorized: true,
        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
        checkServerIdentity: [Function: checkServerIdentity],
        minDHSize: 1024,
        session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 4e d5 af d2 04 74 b1 83 ca 91 e0 e2 8a fb 52 7b 3f ba f4 73 9e 2f 0d ac 24 40 b9 3f f2 cc 79 a6 04 ... 1937 more bytes>,
        maxRedirects: 21,
        maxBodyLength: 10485760,
        protocol: 'https:',
        path: null,
        method: 'GET',
        headers: {
          Accept: 'application/json, text/plain, */*',
          'User-Agent': 'axios/0.27.2'
        },
        agent: undefined,
        agents: { http: undefined, https: undefined },
        auth: undefined,
        hostname: 'api.mercadolibre.com',
        port: 443,
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 ad 1c 20 5a 2b 6f e8 1e a5 29 e1 1d cf 47 f8 7f a3 81 45 96 00 ef 11 19 2e dd 2a c7 e2 d1 4d 07 04 ... 1936 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/orders/undefined',
        search: '?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
        _defaultAgent: Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] { path: null },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          maxCachedSessions: 100,
          _sessionCache: {
            map: {
              'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 ad 1c 20 5a 2b 6f e8 1e a5 29 e1 1d cf 47 f8 7f a3 81 45 96 00 ef 11 19 2e dd 2a c7 e2 d1 4d 07 04 ... 1936 more bytes>
            },
            list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
          },
          [Symbol(kCapture)]: false
        },
        host: 'api.mercadolibre.com',
        servername: 'api.mercadolibre.com',
        _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
        encoding: null,
        singleUse: true
      },
      [Symbol(RequestTimeout)]: undefined
    },
    _header: 'GET /orders/undefined?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378 HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'User-Agent: axios/0.27.2\r\n' +
      'Host: api.mercadolibre.com\r\n' +
      'Connection: close\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: <ref *3> Agent {
      _events: [Object: null prototype] {
        free: [Function (anonymous)],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] { path: null },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {
        'api.mercadolibre.com:443:::::::::::::::::::::': [
          <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 4e d5 af d2 04 74 b1 83 ca 91 e0 e2 8a fb 52 7b 3f ba f4 73 9e 2f 0d ac 24 40 b9 3f f2 cc 79 a6 04 ... 1937 more bytes>,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'api.mercadolibre.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 10,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'api.mercadolibre.com',
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *2],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 651,
            [Symbol(kHandle)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 4e d5 af d2 04 74 b1 83 ca 91 e0 e2 8a fb 52 7b 3f ba f4 73 9e 2f 0d ac 24 40 b9 3f f2 cc 79 a6 04 ... 1937 more bytes>,
              maxRedirects: 21,
              maxBodyLength: 10485760,
              protocol: 'https:',
              path: null,
              method: 'GET',
              headers: {
                Accept: 'application/json, text/plain, */*',
                'User-Agent': 'axios/0.27.2'
              },
              agent: undefined,
              agents: { http: undefined, https: undefined },
              auth: undefined,
              hostname: 'api.mercadolibre.com',
              port: 443,
              nativeProtocols: {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: [Circular *3],
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/orders/undefined',
              search: '?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
              _defaultAgent: [Circular *3],
              host: 'api.mercadolibre.com',
              servername: 'api.mercadolibre.com',
              _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            },
            [Symbol(RequestTimeout)]: undefined
          }
        ]
      },
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      maxCachedSessions: 100,
      _sessionCache: {
        map: {
          'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 ad 1c 20 5a 2b 6f e8 1e a5 29 e1 1d cf 47 f8 7f a3 81 45 96 00 ef 11 19 2e dd 2a c7 e2 d1 4d 07 04 ... 1936 more bytes>
        },
        list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
      },
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    path: '/orders/undefined?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
    _ended: true,
    res: IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        constructed: true,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        destroyed: true,
        errored: null,
        closed: true,
        closeEmitted: true,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: true,
        dataEmitted: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
        data: [Function: handleStreamData],
        aborted: [Function: handlerStreamAborted],
        error: [Function: handleStreamError]
      },
      _eventsCount: 4,
      _maxListeners: undefined,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 4e d5 af d2 04 74 b1 83 ca 91 e0 e2 8a fb 52 7b 3f ba f4 73 9e 2f 0d ac 24 40 b9 3f f2 cc 79 a6 04 ... 1937 more bytes>,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadolibre.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadolibre.com',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 651,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 4e d5 af d2 04 74 b1 83 ca 91 e0 e2 8a fb 52 7b 3f ba f4 73 9e 2f 0d ac 24 40 b9 3f f2 cc 79 a6 04 ... 1937 more bytes>,
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: null,
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: 443,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 ad 1c 20 5a 2b 6f e8 1e a5 29 e1 1d cf 47 f8 7f a3 81 45 96 00 ef 11 19 2e dd 2a c7 e2 d1 4d 07 04 ... 1936 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/orders/undefined',
          search: '?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
          _defaultAgent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 ad 1c 20 5a 2b 6f e8 1e a5 29 e1 1d cf 47 f8 7f a3 81 45 96 00 ef 11 19 2e dd 2a c7 e2 d1 4d 07 04 ... 1936 more bytes>
              },
              list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'api.mercadolibre.com',
          servername: 'api.mercadolibre.com',
          _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        },
        [Symbol(RequestTimeout)]: undefined
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [
        'Content-Type',
        'text/html',
        'Content-Length',
        '242',
        'Connection',
        'close',
        'Date',
        'Sun, 12 Jun 2022 22:03:13 GMT',
        'X-Content-Type-Options',
        'nosniff',
        'X-Request-Id',
        '5637f70c-02c6-4728-9c11-4c7d0f36dade',
        'X-Frame-Options',
        'DENY',
        'X-XSS-Protection',
        '1; mode=block',
        'Access-Control-Allow-Origin',
        '*',
        'Access-Control-Allow-Headers',
        'Content-Type',
        'Access-Control-Allow-Methods',
        'PUT, GET, POST, DELETE, OPTIONS',
        'Access-Control-Max-Age',
        '86400',
        'X-Cache',
        'Error from cloudfront',
        'Via',
        '1.1 66600f04ec79bc8e399b18af216d35b6.cloudfront.net (CloudFront)',
        'X-Amz-Cf-Pop',
        'EZE50-P1',
        'X-Amz-Cf-Id',
        'YbtOk26FfZuVaVymg6UrCHNQVb5b86VZVAXLsHU5X6Gsah72EzBwkw=='
      ],
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 400,
      statusMessage: 'Bad Request',
      client: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 4e d5 af d2 04 74 b1 83 ca 91 e0 e2 8a fb 52 7b 3f ba f4 73 9e 2f 0d ac 24 40 b9 3f f2 cc 79 a6 04 ... 1937 more bytes>,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadolibre.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadolibre.com',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 651,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 4e d5 af d2 04 74 b1 83 ca 91 e0 e2 8a fb 52 7b 3f ba f4 73 9e 2f 0d ac 24 40 b9 3f f2 cc 79 a6 04 ... 1937 more bytes>,
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: null,
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: 443,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 ad 1c 20 5a 2b 6f e8 1e a5 29 e1 1d cf 47 f8 7f a3 81 45 96 00 ef 11 19 2e dd 2a c7 e2 d1 4d 07 04 ... 1936 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/orders/undefined',
          search: '?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
          _defaultAgent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 ad 1c 20 5a 2b 6f e8 1e a5 29 e1 1d cf 47 f8 7f a3 81 45 96 00 ef 11 19 2e dd 2a c7 e2 d1 4d 07 04 ... 1936 more bytes>
              },
              list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'api.mercadolibre.com',
          servername: 'api.mercadolibre.com',
          _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        },
        [Symbol(RequestTimeout)]: undefined
      },
      _consuming: false,
      _dumped: false,
      req: [Circular *2],
      responseUrl: 'https://api.mercadolibre.com/orders/undefined?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
      redirects: [],
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: {
        'content-type': 'text/html',
        'content-length': '242',
        connection: 'close',
        date: 'Sun, 12 Jun 2022 22:03:13 GMT',
        'x-content-type-options': 'nosniff',
        'x-request-id': '5637f70c-02c6-4728-9c11-4c7d0f36dade',
        'x-frame-options': 'DENY',
        'x-xss-protection': '1; mode=block',
        'access-control-allow-origin': '*',
        'access-control-allow-headers': 'Content-Type',
        'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
        'access-control-max-age': '86400',
        'x-cache': 'Error from cloudfront',
        via: '1.1 66600f04ec79bc8e399b18af216d35b6.cloudfront.net (CloudFront)',
        'x-amz-cf-pop': 'EZE50-P1',
        'x-amz-cf-id': 'YbtOk26FfZuVaVymg6UrCHNQVb5b86VZVAXLsHU5X6Gsah72EzBwkw=='
      },
      [Symbol(kHeadersCount)]: 32,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: false,
    host: 'api.mercadolibre.com',
    protocol: 'https:',
    _redirectable: Writable {
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      _events: [Object: null prototype] {
        response: [Function: handleResponse],
        error: [Function: handleRequestError],
        socket: [Function: handleRequestSocket]
      },
      _eventsCount: 3,
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: 10485760,
        protocol: 'https:',
        path: '/orders/undefined?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
        method: 'GET',
        headers: {
          Accept: 'application/json, text/plain, */*',
          'User-Agent': 'axios/0.27.2'
        },
        agent: undefined,
        agents: { http: undefined, https: undefined },
        auth: undefined,
        hostname: 'api.mercadolibre.com',
        port: null,
        nativeProtocols: <ref *4> {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [
                  <ref *1> TLSSocket {
                    _tlsOptions: {
                      allowHalfOpen: undefined,
                      pipe: false,
                      secureContext: SecureContext { context: SecureContext {} },
                      isServer: false,
                      requestCert: true,
                      rejectUnauthorized: true,
                      session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 4e d5 af d2 04 74 b1 83 ca 91 e0 e2 8a fb 52 7b 3f ba f4 73 9e 2f 0d ac 24 40 b9 3f f2 cc 79 a6 04 ... 1937 more bytes>,
                      ALPNProtocols: undefined,
                      requestOCSP: undefined,
                      enableTrace: undefined,
                      pskCallback: undefined,
                      highWaterMark: undefined,
                      onread: undefined,
                      signal: undefined
                    },
                    _secureEstablished: true,
                    _securePending: false,
                    _newSessionPending: false,
                    _controlReleased: true,
                    secureConnecting: false,
                    _SNICallback: null,
                    servername: 'api.mercadolibre.com',
                    alpnProtocol: false,
                    authorized: true,
                    authorizationError: null,
                    encrypted: true,
                    _events: [Object: null prototype] {
                      close: [
                        [Function: onSocketCloseDestroySSL],
                        [Function: bound onceWrapper] {
                          listener: [Function (anonymous)]
                        },
                        [Function: onClose],
                        [Function: socketCloseListener]
                      ],
                      end: [Function: onReadableStreamEnd],
                      newListener: [Function: keylogNewListener],
                      secure: [Function: onConnectSecure],
                      session: [Function (anonymous)],
                      free: [Function: onFree],
                      timeout: [Function: onTimeout],
                      agentRemove: [Function: onRemove],
                      error: [Function: socketErrorListener],
                      finish: [Function: bound onceWrapper] {
                        listener: [Function: destroy]
                      }
                    },
                    _eventsCount: 10,
                    connecting: false,
                    _hadError: false,
                    _parent: null,
                    _host: 'api.mercadolibre.com',
                    _readableState: ReadableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      buffer: BufferList { head: null, tail: null, length: 0 },
                      length: 0,
                      pipes: [],
                      flowing: true,
                      ended: false,
                      endEmitted: false,
                      reading: true,
                      constructed: true,
                      sync: false,
                      needReadable: true,
                      emittedReadable: false,
                      readableListening: false,
                      resumeScheduled: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      destroyed: false,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      defaultEncoding: 'utf8',
                      awaitDrainWriters: null,
                      multiAwaitDrain: false,
                      readingMore: false,
                      dataEmitted: true,
                      decoder: null,
                      encoding: null,
                      [Symbol(kPaused)]: false
                    },
                    _maxListeners: undefined,
                    _writableState: WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      finalCalled: true,
                      needDrain: false,
                      ending: true,
                      ended: true,
                      finished: false,
                      destroyed: false,
                      decodeStrings: false,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: false,
                      bufferProcessing: false,
                      onwrite: [Function: bound onwrite],
                      writecb: null,
                      writelen: 0,
                      afterWriteTickInfo: null,
                      buffered: [],
                      bufferedIndex: 0,
                      allBuffers: true,
                      allNoop: true,
                      pendingcb: 1,
                      constructed: true,
                      prefinished: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      [Symbol(kOnFinished)]: []
                    },
                    allowHalfOpen: false,
                    _sockname: null,
                    _pendingData: null,
                    _pendingEncoding: '',
                    server: undefined,
                    _server: null,
                    ssl: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _requestCert: true,
                    _rejectUnauthorized: true,
                    parser: null,
                    _httpMessage: [Circular *2],
                    [Symbol(res)]: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    [Symbol(verified)]: true,
                    [Symbol(pendingSession)]: null,
                    [Symbol(async_id_symbol)]: 651,
                    [Symbol(kHandle)]: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    [Symbol(lastWriteQueueSize)]: 0,
                    [Symbol(timeout)]: null,
                    [Symbol(kBuffer)]: null,
                    [Symbol(kBufferCb)]: null,
                    [Symbol(kBufferGen)]: null,
                    [Symbol(kCapture)]: false,
                    [Symbol(kSetNoDelay)]: false,
                    [Symbol(kSetKeepAlive)]: true,
                    [Symbol(kSetKeepAliveInitialDelay)]: 60,
                    [Symbol(kBytesRead)]: 0,
                    [Symbol(kBytesWritten)]: 0,
                    [Symbol(connect-options)]: {
                      rejectUnauthorized: true,
                      ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                      checkServerIdentity: [Function: checkServerIdentity],
                      minDHSize: 1024,
                      session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 4e d5 af d2 04 74 b1 83 ca 91 e0 e2 8a fb 52 7b 3f ba f4 73 9e 2f 0d ac 24 40 b9 3f f2 cc 79 a6 04 ... 1937 more bytes>,
                      maxRedirects: 21,
                      maxBodyLength: 10485760,
                      protocol: 'https:',
                      path: null,
                      method: 'GET',
                      headers: {
                        Accept: 'application/json, text/plain, */*',
                        'User-Agent': 'axios/0.27.2'
                      },
                      agent: undefined,
                      agents: { http: undefined, https: undefined },
                      auth: undefined,
                      hostname: 'api.mercadolibre.com',
                      port: 443,
                      nativeProtocols: [Circular *4],
                      pathname: '/orders/undefined',
                      search: '?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                      _defaultAgent: [Circular *3],
                      host: 'api.mercadolibre.com',
                      servername: 'api.mercadolibre.com',
                      _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
                      encoding: null,
                      singleUse: true
                    },
                    [Symbol(RequestTimeout)]: undefined
                  }
                ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 ad 1c 20 5a 2b 6f e8 1e a5 29 e1 1d cf 47 f8 7f a3 81 45 96 00 ef 11 19 2e dd 2a c7 e2 d1 4d 07 04 ... 1936 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/orders/undefined',
        search: '?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378'
      },
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *2],
      _currentUrl: 'https://api.mercadolibre.com/orders/undefined?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
      [Symbol(kCapture)]: false
    },
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [ 'Accept', 'application/json, text/plain, */*' ],
      'user-agent': [ 'User-Agent', 'axios/0.27.2' ],
      host: [ 'Host', 'api.mercadolibre.com' ]
    }
  },
  response: {
    status: 400,
    statusText: 'Bad Request',
    headers: {
      'content-type': 'text/html',
      'content-length': '242',
      connection: 'close',
      date: 'Sun, 12 Jun 2022 22:03:13 GMT',
      'x-content-type-options': 'nosniff',
      'x-request-id': '5637f70c-02c6-4728-9c11-4c7d0f36dade',
      'x-frame-options': 'DENY',
      'x-xss-protection': '1; mode=block',
      'access-control-allow-origin': '*',
      'access-control-allow-headers': 'Content-Type',
      'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
      'access-control-max-age': '86400',
      'x-cache': 'Error from cloudfront',
      via: '1.1 66600f04ec79bc8e399b18af216d35b6.cloudfront.net (CloudFront)',
      'x-amz-cf-pop': 'EZE50-P1',
      'x-amz-cf-id': 'YbtOk26FfZuVaVymg6UrCHNQVb5b86VZVAXLsHU5X6Gsah72EzBwkw=='
    },
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [Function: httpAdapter],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        }
      },
      validateStatus: [Function: validateStatus],
      headers: {
        Accept: 'application/json, text/plain, */*',
        'User-Agent': 'axios/0.27.2'
      },
      method: 'get',
      url: 'https://api.mercadolibre.com/orders/undefined?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
      data: undefined
    },
    request: <ref *2> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        prefinish: [Function: requestOnPrefinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 4e d5 af d2 04 74 b1 83 ca 91 e0 e2 8a fb 52 7b 3f ba f4 73 9e 2f 0d ac 24 40 b9 3f f2 cc 79 a6 04 ... 1937 more bytes>,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadolibre.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadolibre.com',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 651,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 4e d5 af d2 04 74 b1 83 ca 91 e0 e2 8a fb 52 7b 3f ba f4 73 9e 2f 0d ac 24 40 b9 3f f2 cc 79 a6 04 ... 1937 more bytes>,
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: null,
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: 443,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 ad 1c 20 5a 2b 6f e8 1e a5 29 e1 1d cf 47 f8 7f a3 81 45 96 00 ef 11 19 2e dd 2a c7 e2 d1 4d 07 04 ... 1936 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/orders/undefined',
          search: '?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
          _defaultAgent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 ad 1c 20 5a 2b 6f e8 1e a5 29 e1 1d cf 47 f8 7f a3 81 45 96 00 ef 11 19 2e dd 2a c7 e2 d1 4d 07 04 ... 1936 more bytes>
              },
              list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'api.mercadolibre.com',
          servername: 'api.mercadolibre.com',
          _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        },
        [Symbol(RequestTimeout)]: undefined
      },
      _header: 'GET /orders/undefined?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378 HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'User-Agent: axios/0.27.2\r\n' +
        'Host: api.mercadolibre.com\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: <ref *3> Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype] { path: null },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'api.mercadolibre.com:443:::::::::::::::::::::': [
            <ref *1> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: true,
                session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 4e d5 af d2 04 74 b1 83 ca 91 e0 e2 8a fb 52 7b 3f ba f4 73 9e 2f 0d ac 24 40 b9 3f f2 cc 79 a6 04 ... 1937 more bytes>,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'api.mercadolibre.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 10,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'api.mercadolibre.com',
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: false,
                errored: null,
                closed: false,
                closeEmitted: false,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: true,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 1,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular *2],
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 651,
              [Symbol(kHandle)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(connect-options)]: {
                rejectUnauthorized: true,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 4e d5 af d2 04 74 b1 83 ca 91 e0 e2 8a fb 52 7b 3f ba f4 73 9e 2f 0d ac 24 40 b9 3f f2 cc 79 a6 04 ... 1937 more bytes>,
                maxRedirects: 21,
                maxBodyLength: 10485760,
                protocol: 'https:',
                path: null,
                method: 'GET',
                headers: {
                  Accept: 'application/json, text/plain, */*',
                  'User-Agent': 'axios/0.27.2'
                },
                agent: undefined,
                agents: { http: undefined, https: undefined },
                auth: undefined,
                hostname: 'api.mercadolibre.com',
                port: 443,
                nativeProtocols: <ref *4> {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: [Circular *3],
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/orders/undefined',
                search: '?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                _defaultAgent: [Circular *3],
                host: 'api.mercadolibre.com',
                servername: 'api.mercadolibre.com',
                _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
                encoding: null,
                singleUse: true
              },
              [Symbol(RequestTimeout)]: undefined
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        maxCachedSessions: 100,
        _sessionCache: {
          map: {
            'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 ad 1c 20 5a 2b 6f e8 1e a5 29 e1 1d cf 47 f8 7f a3 81 45 96 00 ef 11 19 2e dd 2a c7 e2 d1 4d 07 04 ... 1936 more bytes>
          },
          list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
        },
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      path: '/orders/undefined?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          constructed: true,
          sync: true,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          destroyed: true,
          errored: null,
          closed: true,
          closeEmitted: true,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: true,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          data: [Function: handleStreamData],
          aborted: [Function: handlerStreamAborted],
          error: [Function: handleStreamError]
        },
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 4e d5 af d2 04 74 b1 83 ca 91 e0 e2 8a fb 52 7b 3f ba f4 73 9e 2f 0d ac 24 40 b9 3f f2 cc 79 a6 04 ... 1937 more bytes>,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'api.mercadolibre.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'api.mercadolibre.com',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 651,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 4e d5 af d2 04 74 b1 83 ca 91 e0 e2 8a fb 52 7b 3f ba f4 73 9e 2f 0d ac 24 40 b9 3f f2 cc 79 a6 04 ... 1937 more bytes>,
            maxRedirects: 21,
            maxBodyLength: 10485760,
            protocol: 'https:',
            path: null,
            method: 'GET',
            headers: {
              Accept: 'application/json, text/plain, */*',
              'User-Agent': 'axios/0.27.2'
            },
            agent: undefined,
            agents: { http: undefined, https: undefined },
            auth: undefined,
            hostname: 'api.mercadolibre.com',
            port: 443,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] { path: null },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 ad 1c 20 5a 2b 6f e8 1e a5 29 e1 1d cf 47 f8 7f a3 81 45 96 00 ef 11 19 2e dd 2a c7 e2 d1 4d 07 04 ... 1936 more bytes>
                    },
                    list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/orders/undefined',
            search: '?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 ad 1c 20 5a 2b 6f e8 1e a5 29 e1 1d cf 47 f8 7f a3 81 45 96 00 ef 11 19 2e dd 2a c7 e2 d1 4d 07 04 ... 1936 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'api.mercadolibre.com',
            servername: 'api.mercadolibre.com',
            _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          },
          [Symbol(RequestTimeout)]: undefined
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
          'Content-Type',
          'text/html',
          'Content-Length',
          '242',
          'Connection',
          'close',
          'Date',
          'Sun, 12 Jun 2022 22:03:13 GMT',
          'X-Content-Type-Options',
          'nosniff',
          'X-Request-Id',
          '5637f70c-02c6-4728-9c11-4c7d0f36dade',
          'X-Frame-Options',
          'DENY',
          'X-XSS-Protection',
          '1; mode=block',
          'Access-Control-Allow-Origin',
          '*',
          'Access-Control-Allow-Headers',
          'Content-Type',
          'Access-Control-Allow-Methods',
          'PUT, GET, POST, DELETE, OPTIONS',
          'Access-Control-Max-Age',
          '86400',
          'X-Cache',
          'Error from cloudfront',
          'Via',
          '1.1 66600f04ec79bc8e399b18af216d35b6.cloudfront.net (CloudFront)',
          'X-Amz-Cf-Pop',
          'EZE50-P1',
          'X-Amz-Cf-Id',
          'YbtOk26FfZuVaVymg6UrCHNQVb5b86VZVAXLsHU5X6Gsah72EzBwkw=='
        ],
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 400,
        statusMessage: 'Bad Request',
        client: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 4e d5 af d2 04 74 b1 83 ca 91 e0 e2 8a fb 52 7b 3f ba f4 73 9e 2f 0d ac 24 40 b9 3f f2 cc 79 a6 04 ... 1937 more bytes>,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'api.mercadolibre.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'api.mercadolibre.com',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 651,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 4e d5 af d2 04 74 b1 83 ca 91 e0 e2 8a fb 52 7b 3f ba f4 73 9e 2f 0d ac 24 40 b9 3f f2 cc 79 a6 04 ... 1937 more bytes>,
            maxRedirects: 21,
            maxBodyLength: 10485760,
            protocol: 'https:',
            path: null,
            method: 'GET',
            headers: {
              Accept: 'application/json, text/plain, */*',
              'User-Agent': 'axios/0.27.2'
            },
            agent: undefined,
            agents: { http: undefined, https: undefined },
            auth: undefined,
            hostname: 'api.mercadolibre.com',
            port: 443,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] { path: null },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 ad 1c 20 5a 2b 6f e8 1e a5 29 e1 1d cf 47 f8 7f a3 81 45 96 00 ef 11 19 2e dd 2a c7 e2 d1 4d 07 04 ... 1936 more bytes>
                    },
                    list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/orders/undefined',
            search: '?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 ad 1c 20 5a 2b 6f e8 1e a5 29 e1 1d cf 47 f8 7f a3 81 45 96 00 ef 11 19 2e dd 2a c7 e2 d1 4d 07 04 ... 1936 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'api.mercadolibre.com',
            servername: 'api.mercadolibre.com',
            _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          },
          [Symbol(RequestTimeout)]: undefined
        },
        _consuming: false,
        _dumped: false,
        req: [Circular *2],
        responseUrl: 'https://api.mercadolibre.com/orders/undefined?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
        redirects: [],
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
          'content-type': 'text/html',
          'content-length': '242',
          connection: 'close',
          date: 'Sun, 12 Jun 2022 22:03:13 GMT',
          'x-content-type-options': 'nosniff',
          'x-request-id': '5637f70c-02c6-4728-9c11-4c7d0f36dade',
          'x-frame-options': 'DENY',
          'x-xss-protection': '1; mode=block',
          'access-control-allow-origin': '*',
          'access-control-allow-headers': 'Content-Type',
          'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
          'access-control-max-age': '86400',
          'x-cache': 'Error from cloudfront',
          via: '1.1 66600f04ec79bc8e399b18af216d35b6.cloudfront.net (CloudFront)',
          'x-amz-cf-pop': 'EZE50-P1',
          'x-amz-cf-id': 'YbtOk26FfZuVaVymg6UrCHNQVb5b86VZVAXLsHU5X6Gsah72EzBwkw=='
        },
        [Symbol(kHeadersCount)]: 32,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'api.mercadolibre.com',
      protocol: 'https:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError],
          socket: [Function: handleRequestSocket]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: '/orders/undefined?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: null,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [
                    <ref *1> TLSSocket {
                      _tlsOptions: {
                        allowHalfOpen: undefined,
                        pipe: false,
                        secureContext: SecureContext { context: SecureContext {} },
                        isServer: false,
                        requestCert: true,
                        rejectUnauthorized: true,
                        session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 4e d5 af d2 04 74 b1 83 ca 91 e0 e2 8a fb 52 7b 3f ba f4 73 9e 2f 0d ac 24 40 b9 3f f2 cc 79 a6 04 ... 1937 more bytes>,
                        ALPNProtocols: undefined,
                        requestOCSP: undefined,
                        enableTrace: undefined,
                        pskCallback: undefined,
                        highWaterMark: undefined,
                        onread: undefined,
                        signal: undefined
                      },
                      _secureEstablished: true,
                      _securePending: false,
                      _newSessionPending: false,
                      _controlReleased: true,
                      secureConnecting: false,
                      _SNICallback: null,
                      servername: 'api.mercadolibre.com',
                      alpnProtocol: false,
                      authorized: true,
                      authorizationError: null,
                      encrypted: true,
                      _events: [Object: null prototype] {
                        close: [
                          [Function: onSocketCloseDestroySSL],
                          [Function: bound onceWrapper] {
                            listener: [Function (anonymous)]
                          },
                          [Function: onClose],
                          [Function: socketCloseListener]
                        ],
                        end: [Function: onReadableStreamEnd],
                        newListener: [Function: keylogNewListener],
                        secure: [Function: onConnectSecure],
                        session: [Function (anonymous)],
                        free: [Function: onFree],
                        timeout: [Function: onTimeout],
                        agentRemove: [Function: onRemove],
                        error: [Function: socketErrorListener],
                        finish: [Function: bound onceWrapper] {
                          listener: [Function: destroy]
                        }
                      },
                      _eventsCount: 10,
                      connecting: false,
                      _hadError: false,
                      _parent: null,
                      _host: 'api.mercadolibre.com',
                      _readableState: ReadableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        buffer: BufferList { head: null, tail: null, length: 0 },
                        length: 0,
                        pipes: [],
                        flowing: true,
                        ended: false,
                        endEmitted: false,
                        reading: true,
                        constructed: true,
                        sync: false,
                        needReadable: true,
                        emittedReadable: false,
                        readableListening: false,
                        resumeScheduled: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        destroyed: false,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        defaultEncoding: 'utf8',
                        awaitDrainWriters: null,
                        multiAwaitDrain: false,
                        readingMore: false,
                        dataEmitted: true,
                        decoder: null,
                        encoding: null,
                        [Symbol(kPaused)]: false
                      },
                      _maxListeners: undefined,
                      _writableState: WritableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        finalCalled: true,
                        needDrain: false,
                        ending: true,
                        ended: true,
                        finished: false,
                        destroyed: false,
                        decodeStrings: false,
                        defaultEncoding: 'utf8',
                        length: 0,
                        writing: false,
                        corked: 0,
                        sync: false,
                        bufferProcessing: false,
                        onwrite: [Function: bound onwrite],
                        writecb: null,
                        writelen: 0,
                        afterWriteTickInfo: null,
                        buffered: [],
                        bufferedIndex: 0,
                        allBuffers: true,
                        allNoop: true,
                        pendingcb: 1,
                        constructed: true,
                        prefinished: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        [Symbol(kOnFinished)]: []
                      },
                      allowHalfOpen: false,
                      _sockname: null,
                      _pendingData: null,
                      _pendingEncoding: '',
                      server: undefined,
                      _server: null,
                      ssl: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _requestCert: true,
                      _rejectUnauthorized: true,
                      parser: null,
                      _httpMessage: [Circular *2],
                      [Symbol(res)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(verified)]: true,
                      [Symbol(pendingSession)]: null,
                      [Symbol(async_id_symbol)]: 651,
                      [Symbol(kHandle)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(lastWriteQueueSize)]: 0,
                      [Symbol(timeout)]: null,
                      [Symbol(kBuffer)]: null,
                      [Symbol(kBufferCb)]: null,
                      [Symbol(kBufferGen)]: null,
                      [Symbol(kCapture)]: false,
                      [Symbol(kSetNoDelay)]: false,
                      [Symbol(kSetKeepAlive)]: true,
                      [Symbol(kSetKeepAliveInitialDelay)]: 60,
                      [Symbol(kBytesRead)]: 0,
                      [Symbol(kBytesWritten)]: 0,
                      [Symbol(connect-options)]: {
                        rejectUnauthorized: true,
                        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                        checkServerIdentity: [Function: checkServerIdentity],
                        minDHSize: 1024,
                        session: <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 4e d5 af d2 04 74 b1 83 ca 91 e0 e2 8a fb 52 7b 3f ba f4 73 9e 2f 0d ac 24 40 b9 3f f2 cc 79 a6 04 ... 1937 more bytes>,
                        maxRedirects: 21,
                        maxBodyLength: 10485760,
                        protocol: 'https:',
                        path: null,
                        method: 'GET',
                        headers: {
                          Accept: 'application/json, text/plain, */*',
                          'User-Agent': 'axios/0.27.2'
                        },
                        agent: undefined,
                        agents: { http: undefined, https: undefined },
                        auth: undefined,
                        hostname: 'api.mercadolibre.com',
                        port: 443,
                        nativeProtocols: [Circular *4],
                        pathname: '/orders/undefined',
                        search: '?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                        _defaultAgent: [Circular *3],
                        host: 'api.mercadolibre.com',
                        servername: 'api.mercadolibre.com',
                        _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
                        encoding: null,
                        singleUse: true
                      },
                      [Symbol(RequestTimeout)]: undefined
                    }
                  ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 ad 1c 20 5a 2b 6f e8 1e a5 29 e1 1d cf 47 f8 7f a3 81 45 96 00 ef 11 19 2e dd 2a c7 e2 d1 4d 07 04 ... 1936 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/orders/undefined',
          search: '?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 0,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *2],
        _currentUrl: 'https://api.mercadolibre.com/orders/undefined?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'user-agent': [ 'User-Agent', 'axios/0.27.2' ],
        host: [ 'Host', 'api.mercadolibre.com' ]
      }
    },
    data: '<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">\r\n' +
      '<html>\r\n' +
      '<head><title>400 Bad Request</title></head>\r\n' +
      '<body bgcolor="white">\r\n' +
      '<h1>400 Bad Request</h1>\r\n' +
      '<p>Your browser sent a request that this server could not understand.</body>\r\n' +
      '</html>\r\n'
  },
  level: 'error',
  timestamp: '2022-06-12T22:03:14.012Z'
}
{
  code: 'EREQUEST',
  originalError: Error: Invalid column name 'undefined'.
      at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:382:19)
      at Connection.emit (node:events:527:28)
      at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
      at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
      at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
      at Readable.emit (node:events:527:28)
      at addChunk (node:internal/streams/readable:315:12)
      at readableAddChunk (node:internal/streams/readable:289:9)
      at Readable.push (node:internal/streams/readable:228:10)
      at next (node:internal/streams/from:98:31) {
    info: ErrorMessageToken {
      name: 'ERROR',
      handlerName: 'onErrorMessage',
      number: 207,
      state: 1,
      class: 16,
      message: "Invalid column name 'undefined'.",
      serverName: 'NBJMAUAS\\NEWMANAG',
      procName: '',
      lineNumber: 1
    }
  },
  name: 'RequestError',
  number: 207,
  lineNumber: 1,
  state: 1,
  class: 16,
  serverName: 'NBJMAUAS\\NEWMANAG',
  procName: '',
  precedingErrors: [],
  level: 'error',
  timestamp: '2022-06-12T22:03:14.400Z'
}
{ level: 'error', timestamp: '2022-06-12T22:03:14.408Z' }
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:04:23.716Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:05:05.719Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:05:11.458Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:06:18.515Z'
}
{
  message: 'Request failed with status code 400',
  name: 'AxiosError',
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [Function: httpAdapter],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] {
        LINE_BREAK: '\r\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      }
    },
    validateStatus: [Function: validateStatus],
    headers: {
      Accept: 'application/json, text/plain, */*',
      'User-Agent': 'axios/0.27.2'
    },
    method: 'get',
    url: 'https://api.mercadolibre.com/orders/undefined?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
    data: undefined
  },
  request: <ref *2> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      prefinish: [Function: requestOnPrefinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: false,
    socket: <ref *1> TLSSocket {
      _tlsOptions: {
        allowHalfOpen: undefined,
        pipe: false,
        secureContext: SecureContext { context: SecureContext {} },
        isServer: false,
        requestCert: true,
        rejectUnauthorized: true,
        session: <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 e0 dc 45 64 51 e5 2f ec bb 88 40 7b ed ec 97 dc 66 bd 2c 75 22 f1 cb 6d 0e 75 e7 17 40 50 d4 eb 04 ... 1936 more bytes>,
        ALPNProtocols: undefined,
        requestOCSP: undefined,
        enableTrace: undefined,
        pskCallback: undefined,
        highWaterMark: undefined,
        onread: undefined,
        signal: undefined
      },
      _secureEstablished: true,
      _securePending: false,
      _newSessionPending: false,
      _controlReleased: true,
      secureConnecting: false,
      _SNICallback: null,
      servername: 'api.mercadolibre.com',
      alpnProtocol: false,
      authorized: true,
      authorizationError: null,
      encrypted: true,
      _events: [Object: null prototype] {
        close: [
          [Function: onSocketCloseDestroySSL],
          [Function: bound onceWrapper] {
            listener: [Function (anonymous)]
          },
          [Function: onClose],
          [Function: socketCloseListener]
        ],
        end: [Function: onReadableStreamEnd],
        newListener: [Function: keylogNewListener],
        secure: [Function: onConnectSecure],
        session: [Function (anonymous)],
        free: [Function: onFree],
        timeout: [Function: onTimeout],
        agentRemove: [Function: onRemove],
        error: [Function: socketErrorListener],
        finish: [Function: bound onceWrapper] { listener: [Function: destroy] }
      },
      _eventsCount: 10,
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'api.mercadolibre.com',
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        constructed: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: true,
        needDrain: false,
        ending: true,
        ended: true,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: undefined,
      _server: null,
      ssl: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      _requestCert: true,
      _rejectUnauthorized: true,
      parser: null,
      _httpMessage: [Circular *2],
      [Symbol(res)]: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(verified)]: true,
      [Symbol(pendingSession)]: null,
      [Symbol(async_id_symbol)]: 477,
      [Symbol(kHandle)]: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: false,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 60,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(connect-options)]: {
        rejectUnauthorized: true,
        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
        checkServerIdentity: [Function: checkServerIdentity],
        minDHSize: 1024,
        session: <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 e0 dc 45 64 51 e5 2f ec bb 88 40 7b ed ec 97 dc 66 bd 2c 75 22 f1 cb 6d 0e 75 e7 17 40 50 d4 eb 04 ... 1936 more bytes>,
        maxRedirects: 21,
        maxBodyLength: 10485760,
        protocol: 'https:',
        path: null,
        method: 'GET',
        headers: {
          Accept: 'application/json, text/plain, */*',
          'User-Agent': 'axios/0.27.2'
        },
        agent: undefined,
        agents: { http: undefined, https: undefined },
        auth: undefined,
        hostname: 'api.mercadolibre.com',
        port: 443,
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 40 b8 90 f7 c1 e9 d6 fa 96 d9 66 53 55 44 83 bb 2b e7 3d bf fb e6 f1 e0 e1 57 c3 f8 94 1d 05 24 04 ... 1936 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/orders/undefined',
        search: '?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
        _defaultAgent: Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] { path: null },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          maxCachedSessions: 100,
          _sessionCache: {
            map: {
              'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 40 b8 90 f7 c1 e9 d6 fa 96 d9 66 53 55 44 83 bb 2b e7 3d bf fb e6 f1 e0 e1 57 c3 f8 94 1d 05 24 04 ... 1936 more bytes>
            },
            list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
          },
          [Symbol(kCapture)]: false
        },
        host: 'api.mercadolibre.com',
        servername: 'api.mercadolibre.com',
        _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
        encoding: null,
        singleUse: true
      },
      [Symbol(RequestTimeout)]: undefined
    },
    _header: 'GET /orders/undefined?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378 HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'User-Agent: axios/0.27.2\r\n' +
      'Host: api.mercadolibre.com\r\n' +
      'Connection: close\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: <ref *3> Agent {
      _events: [Object: null prototype] {
        free: [Function (anonymous)],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] { path: null },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {
        'api.mercadolibre.com:443:::::::::::::::::::::': [
          <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 e0 dc 45 64 51 e5 2f ec bb 88 40 7b ed ec 97 dc 66 bd 2c 75 22 f1 cb 6d 0e 75 e7 17 40 50 d4 eb 04 ... 1936 more bytes>,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'api.mercadolibre.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 10,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'api.mercadolibre.com',
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *2],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 477,
            [Symbol(kHandle)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              session: <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 e0 dc 45 64 51 e5 2f ec bb 88 40 7b ed ec 97 dc 66 bd 2c 75 22 f1 cb 6d 0e 75 e7 17 40 50 d4 eb 04 ... 1936 more bytes>,
              maxRedirects: 21,
              maxBodyLength: 10485760,
              protocol: 'https:',
              path: null,
              method: 'GET',
              headers: {
                Accept: 'application/json, text/plain, */*',
                'User-Agent': 'axios/0.27.2'
              },
              agent: undefined,
              agents: { http: undefined, https: undefined },
              auth: undefined,
              hostname: 'api.mercadolibre.com',
              port: 443,
              nativeProtocols: {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: [Circular *3],
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/orders/undefined',
              search: '?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
              _defaultAgent: [Circular *3],
              host: 'api.mercadolibre.com',
              servername: 'api.mercadolibre.com',
              _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            },
            [Symbol(RequestTimeout)]: undefined
          }
        ]
      },
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      maxCachedSessions: 100,
      _sessionCache: {
        map: {
          'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 40 b8 90 f7 c1 e9 d6 fa 96 d9 66 53 55 44 83 bb 2b e7 3d bf fb e6 f1 e0 e1 57 c3 f8 94 1d 05 24 04 ... 1936 more bytes>
        },
        list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
      },
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    path: '/orders/undefined?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
    _ended: true,
    res: IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        constructed: true,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        destroyed: true,
        errored: null,
        closed: true,
        closeEmitted: true,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: true,
        dataEmitted: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
        data: [Function: handleStreamData],
        aborted: [Function: handlerStreamAborted],
        error: [Function: handleStreamError]
      },
      _eventsCount: 4,
      _maxListeners: undefined,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 e0 dc 45 64 51 e5 2f ec bb 88 40 7b ed ec 97 dc 66 bd 2c 75 22 f1 cb 6d 0e 75 e7 17 40 50 d4 eb 04 ... 1936 more bytes>,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadolibre.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadolibre.com',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 477,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          session: <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 e0 dc 45 64 51 e5 2f ec bb 88 40 7b ed ec 97 dc 66 bd 2c 75 22 f1 cb 6d 0e 75 e7 17 40 50 d4 eb 04 ... 1936 more bytes>,
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: null,
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: 443,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 40 b8 90 f7 c1 e9 d6 fa 96 d9 66 53 55 44 83 bb 2b e7 3d bf fb e6 f1 e0 e1 57 c3 f8 94 1d 05 24 04 ... 1936 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/orders/undefined',
          search: '?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
          _defaultAgent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 40 b8 90 f7 c1 e9 d6 fa 96 d9 66 53 55 44 83 bb 2b e7 3d bf fb e6 f1 e0 e1 57 c3 f8 94 1d 05 24 04 ... 1936 more bytes>
              },
              list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'api.mercadolibre.com',
          servername: 'api.mercadolibre.com',
          _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        },
        [Symbol(RequestTimeout)]: undefined
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [
        'Content-Type',
        'text/html',
        'Content-Length',
        '242',
        'Connection',
        'close',
        'Date',
        'Sun, 12 Jun 2022 22:06:25 GMT',
        'X-Content-Type-Options',
        'nosniff',
        'X-Request-Id',
        'dbbe09c2-8a6f-4f37-acbc-043208d4b4ef',
        'X-Frame-Options',
        'DENY',
        'X-XSS-Protection',
        '1; mode=block',
        'Access-Control-Allow-Origin',
        '*',
        'Access-Control-Allow-Headers',
        'Content-Type',
        'Access-Control-Allow-Methods',
        'PUT, GET, POST, DELETE, OPTIONS',
        'Access-Control-Max-Age',
        '86400',
        'X-Cache',
        'Error from cloudfront',
        'Via',
        '1.1 072d2ddb3aa179b13d18dc25fc654f92.cloudfront.net (CloudFront)',
        'X-Amz-Cf-Pop',
        'EZE50-P1',
        'X-Amz-Cf-Id',
        'vbT9D6FPtE4S9VL0bnmMI7SThnjY7HUcpc-yrqB5hyVDRHE8S-GAQg=='
      ],
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 400,
      statusMessage: 'Bad Request',
      client: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 e0 dc 45 64 51 e5 2f ec bb 88 40 7b ed ec 97 dc 66 bd 2c 75 22 f1 cb 6d 0e 75 e7 17 40 50 d4 eb 04 ... 1936 more bytes>,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadolibre.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadolibre.com',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 477,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          session: <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 e0 dc 45 64 51 e5 2f ec bb 88 40 7b ed ec 97 dc 66 bd 2c 75 22 f1 cb 6d 0e 75 e7 17 40 50 d4 eb 04 ... 1936 more bytes>,
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: null,
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: 443,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 40 b8 90 f7 c1 e9 d6 fa 96 d9 66 53 55 44 83 bb 2b e7 3d bf fb e6 f1 e0 e1 57 c3 f8 94 1d 05 24 04 ... 1936 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/orders/undefined',
          search: '?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
          _defaultAgent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 40 b8 90 f7 c1 e9 d6 fa 96 d9 66 53 55 44 83 bb 2b e7 3d bf fb e6 f1 e0 e1 57 c3 f8 94 1d 05 24 04 ... 1936 more bytes>
              },
              list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'api.mercadolibre.com',
          servername: 'api.mercadolibre.com',
          _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        },
        [Symbol(RequestTimeout)]: undefined
      },
      _consuming: false,
      _dumped: false,
      req: [Circular *2],
      responseUrl: 'https://api.mercadolibre.com/orders/undefined?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
      redirects: [],
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: {
        'content-type': 'text/html',
        'content-length': '242',
        connection: 'close',
        date: 'Sun, 12 Jun 2022 22:06:25 GMT',
        'x-content-type-options': 'nosniff',
        'x-request-id': 'dbbe09c2-8a6f-4f37-acbc-043208d4b4ef',
        'x-frame-options': 'DENY',
        'x-xss-protection': '1; mode=block',
        'access-control-allow-origin': '*',
        'access-control-allow-headers': 'Content-Type',
        'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
        'access-control-max-age': '86400',
        'x-cache': 'Error from cloudfront',
        via: '1.1 072d2ddb3aa179b13d18dc25fc654f92.cloudfront.net (CloudFront)',
        'x-amz-cf-pop': 'EZE50-P1',
        'x-amz-cf-id': 'vbT9D6FPtE4S9VL0bnmMI7SThnjY7HUcpc-yrqB5hyVDRHE8S-GAQg=='
      },
      [Symbol(kHeadersCount)]: 32,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: false,
    host: 'api.mercadolibre.com',
    protocol: 'https:',
    _redirectable: Writable {
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      _events: [Object: null prototype] {
        response: [Function: handleResponse],
        error: [Function: handleRequestError],
        socket: [Function: handleRequestSocket]
      },
      _eventsCount: 3,
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: 10485760,
        protocol: 'https:',
        path: '/orders/undefined?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
        method: 'GET',
        headers: {
          Accept: 'application/json, text/plain, */*',
          'User-Agent': 'axios/0.27.2'
        },
        agent: undefined,
        agents: { http: undefined, https: undefined },
        auth: undefined,
        hostname: 'api.mercadolibre.com',
        port: null,
        nativeProtocols: <ref *4> {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [
                  <ref *1> TLSSocket {
                    _tlsOptions: {
                      allowHalfOpen: undefined,
                      pipe: false,
                      secureContext: SecureContext { context: SecureContext {} },
                      isServer: false,
                      requestCert: true,
                      rejectUnauthorized: true,
                      session: <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 e0 dc 45 64 51 e5 2f ec bb 88 40 7b ed ec 97 dc 66 bd 2c 75 22 f1 cb 6d 0e 75 e7 17 40 50 d4 eb 04 ... 1936 more bytes>,
                      ALPNProtocols: undefined,
                      requestOCSP: undefined,
                      enableTrace: undefined,
                      pskCallback: undefined,
                      highWaterMark: undefined,
                      onread: undefined,
                      signal: undefined
                    },
                    _secureEstablished: true,
                    _securePending: false,
                    _newSessionPending: false,
                    _controlReleased: true,
                    secureConnecting: false,
                    _SNICallback: null,
                    servername: 'api.mercadolibre.com',
                    alpnProtocol: false,
                    authorized: true,
                    authorizationError: null,
                    encrypted: true,
                    _events: [Object: null prototype] {
                      close: [
                        [Function: onSocketCloseDestroySSL],
                        [Function: bound onceWrapper] {
                          listener: [Function (anonymous)]
                        },
                        [Function: onClose],
                        [Function: socketCloseListener]
                      ],
                      end: [Function: onReadableStreamEnd],
                      newListener: [Function: keylogNewListener],
                      secure: [Function: onConnectSecure],
                      session: [Function (anonymous)],
                      free: [Function: onFree],
                      timeout: [Function: onTimeout],
                      agentRemove: [Function: onRemove],
                      error: [Function: socketErrorListener],
                      finish: [Function: bound onceWrapper] {
                        listener: [Function: destroy]
                      }
                    },
                    _eventsCount: 10,
                    connecting: false,
                    _hadError: false,
                    _parent: null,
                    _host: 'api.mercadolibre.com',
                    _readableState: ReadableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      buffer: BufferList { head: null, tail: null, length: 0 },
                      length: 0,
                      pipes: [],
                      flowing: true,
                      ended: false,
                      endEmitted: false,
                      reading: true,
                      constructed: true,
                      sync: false,
                      needReadable: true,
                      emittedReadable: false,
                      readableListening: false,
                      resumeScheduled: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      destroyed: false,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      defaultEncoding: 'utf8',
                      awaitDrainWriters: null,
                      multiAwaitDrain: false,
                      readingMore: false,
                      dataEmitted: true,
                      decoder: null,
                      encoding: null,
                      [Symbol(kPaused)]: false
                    },
                    _maxListeners: undefined,
                    _writableState: WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      finalCalled: true,
                      needDrain: false,
                      ending: true,
                      ended: true,
                      finished: false,
                      destroyed: false,
                      decodeStrings: false,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: false,
                      bufferProcessing: false,
                      onwrite: [Function: bound onwrite],
                      writecb: null,
                      writelen: 0,
                      afterWriteTickInfo: null,
                      buffered: [],
                      bufferedIndex: 0,
                      allBuffers: true,
                      allNoop: true,
                      pendingcb: 1,
                      constructed: true,
                      prefinished: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      [Symbol(kOnFinished)]: []
                    },
                    allowHalfOpen: false,
                    _sockname: null,
                    _pendingData: null,
                    _pendingEncoding: '',
                    server: undefined,
                    _server: null,
                    ssl: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _requestCert: true,
                    _rejectUnauthorized: true,
                    parser: null,
                    _httpMessage: [Circular *2],
                    [Symbol(res)]: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    [Symbol(verified)]: true,
                    [Symbol(pendingSession)]: null,
                    [Symbol(async_id_symbol)]: 477,
                    [Symbol(kHandle)]: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    [Symbol(lastWriteQueueSize)]: 0,
                    [Symbol(timeout)]: null,
                    [Symbol(kBuffer)]: null,
                    [Symbol(kBufferCb)]: null,
                    [Symbol(kBufferGen)]: null,
                    [Symbol(kCapture)]: false,
                    [Symbol(kSetNoDelay)]: false,
                    [Symbol(kSetKeepAlive)]: true,
                    [Symbol(kSetKeepAliveInitialDelay)]: 60,
                    [Symbol(kBytesRead)]: 0,
                    [Symbol(kBytesWritten)]: 0,
                    [Symbol(connect-options)]: {
                      rejectUnauthorized: true,
                      ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                      checkServerIdentity: [Function: checkServerIdentity],
                      minDHSize: 1024,
                      session: <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 e0 dc 45 64 51 e5 2f ec bb 88 40 7b ed ec 97 dc 66 bd 2c 75 22 f1 cb 6d 0e 75 e7 17 40 50 d4 eb 04 ... 1936 more bytes>,
                      maxRedirects: 21,
                      maxBodyLength: 10485760,
                      protocol: 'https:',
                      path: null,
                      method: 'GET',
                      headers: {
                        Accept: 'application/json, text/plain, */*',
                        'User-Agent': 'axios/0.27.2'
                      },
                      agent: undefined,
                      agents: { http: undefined, https: undefined },
                      auth: undefined,
                      hostname: 'api.mercadolibre.com',
                      port: 443,
                      nativeProtocols: [Circular *4],
                      pathname: '/orders/undefined',
                      search: '?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                      _defaultAgent: [Circular *3],
                      host: 'api.mercadolibre.com',
                      servername: 'api.mercadolibre.com',
                      _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
                      encoding: null,
                      singleUse: true
                    },
                    [Symbol(RequestTimeout)]: undefined
                  }
                ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 40 b8 90 f7 c1 e9 d6 fa 96 d9 66 53 55 44 83 bb 2b e7 3d bf fb e6 f1 e0 e1 57 c3 f8 94 1d 05 24 04 ... 1936 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/orders/undefined',
        search: '?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378'
      },
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *2],
      _currentUrl: 'https://api.mercadolibre.com/orders/undefined?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
      [Symbol(kCapture)]: false
    },
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [ 'Accept', 'application/json, text/plain, */*' ],
      'user-agent': [ 'User-Agent', 'axios/0.27.2' ],
      host: [ 'Host', 'api.mercadolibre.com' ]
    }
  },
  response: {
    status: 400,
    statusText: 'Bad Request',
    headers: {
      'content-type': 'text/html',
      'content-length': '242',
      connection: 'close',
      date: 'Sun, 12 Jun 2022 22:06:25 GMT',
      'x-content-type-options': 'nosniff',
      'x-request-id': 'dbbe09c2-8a6f-4f37-acbc-043208d4b4ef',
      'x-frame-options': 'DENY',
      'x-xss-protection': '1; mode=block',
      'access-control-allow-origin': '*',
      'access-control-allow-headers': 'Content-Type',
      'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
      'access-control-max-age': '86400',
      'x-cache': 'Error from cloudfront',
      via: '1.1 072d2ddb3aa179b13d18dc25fc654f92.cloudfront.net (CloudFront)',
      'x-amz-cf-pop': 'EZE50-P1',
      'x-amz-cf-id': 'vbT9D6FPtE4S9VL0bnmMI7SThnjY7HUcpc-yrqB5hyVDRHE8S-GAQg=='
    },
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [Function: httpAdapter],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        }
      },
      validateStatus: [Function: validateStatus],
      headers: {
        Accept: 'application/json, text/plain, */*',
        'User-Agent': 'axios/0.27.2'
      },
      method: 'get',
      url: 'https://api.mercadolibre.com/orders/undefined?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
      data: undefined
    },
    request: <ref *2> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        prefinish: [Function: requestOnPrefinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 e0 dc 45 64 51 e5 2f ec bb 88 40 7b ed ec 97 dc 66 bd 2c 75 22 f1 cb 6d 0e 75 e7 17 40 50 d4 eb 04 ... 1936 more bytes>,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadolibre.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadolibre.com',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 477,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          session: <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 e0 dc 45 64 51 e5 2f ec bb 88 40 7b ed ec 97 dc 66 bd 2c 75 22 f1 cb 6d 0e 75 e7 17 40 50 d4 eb 04 ... 1936 more bytes>,
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: null,
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: 443,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 40 b8 90 f7 c1 e9 d6 fa 96 d9 66 53 55 44 83 bb 2b e7 3d bf fb e6 f1 e0 e1 57 c3 f8 94 1d 05 24 04 ... 1936 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/orders/undefined',
          search: '?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
          _defaultAgent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 40 b8 90 f7 c1 e9 d6 fa 96 d9 66 53 55 44 83 bb 2b e7 3d bf fb e6 f1 e0 e1 57 c3 f8 94 1d 05 24 04 ... 1936 more bytes>
              },
              list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'api.mercadolibre.com',
          servername: 'api.mercadolibre.com',
          _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        },
        [Symbol(RequestTimeout)]: undefined
      },
      _header: 'GET /orders/undefined?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378 HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'User-Agent: axios/0.27.2\r\n' +
        'Host: api.mercadolibre.com\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: <ref *3> Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype] { path: null },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'api.mercadolibre.com:443:::::::::::::::::::::': [
            <ref *1> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: true,
                session: <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 e0 dc 45 64 51 e5 2f ec bb 88 40 7b ed ec 97 dc 66 bd 2c 75 22 f1 cb 6d 0e 75 e7 17 40 50 d4 eb 04 ... 1936 more bytes>,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'api.mercadolibre.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 10,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'api.mercadolibre.com',
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: false,
                errored: null,
                closed: false,
                closeEmitted: false,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: true,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 1,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular *2],
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 477,
              [Symbol(kHandle)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(connect-options)]: {
                rejectUnauthorized: true,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                session: <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 e0 dc 45 64 51 e5 2f ec bb 88 40 7b ed ec 97 dc 66 bd 2c 75 22 f1 cb 6d 0e 75 e7 17 40 50 d4 eb 04 ... 1936 more bytes>,
                maxRedirects: 21,
                maxBodyLength: 10485760,
                protocol: 'https:',
                path: null,
                method: 'GET',
                headers: {
                  Accept: 'application/json, text/plain, */*',
                  'User-Agent': 'axios/0.27.2'
                },
                agent: undefined,
                agents: { http: undefined, https: undefined },
                auth: undefined,
                hostname: 'api.mercadolibre.com',
                port: 443,
                nativeProtocols: <ref *4> {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: [Circular *3],
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/orders/undefined',
                search: '?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                _defaultAgent: [Circular *3],
                host: 'api.mercadolibre.com',
                servername: 'api.mercadolibre.com',
                _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
                encoding: null,
                singleUse: true
              },
              [Symbol(RequestTimeout)]: undefined
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        maxCachedSessions: 100,
        _sessionCache: {
          map: {
            'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 40 b8 90 f7 c1 e9 d6 fa 96 d9 66 53 55 44 83 bb 2b e7 3d bf fb e6 f1 e0 e1 57 c3 f8 94 1d 05 24 04 ... 1936 more bytes>
          },
          list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
        },
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      path: '/orders/undefined?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          constructed: true,
          sync: true,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          destroyed: true,
          errored: null,
          closed: true,
          closeEmitted: true,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: true,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          data: [Function: handleStreamData],
          aborted: [Function: handlerStreamAborted],
          error: [Function: handleStreamError]
        },
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 e0 dc 45 64 51 e5 2f ec bb 88 40 7b ed ec 97 dc 66 bd 2c 75 22 f1 cb 6d 0e 75 e7 17 40 50 d4 eb 04 ... 1936 more bytes>,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'api.mercadolibre.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'api.mercadolibre.com',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 477,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            session: <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 e0 dc 45 64 51 e5 2f ec bb 88 40 7b ed ec 97 dc 66 bd 2c 75 22 f1 cb 6d 0e 75 e7 17 40 50 d4 eb 04 ... 1936 more bytes>,
            maxRedirects: 21,
            maxBodyLength: 10485760,
            protocol: 'https:',
            path: null,
            method: 'GET',
            headers: {
              Accept: 'application/json, text/plain, */*',
              'User-Agent': 'axios/0.27.2'
            },
            agent: undefined,
            agents: { http: undefined, https: undefined },
            auth: undefined,
            hostname: 'api.mercadolibre.com',
            port: 443,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] { path: null },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 40 b8 90 f7 c1 e9 d6 fa 96 d9 66 53 55 44 83 bb 2b e7 3d bf fb e6 f1 e0 e1 57 c3 f8 94 1d 05 24 04 ... 1936 more bytes>
                    },
                    list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/orders/undefined',
            search: '?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 40 b8 90 f7 c1 e9 d6 fa 96 d9 66 53 55 44 83 bb 2b e7 3d bf fb e6 f1 e0 e1 57 c3 f8 94 1d 05 24 04 ... 1936 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'api.mercadolibre.com',
            servername: 'api.mercadolibre.com',
            _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          },
          [Symbol(RequestTimeout)]: undefined
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
          'Content-Type',
          'text/html',
          'Content-Length',
          '242',
          'Connection',
          'close',
          'Date',
          'Sun, 12 Jun 2022 22:06:25 GMT',
          'X-Content-Type-Options',
          'nosniff',
          'X-Request-Id',
          'dbbe09c2-8a6f-4f37-acbc-043208d4b4ef',
          'X-Frame-Options',
          'DENY',
          'X-XSS-Protection',
          '1; mode=block',
          'Access-Control-Allow-Origin',
          '*',
          'Access-Control-Allow-Headers',
          'Content-Type',
          'Access-Control-Allow-Methods',
          'PUT, GET, POST, DELETE, OPTIONS',
          'Access-Control-Max-Age',
          '86400',
          'X-Cache',
          'Error from cloudfront',
          'Via',
          '1.1 072d2ddb3aa179b13d18dc25fc654f92.cloudfront.net (CloudFront)',
          'X-Amz-Cf-Pop',
          'EZE50-P1',
          'X-Amz-Cf-Id',
          'vbT9D6FPtE4S9VL0bnmMI7SThnjY7HUcpc-yrqB5hyVDRHE8S-GAQg=='
        ],
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 400,
        statusMessage: 'Bad Request',
        client: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 e0 dc 45 64 51 e5 2f ec bb 88 40 7b ed ec 97 dc 66 bd 2c 75 22 f1 cb 6d 0e 75 e7 17 40 50 d4 eb 04 ... 1936 more bytes>,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'api.mercadolibre.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'api.mercadolibre.com',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 477,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            session: <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 e0 dc 45 64 51 e5 2f ec bb 88 40 7b ed ec 97 dc 66 bd 2c 75 22 f1 cb 6d 0e 75 e7 17 40 50 d4 eb 04 ... 1936 more bytes>,
            maxRedirects: 21,
            maxBodyLength: 10485760,
            protocol: 'https:',
            path: null,
            method: 'GET',
            headers: {
              Accept: 'application/json, text/plain, */*',
              'User-Agent': 'axios/0.27.2'
            },
            agent: undefined,
            agents: { http: undefined, https: undefined },
            auth: undefined,
            hostname: 'api.mercadolibre.com',
            port: 443,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] { path: null },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 40 b8 90 f7 c1 e9 d6 fa 96 d9 66 53 55 44 83 bb 2b e7 3d bf fb e6 f1 e0 e1 57 c3 f8 94 1d 05 24 04 ... 1936 more bytes>
                    },
                    list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/orders/undefined',
            search: '?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 40 b8 90 f7 c1 e9 d6 fa 96 d9 66 53 55 44 83 bb 2b e7 3d bf fb e6 f1 e0 e1 57 c3 f8 94 1d 05 24 04 ... 1936 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'api.mercadolibre.com',
            servername: 'api.mercadolibre.com',
            _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          },
          [Symbol(RequestTimeout)]: undefined
        },
        _consuming: false,
        _dumped: false,
        req: [Circular *2],
        responseUrl: 'https://api.mercadolibre.com/orders/undefined?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
        redirects: [],
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
          'content-type': 'text/html',
          'content-length': '242',
          connection: 'close',
          date: 'Sun, 12 Jun 2022 22:06:25 GMT',
          'x-content-type-options': 'nosniff',
          'x-request-id': 'dbbe09c2-8a6f-4f37-acbc-043208d4b4ef',
          'x-frame-options': 'DENY',
          'x-xss-protection': '1; mode=block',
          'access-control-allow-origin': '*',
          'access-control-allow-headers': 'Content-Type',
          'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
          'access-control-max-age': '86400',
          'x-cache': 'Error from cloudfront',
          via: '1.1 072d2ddb3aa179b13d18dc25fc654f92.cloudfront.net (CloudFront)',
          'x-amz-cf-pop': 'EZE50-P1',
          'x-amz-cf-id': 'vbT9D6FPtE4S9VL0bnmMI7SThnjY7HUcpc-yrqB5hyVDRHE8S-GAQg=='
        },
        [Symbol(kHeadersCount)]: 32,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'api.mercadolibre.com',
      protocol: 'https:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError],
          socket: [Function: handleRequestSocket]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: '/orders/undefined?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: null,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [
                    <ref *1> TLSSocket {
                      _tlsOptions: {
                        allowHalfOpen: undefined,
                        pipe: false,
                        secureContext: SecureContext { context: SecureContext {} },
                        isServer: false,
                        requestCert: true,
                        rejectUnauthorized: true,
                        session: <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 e0 dc 45 64 51 e5 2f ec bb 88 40 7b ed ec 97 dc 66 bd 2c 75 22 f1 cb 6d 0e 75 e7 17 40 50 d4 eb 04 ... 1936 more bytes>,
                        ALPNProtocols: undefined,
                        requestOCSP: undefined,
                        enableTrace: undefined,
                        pskCallback: undefined,
                        highWaterMark: undefined,
                        onread: undefined,
                        signal: undefined
                      },
                      _secureEstablished: true,
                      _securePending: false,
                      _newSessionPending: false,
                      _controlReleased: true,
                      secureConnecting: false,
                      _SNICallback: null,
                      servername: 'api.mercadolibre.com',
                      alpnProtocol: false,
                      authorized: true,
                      authorizationError: null,
                      encrypted: true,
                      _events: [Object: null prototype] {
                        close: [
                          [Function: onSocketCloseDestroySSL],
                          [Function: bound onceWrapper] {
                            listener: [Function (anonymous)]
                          },
                          [Function: onClose],
                          [Function: socketCloseListener]
                        ],
                        end: [Function: onReadableStreamEnd],
                        newListener: [Function: keylogNewListener],
                        secure: [Function: onConnectSecure],
                        session: [Function (anonymous)],
                        free: [Function: onFree],
                        timeout: [Function: onTimeout],
                        agentRemove: [Function: onRemove],
                        error: [Function: socketErrorListener],
                        finish: [Function: bound onceWrapper] {
                          listener: [Function: destroy]
                        }
                      },
                      _eventsCount: 10,
                      connecting: false,
                      _hadError: false,
                      _parent: null,
                      _host: 'api.mercadolibre.com',
                      _readableState: ReadableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        buffer: BufferList { head: null, tail: null, length: 0 },
                        length: 0,
                        pipes: [],
                        flowing: true,
                        ended: false,
                        endEmitted: false,
                        reading: true,
                        constructed: true,
                        sync: false,
                        needReadable: true,
                        emittedReadable: false,
                        readableListening: false,
                        resumeScheduled: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        destroyed: false,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        defaultEncoding: 'utf8',
                        awaitDrainWriters: null,
                        multiAwaitDrain: false,
                        readingMore: false,
                        dataEmitted: true,
                        decoder: null,
                        encoding: null,
                        [Symbol(kPaused)]: false
                      },
                      _maxListeners: undefined,
                      _writableState: WritableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        finalCalled: true,
                        needDrain: false,
                        ending: true,
                        ended: true,
                        finished: false,
                        destroyed: false,
                        decodeStrings: false,
                        defaultEncoding: 'utf8',
                        length: 0,
                        writing: false,
                        corked: 0,
                        sync: false,
                        bufferProcessing: false,
                        onwrite: [Function: bound onwrite],
                        writecb: null,
                        writelen: 0,
                        afterWriteTickInfo: null,
                        buffered: [],
                        bufferedIndex: 0,
                        allBuffers: true,
                        allNoop: true,
                        pendingcb: 1,
                        constructed: true,
                        prefinished: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        [Symbol(kOnFinished)]: []
                      },
                      allowHalfOpen: false,
                      _sockname: null,
                      _pendingData: null,
                      _pendingEncoding: '',
                      server: undefined,
                      _server: null,
                      ssl: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _requestCert: true,
                      _rejectUnauthorized: true,
                      parser: null,
                      _httpMessage: [Circular *2],
                      [Symbol(res)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(verified)]: true,
                      [Symbol(pendingSession)]: null,
                      [Symbol(async_id_symbol)]: 477,
                      [Symbol(kHandle)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(lastWriteQueueSize)]: 0,
                      [Symbol(timeout)]: null,
                      [Symbol(kBuffer)]: null,
                      [Symbol(kBufferCb)]: null,
                      [Symbol(kBufferGen)]: null,
                      [Symbol(kCapture)]: false,
                      [Symbol(kSetNoDelay)]: false,
                      [Symbol(kSetKeepAlive)]: true,
                      [Symbol(kSetKeepAliveInitialDelay)]: 60,
                      [Symbol(kBytesRead)]: 0,
                      [Symbol(kBytesWritten)]: 0,
                      [Symbol(connect-options)]: {
                        rejectUnauthorized: true,
                        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                        checkServerIdentity: [Function: checkServerIdentity],
                        minDHSize: 1024,
                        session: <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 e0 dc 45 64 51 e5 2f ec bb 88 40 7b ed ec 97 dc 66 bd 2c 75 22 f1 cb 6d 0e 75 e7 17 40 50 d4 eb 04 ... 1936 more bytes>,
                        maxRedirects: 21,
                        maxBodyLength: 10485760,
                        protocol: 'https:',
                        path: null,
                        method: 'GET',
                        headers: {
                          Accept: 'application/json, text/plain, */*',
                          'User-Agent': 'axios/0.27.2'
                        },
                        agent: undefined,
                        agents: { http: undefined, https: undefined },
                        auth: undefined,
                        hostname: 'api.mercadolibre.com',
                        port: 443,
                        nativeProtocols: [Circular *4],
                        pathname: '/orders/undefined',
                        search: '?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                        _defaultAgent: [Circular *3],
                        host: 'api.mercadolibre.com',
                        servername: 'api.mercadolibre.com',
                        _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
                        encoding: null,
                        singleUse: true
                      },
                      [Symbol(RequestTimeout)]: undefined
                    }
                  ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 40 b8 90 f7 c1 e9 d6 fa 96 d9 66 53 55 44 83 bb 2b e7 3d bf fb e6 f1 e0 e1 57 c3 f8 94 1d 05 24 04 ... 1936 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/orders/undefined',
          search: '?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 0,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *2],
        _currentUrl: 'https://api.mercadolibre.com/orders/undefined?access_token=APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'user-agent': [ 'User-Agent', 'axios/0.27.2' ],
        host: [ 'Host', 'api.mercadolibre.com' ]
      }
    },
    data: '<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">\r\n' +
      '<html>\r\n' +
      '<head><title>400 Bad Request</title></head>\r\n' +
      '<body bgcolor="white">\r\n' +
      '<h1>400 Bad Request</h1>\r\n' +
      '<p>Your browser sent a request that this server could not understand.</body>\r\n' +
      '</html>\r\n'
  },
  level: 'error',
  timestamp: '2022-06-12T22:06:25.436Z'
}
{
  code: 'EREQUEST',
  originalError: Error: Invalid column name 'undefined'.
      at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:382:19)
      at Connection.emit (node:events:527:28)
      at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
      at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
      at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
      at Readable.emit (node:events:527:28)
      at addChunk (node:internal/streams/readable:315:12)
      at readableAddChunk (node:internal/streams/readable:289:9)
      at Readable.push (node:internal/streams/readable:228:10)
      at next (node:internal/streams/from:98:31) {
    info: ErrorMessageToken {
      name: 'ERROR',
      handlerName: 'onErrorMessage',
      number: 207,
      state: 1,
      class: 16,
      message: "Invalid column name 'undefined'.",
      serverName: 'NBJMAUAS\\NEWMANAG',
      procName: '',
      lineNumber: 1
    }
  },
  name: 'RequestError',
  number: 207,
  lineNumber: 1,
  state: 1,
  class: 16,
  serverName: 'NBJMAUAS\\NEWMANAG',
  procName: '',
  precedingErrors: [],
  level: 'error',
  timestamp: '2022-06-12T22:06:25.538Z'
}
{ level: 'error', timestamp: '2022-06-12T22:06:25.543Z' }
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:08:29.121Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:08:33.287Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:08:39.355Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:08:44.134Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:08:59.250Z'
}
{
  code: 'EREQUEST',
  originalError: Error: Invalid column name 'undefined'.
      at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:382:19)
      at Connection.emit (node:events:527:28)
      at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
      at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
      at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
      at Readable.emit (node:events:527:28)
      at addChunk (node:internal/streams/readable:315:12)
      at readableAddChunk (node:internal/streams/readable:289:9)
      at Readable.push (node:internal/streams/readable:228:10)
      at next (node:internal/streams/from:98:31) {
    info: ErrorMessageToken {
      name: 'ERROR',
      handlerName: 'onErrorMessage',
      number: 207,
      state: 1,
      class: 16,
      message: "Invalid column name 'undefined'.",
      serverName: 'NBJMAUAS\\NEWMANAG',
      procName: '',
      lineNumber: 1
    }
  },
  name: 'RequestError',
  number: 207,
  lineNumber: 1,
  state: 1,
  class: 16,
  serverName: 'NBJMAUAS\\NEWMANAG',
  procName: '',
  precedingErrors: [],
  level: 'error',
  timestamp: '2022-06-12T22:09:03.976Z'
}
{ level: 'error', timestamp: '2022-06-12T22:09:04.381Z' }
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:10:32.957Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:10:34.815Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:10:38.637Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:10:49.408Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:10:52.260Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:11:32.787Z'
}
{
  message: 'Request failed with status code 400',
  name: 'AxiosError',
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [Function: httpAdapter],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] {
        LINE_BREAK: '\r\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      }
    },
    validateStatus: [Function: validateStatus],
    headers: {
      Accept: 'application/json, text/plain, */*',
      access_token: 'APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
      'User-Agent': 'axios/0.27.2'
    },
    method: 'get',
    url: 'https://api.mercadolibre.com/shipments/41441506905',
    data: undefined
  },
  request: <ref *2> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      prefinish: [Function: requestOnPrefinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: false,
    socket: <ref *1> TLSSocket {
      _tlsOptions: {
        allowHalfOpen: undefined,
        pipe: false,
        secureContext: SecureContext { context: SecureContext {} },
        isServer: false,
        requestCert: true,
        rejectUnauthorized: true,
        session: undefined,
        ALPNProtocols: undefined,
        requestOCSP: undefined,
        enableTrace: undefined,
        pskCallback: undefined,
        highWaterMark: undefined,
        onread: undefined,
        signal: undefined
      },
      _secureEstablished: true,
      _securePending: false,
      _newSessionPending: false,
      _controlReleased: true,
      secureConnecting: false,
      _SNICallback: null,
      servername: 'api.mercadolibre.com',
      alpnProtocol: false,
      authorized: true,
      authorizationError: null,
      encrypted: true,
      _events: [Object: null prototype] {
        close: [
          [Function: onSocketCloseDestroySSL],
          [Function: bound onceWrapper] {
            listener: [Function (anonymous)]
          },
          [Function: onClose],
          [Function: socketCloseListener]
        ],
        end: [Function: onReadableStreamEnd],
        newListener: [Function: keylogNewListener],
        secure: [Function: onConnectSecure],
        session: [Function (anonymous)],
        free: [Function: onFree],
        timeout: [Function: onTimeout],
        agentRemove: [Function: onRemove],
        error: [Function: socketErrorListener],
        finish: [Function: bound onceWrapper] { listener: [Function: destroy] }
      },
      _eventsCount: 10,
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'api.mercadolibre.com',
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        constructed: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: true,
        needDrain: false,
        ending: true,
        ended: true,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: undefined,
      _server: null,
      ssl: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      _requestCert: true,
      _rejectUnauthorized: true,
      parser: null,
      _httpMessage: [Circular *2],
      [Symbol(res)]: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(verified)]: true,
      [Symbol(pendingSession)]: null,
      [Symbol(async_id_symbol)]: 459,
      [Symbol(kHandle)]: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: false,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 60,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(connect-options)]: {
        rejectUnauthorized: true,
        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
        checkServerIdentity: [Function: checkServerIdentity],
        minDHSize: 1024,
        maxRedirects: 21,
        maxBodyLength: 10485760,
        protocol: 'https:',
        path: null,
        method: 'GET',
        headers: {
          Accept: 'application/json, text/plain, */*',
          access_token: 'APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
          'User-Agent': 'axios/0.27.2'
        },
        agent: undefined,
        agents: { http: undefined, https: undefined },
        auth: undefined,
        hostname: 'api.mercadolibre.com',
        port: 443,
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 02 fe 1c a2 ec e4 71 f4 69 0b ec df 0a 9d c3 d9 f0 b8 56 15 df e2 2b f0 d7 38 1f 54 7a ca 29 cf 04 ... 1936 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/shipments/41441506905',
        _defaultAgent: Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] { path: null },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          maxCachedSessions: 100,
          _sessionCache: {
            map: {
              'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 02 fe 1c a2 ec e4 71 f4 69 0b ec df 0a 9d c3 d9 f0 b8 56 15 df e2 2b f0 d7 38 1f 54 7a ca 29 cf 04 ... 1936 more bytes>
            },
            list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
          },
          [Symbol(kCapture)]: false
        },
        host: 'api.mercadolibre.com',
        servername: 'api.mercadolibre.com',
        _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
        encoding: null,
        singleUse: true
      },
      [Symbol(RequestTimeout)]: undefined
    },
    _header: 'GET /shipments/41441506905 HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'access_token: APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378\r\n' +
      'User-Agent: axios/0.27.2\r\n' +
      'Host: api.mercadolibre.com\r\n' +
      'Connection: close\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: <ref *3> Agent {
      _events: [Object: null prototype] {
        free: [Function (anonymous)],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] { path: null },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {
        'api.mercadolibre.com:443:::::::::::::::::::::': [
          <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'api.mercadolibre.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 10,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'api.mercadolibre.com',
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *2],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 459,
            [Symbol(kHandle)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              maxRedirects: 21,
              maxBodyLength: 10485760,
              protocol: 'https:',
              path: null,
              method: 'GET',
              headers: {
                Accept: 'application/json, text/plain, */*',
                access_token: 'APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                'User-Agent': 'axios/0.27.2'
              },
              agent: undefined,
              agents: { http: undefined, https: undefined },
              auth: undefined,
              hostname: 'api.mercadolibre.com',
              port: 443,
              nativeProtocols: {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: [Circular *3],
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/shipments/41441506905',
              _defaultAgent: [Circular *3],
              host: 'api.mercadolibre.com',
              servername: 'api.mercadolibre.com',
              _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            },
            [Symbol(RequestTimeout)]: undefined
          }
        ]
      },
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      maxCachedSessions: 100,
      _sessionCache: {
        map: {
          'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 02 fe 1c a2 ec e4 71 f4 69 0b ec df 0a 9d c3 d9 f0 b8 56 15 df e2 2b f0 d7 38 1f 54 7a ca 29 cf 04 ... 1936 more bytes>
        },
        list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
      },
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    path: '/shipments/41441506905',
    _ended: true,
    res: IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        constructed: true,
        sync: false,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        destroyed: true,
        errored: null,
        closed: true,
        closeEmitted: true,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
        data: [Function: handleStreamData],
        aborted: [Function: handlerStreamAborted],
        error: [Function: handleStreamError]
      },
      _eventsCount: 4,
      _maxListeners: undefined,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadolibre.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadolibre.com',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 459,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: null,
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            access_token: 'APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: 443,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 02 fe 1c a2 ec e4 71 f4 69 0b ec df 0a 9d c3 d9 f0 b8 56 15 df e2 2b f0 d7 38 1f 54 7a ca 29 cf 04 ... 1936 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/shipments/41441506905',
          _defaultAgent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 02 fe 1c a2 ec e4 71 f4 69 0b ec df 0a 9d c3 d9 f0 b8 56 15 df e2 2b f0 d7 38 1f 54 7a ca 29 cf 04 ... 1936 more bytes>
              },
              list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'api.mercadolibre.com',
          servername: 'api.mercadolibre.com',
          _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        },
        [Symbol(RequestTimeout)]: undefined
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [
        'Content-Type',
        'application/json;charset=utf-8',
        'Transfer-Encoding',
        'chunked',
        'Connection',
        'close',
        'Date',
        'Sun, 12 Jun 2022 22:11:56 GMT',
        'vary',
        'Accept,Accept-Encoding',
        'cache-control',
        'max-age=0',
        'etag',
        '691d4344a74c713173f10e61932c614b',
        'X-Content-Type-Options',
        'nosniff',
        'X-Request-Id',
        'c8e5d580-b621-4837-bc07-0420c2a882f8',
        'X-Frame-Options',
        'DENY',
        'X-XSS-Protection',
        '1; mode=block',
        'Access-Control-Allow-Origin',
        '*',
        'Access-Control-Allow-Headers',
        'Content-Type',
        'Access-Control-Allow-Methods',
        'PUT, GET, POST, DELETE, OPTIONS',
        'Access-Control-Max-Age',
        '86400',
        'X-Cache',
        'Error from cloudfront',
        'Via',
        '1.1 23f94cbeaed412b16bcf3002e9a59ac0.cloudfront.net (CloudFront)',
        'X-Amz-Cf-Pop',
        'EZE51-C1',
        'X-Amz-Cf-Id',
        'yhjIG4BRC_OSy-leSWjEAL167BEOTZcH4ns_UQsfSCC6fBs8akaZTw=='
      ],
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 400,
      statusMessage: 'Bad Request',
      client: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadolibre.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadolibre.com',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 459,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: null,
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            access_token: 'APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: 443,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 02 fe 1c a2 ec e4 71 f4 69 0b ec df 0a 9d c3 d9 f0 b8 56 15 df e2 2b f0 d7 38 1f 54 7a ca 29 cf 04 ... 1936 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/shipments/41441506905',
          _defaultAgent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 02 fe 1c a2 ec e4 71 f4 69 0b ec df 0a 9d c3 d9 f0 b8 56 15 df e2 2b f0 d7 38 1f 54 7a ca 29 cf 04 ... 1936 more bytes>
              },
              list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'api.mercadolibre.com',
          servername: 'api.mercadolibre.com',
          _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        },
        [Symbol(RequestTimeout)]: undefined
      },
      _consuming: true,
      _dumped: false,
      req: [Circular *2],
      responseUrl: 'https://api.mercadolibre.com/shipments/41441506905',
      redirects: [],
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: {
        'content-type': 'application/json;charset=utf-8',
        'transfer-encoding': 'chunked',
        connection: 'close',
        date: 'Sun, 12 Jun 2022 22:11:56 GMT',
        vary: 'Accept,Accept-Encoding',
        'cache-control': 'max-age=0',
        etag: '691d4344a74c713173f10e61932c614b',
        'x-content-type-options': 'nosniff',
        'x-request-id': 'c8e5d580-b621-4837-bc07-0420c2a882f8',
        'x-frame-options': 'DENY',
        'x-xss-protection': '1; mode=block',
        'access-control-allow-origin': '*',
        'access-control-allow-headers': 'Content-Type',
        'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
        'access-control-max-age': '86400',
        'x-cache': 'Error from cloudfront',
        via: '1.1 23f94cbeaed412b16bcf3002e9a59ac0.cloudfront.net (CloudFront)',
        'x-amz-cf-pop': 'EZE51-C1',
        'x-amz-cf-id': 'yhjIG4BRC_OSy-leSWjEAL167BEOTZcH4ns_UQsfSCC6fBs8akaZTw=='
      },
      [Symbol(kHeadersCount)]: 38,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: false,
    host: 'api.mercadolibre.com',
    protocol: 'https:',
    _redirectable: Writable {
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      _events: [Object: null prototype] {
        response: [Function: handleResponse],
        error: [Function: handleRequestError],
        socket: [Function: handleRequestSocket]
      },
      _eventsCount: 3,
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: 10485760,
        protocol: 'https:',
        path: '/shipments/41441506905',
        method: 'GET',
        headers: {
          Accept: 'application/json, text/plain, */*',
          access_token: 'APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
          'User-Agent': 'axios/0.27.2'
        },
        agent: undefined,
        agents: { http: undefined, https: undefined },
        auth: undefined,
        hostname: 'api.mercadolibre.com',
        port: null,
        nativeProtocols: <ref *4> {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [
                  <ref *1> TLSSocket {
                    _tlsOptions: {
                      allowHalfOpen: undefined,
                      pipe: false,
                      secureContext: SecureContext { context: SecureContext {} },
                      isServer: false,
                      requestCert: true,
                      rejectUnauthorized: true,
                      session: undefined,
                      ALPNProtocols: undefined,
                      requestOCSP: undefined,
                      enableTrace: undefined,
                      pskCallback: undefined,
                      highWaterMark: undefined,
                      onread: undefined,
                      signal: undefined
                    },
                    _secureEstablished: true,
                    _securePending: false,
                    _newSessionPending: false,
                    _controlReleased: true,
                    secureConnecting: false,
                    _SNICallback: null,
                    servername: 'api.mercadolibre.com',
                    alpnProtocol: false,
                    authorized: true,
                    authorizationError: null,
                    encrypted: true,
                    _events: [Object: null prototype] {
                      close: [
                        [Function: onSocketCloseDestroySSL],
                        [Function: bound onceWrapper] {
                          listener: [Function (anonymous)]
                        },
                        [Function: onClose],
                        [Function: socketCloseListener]
                      ],
                      end: [Function: onReadableStreamEnd],
                      newListener: [Function: keylogNewListener],
                      secure: [Function: onConnectSecure],
                      session: [Function (anonymous)],
                      free: [Function: onFree],
                      timeout: [Function: onTimeout],
                      agentRemove: [Function: onRemove],
                      error: [Function: socketErrorListener],
                      finish: [Function: bound onceWrapper] {
                        listener: [Function: destroy]
                      }
                    },
                    _eventsCount: 10,
                    connecting: false,
                    _hadError: false,
                    _parent: null,
                    _host: 'api.mercadolibre.com',
                    _readableState: ReadableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      buffer: BufferList { head: null, tail: null, length: 0 },
                      length: 0,
                      pipes: [],
                      flowing: true,
                      ended: false,
                      endEmitted: false,
                      reading: true,
                      constructed: true,
                      sync: false,
                      needReadable: true,
                      emittedReadable: false,
                      readableListening: false,
                      resumeScheduled: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      destroyed: false,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      defaultEncoding: 'utf8',
                      awaitDrainWriters: null,
                      multiAwaitDrain: false,
                      readingMore: false,
                      dataEmitted: true,
                      decoder: null,
                      encoding: null,
                      [Symbol(kPaused)]: false
                    },
                    _maxListeners: undefined,
                    _writableState: WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      finalCalled: true,
                      needDrain: false,
                      ending: true,
                      ended: true,
                      finished: false,
                      destroyed: false,
                      decodeStrings: false,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: false,
                      bufferProcessing: false,
                      onwrite: [Function: bound onwrite],
                      writecb: null,
                      writelen: 0,
                      afterWriteTickInfo: null,
                      buffered: [],
                      bufferedIndex: 0,
                      allBuffers: true,
                      allNoop: true,
                      pendingcb: 1,
                      constructed: true,
                      prefinished: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      [Symbol(kOnFinished)]: []
                    },
                    allowHalfOpen: false,
                    _sockname: null,
                    _pendingData: null,
                    _pendingEncoding: '',
                    server: undefined,
                    _server: null,
                    ssl: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _requestCert: true,
                    _rejectUnauthorized: true,
                    parser: null,
                    _httpMessage: [Circular *2],
                    [Symbol(res)]: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    [Symbol(verified)]: true,
                    [Symbol(pendingSession)]: null,
                    [Symbol(async_id_symbol)]: 459,
                    [Symbol(kHandle)]: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    [Symbol(lastWriteQueueSize)]: 0,
                    [Symbol(timeout)]: null,
                    [Symbol(kBuffer)]: null,
                    [Symbol(kBufferCb)]: null,
                    [Symbol(kBufferGen)]: null,
                    [Symbol(kCapture)]: false,
                    [Symbol(kSetNoDelay)]: false,
                    [Symbol(kSetKeepAlive)]: true,
                    [Symbol(kSetKeepAliveInitialDelay)]: 60,
                    [Symbol(kBytesRead)]: 0,
                    [Symbol(kBytesWritten)]: 0,
                    [Symbol(connect-options)]: {
                      rejectUnauthorized: true,
                      ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                      checkServerIdentity: [Function: checkServerIdentity],
                      minDHSize: 1024,
                      maxRedirects: 21,
                      maxBodyLength: 10485760,
                      protocol: 'https:',
                      path: null,
                      method: 'GET',
                      headers: {
                        Accept: 'application/json, text/plain, */*',
                        access_token: 'APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                        'User-Agent': 'axios/0.27.2'
                      },
                      agent: undefined,
                      agents: { http: undefined, https: undefined },
                      auth: undefined,
                      hostname: 'api.mercadolibre.com',
                      port: 443,
                      nativeProtocols: [Circular *4],
                      pathname: '/shipments/41441506905',
                      _defaultAgent: [Circular *3],
                      host: 'api.mercadolibre.com',
                      servername: 'api.mercadolibre.com',
                      _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
                      encoding: null,
                      singleUse: true
                    },
                    [Symbol(RequestTimeout)]: undefined
                  }
                ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 02 fe 1c a2 ec e4 71 f4 69 0b ec df 0a 9d c3 d9 f0 b8 56 15 df e2 2b f0 d7 38 1f 54 7a ca 29 cf 04 ... 1936 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/shipments/41441506905'
      },
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *2],
      _currentUrl: 'https://api.mercadolibre.com/shipments/41441506905',
      [Symbol(kCapture)]: false
    },
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [ 'Accept', 'application/json, text/plain, */*' ],
      access_token: [
        'access_token',
        'APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378'
      ],
      'user-agent': [ 'User-Agent', 'axios/0.27.2' ],
      host: [ 'Host', 'api.mercadolibre.com' ]
    }
  },
  response: {
    status: 400,
    statusText: 'Bad Request',
    headers: {
      'content-type': 'application/json;charset=utf-8',
      'transfer-encoding': 'chunked',
      connection: 'close',
      date: 'Sun, 12 Jun 2022 22:11:56 GMT',
      vary: 'Accept,Accept-Encoding',
      'cache-control': 'max-age=0',
      etag: '691d4344a74c713173f10e61932c614b',
      'x-content-type-options': 'nosniff',
      'x-request-id': 'c8e5d580-b621-4837-bc07-0420c2a882f8',
      'x-frame-options': 'DENY',
      'x-xss-protection': '1; mode=block',
      'access-control-allow-origin': '*',
      'access-control-allow-headers': 'Content-Type',
      'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
      'access-control-max-age': '86400',
      'x-cache': 'Error from cloudfront',
      via: '1.1 23f94cbeaed412b16bcf3002e9a59ac0.cloudfront.net (CloudFront)',
      'x-amz-cf-pop': 'EZE51-C1',
      'x-amz-cf-id': 'yhjIG4BRC_OSy-leSWjEAL167BEOTZcH4ns_UQsfSCC6fBs8akaZTw=='
    },
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [Function: httpAdapter],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        }
      },
      validateStatus: [Function: validateStatus],
      headers: {
        Accept: 'application/json, text/plain, */*',
        access_token: 'APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
        'User-Agent': 'axios/0.27.2'
      },
      method: 'get',
      url: 'https://api.mercadolibre.com/shipments/41441506905',
      data: undefined
    },
    request: <ref *2> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        prefinish: [Function: requestOnPrefinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadolibre.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadolibre.com',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 459,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: null,
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            access_token: 'APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: 443,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 02 fe 1c a2 ec e4 71 f4 69 0b ec df 0a 9d c3 d9 f0 b8 56 15 df e2 2b f0 d7 38 1f 54 7a ca 29 cf 04 ... 1936 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/shipments/41441506905',
          _defaultAgent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 02 fe 1c a2 ec e4 71 f4 69 0b ec df 0a 9d c3 d9 f0 b8 56 15 df e2 2b f0 d7 38 1f 54 7a ca 29 cf 04 ... 1936 more bytes>
              },
              list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'api.mercadolibre.com',
          servername: 'api.mercadolibre.com',
          _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        },
        [Symbol(RequestTimeout)]: undefined
      },
      _header: 'GET /shipments/41441506905 HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'access_token: APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378\r\n' +
        'User-Agent: axios/0.27.2\r\n' +
        'Host: api.mercadolibre.com\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: <ref *3> Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype] { path: null },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'api.mercadolibre.com:443:::::::::::::::::::::': [
            <ref *1> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: true,
                session: undefined,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'api.mercadolibre.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 10,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'api.mercadolibre.com',
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: false,
                errored: null,
                closed: false,
                closeEmitted: false,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: true,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 1,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular *2],
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 459,
              [Symbol(kHandle)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(connect-options)]: {
                rejectUnauthorized: true,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                maxRedirects: 21,
                maxBodyLength: 10485760,
                protocol: 'https:',
                path: null,
                method: 'GET',
                headers: {
                  Accept: 'application/json, text/plain, */*',
                  access_token: 'APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                  'User-Agent': 'axios/0.27.2'
                },
                agent: undefined,
                agents: { http: undefined, https: undefined },
                auth: undefined,
                hostname: 'api.mercadolibre.com',
                port: 443,
                nativeProtocols: <ref *4> {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: [Circular *3],
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/shipments/41441506905',
                _defaultAgent: [Circular *3],
                host: 'api.mercadolibre.com',
                servername: 'api.mercadolibre.com',
                _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
                encoding: null,
                singleUse: true
              },
              [Symbol(RequestTimeout)]: undefined
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        maxCachedSessions: 100,
        _sessionCache: {
          map: {
            'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 02 fe 1c a2 ec e4 71 f4 69 0b ec df 0a 9d c3 d9 f0 b8 56 15 df e2 2b f0 d7 38 1f 54 7a ca 29 cf 04 ... 1936 more bytes>
          },
          list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
        },
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      path: '/shipments/41441506905',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          constructed: true,
          sync: false,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          destroyed: true,
          errored: null,
          closed: true,
          closeEmitted: true,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          data: [Function: handleStreamData],
          aborted: [Function: handlerStreamAborted],
          error: [Function: handleStreamError]
        },
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'api.mercadolibre.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'api.mercadolibre.com',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 459,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: 10485760,
            protocol: 'https:',
            path: null,
            method: 'GET',
            headers: {
              Accept: 'application/json, text/plain, */*',
              access_token: 'APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
              'User-Agent': 'axios/0.27.2'
            },
            agent: undefined,
            agents: { http: undefined, https: undefined },
            auth: undefined,
            hostname: 'api.mercadolibre.com',
            port: 443,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] { path: null },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 02 fe 1c a2 ec e4 71 f4 69 0b ec df 0a 9d c3 d9 f0 b8 56 15 df e2 2b f0 d7 38 1f 54 7a ca 29 cf 04 ... 1936 more bytes>
                    },
                    list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/shipments/41441506905',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 02 fe 1c a2 ec e4 71 f4 69 0b ec df 0a 9d c3 d9 f0 b8 56 15 df e2 2b f0 d7 38 1f 54 7a ca 29 cf 04 ... 1936 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'api.mercadolibre.com',
            servername: 'api.mercadolibre.com',
            _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          },
          [Symbol(RequestTimeout)]: undefined
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
          'Content-Type',
          'application/json;charset=utf-8',
          'Transfer-Encoding',
          'chunked',
          'Connection',
          'close',
          'Date',
          'Sun, 12 Jun 2022 22:11:56 GMT',
          'vary',
          'Accept,Accept-Encoding',
          'cache-control',
          'max-age=0',
          'etag',
          '691d4344a74c713173f10e61932c614b',
          'X-Content-Type-Options',
          'nosniff',
          'X-Request-Id',
          'c8e5d580-b621-4837-bc07-0420c2a882f8',
          'X-Frame-Options',
          'DENY',
          'X-XSS-Protection',
          '1; mode=block',
          'Access-Control-Allow-Origin',
          '*',
          'Access-Control-Allow-Headers',
          'Content-Type',
          'Access-Control-Allow-Methods',
          'PUT, GET, POST, DELETE, OPTIONS',
          'Access-Control-Max-Age',
          '86400',
          'X-Cache',
          'Error from cloudfront',
          'Via',
          '1.1 23f94cbeaed412b16bcf3002e9a59ac0.cloudfront.net (CloudFront)',
          'X-Amz-Cf-Pop',
          'EZE51-C1',
          'X-Amz-Cf-Id',
          'yhjIG4BRC_OSy-leSWjEAL167BEOTZcH4ns_UQsfSCC6fBs8akaZTw=='
        ],
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 400,
        statusMessage: 'Bad Request',
        client: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'api.mercadolibre.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'api.mercadolibre.com',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 459,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: 10485760,
            protocol: 'https:',
            path: null,
            method: 'GET',
            headers: {
              Accept: 'application/json, text/plain, */*',
              access_token: 'APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
              'User-Agent': 'axios/0.27.2'
            },
            agent: undefined,
            agents: { http: undefined, https: undefined },
            auth: undefined,
            hostname: 'api.mercadolibre.com',
            port: 443,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] { path: null },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 02 fe 1c a2 ec e4 71 f4 69 0b ec df 0a 9d c3 d9 f0 b8 56 15 df e2 2b f0 d7 38 1f 54 7a ca 29 cf 04 ... 1936 more bytes>
                    },
                    list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/shipments/41441506905',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 02 fe 1c a2 ec e4 71 f4 69 0b ec df 0a 9d c3 d9 f0 b8 56 15 df e2 2b f0 d7 38 1f 54 7a ca 29 cf 04 ... 1936 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'api.mercadolibre.com',
            servername: 'api.mercadolibre.com',
            _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          },
          [Symbol(RequestTimeout)]: undefined
        },
        _consuming: true,
        _dumped: false,
        req: [Circular *2],
        responseUrl: 'https://api.mercadolibre.com/shipments/41441506905',
        redirects: [],
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
          'content-type': 'application/json;charset=utf-8',
          'transfer-encoding': 'chunked',
          connection: 'close',
          date: 'Sun, 12 Jun 2022 22:11:56 GMT',
          vary: 'Accept,Accept-Encoding',
          'cache-control': 'max-age=0',
          etag: '691d4344a74c713173f10e61932c614b',
          'x-content-type-options': 'nosniff',
          'x-request-id': 'c8e5d580-b621-4837-bc07-0420c2a882f8',
          'x-frame-options': 'DENY',
          'x-xss-protection': '1; mode=block',
          'access-control-allow-origin': '*',
          'access-control-allow-headers': 'Content-Type',
          'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
          'access-control-max-age': '86400',
          'x-cache': 'Error from cloudfront',
          via: '1.1 23f94cbeaed412b16bcf3002e9a59ac0.cloudfront.net (CloudFront)',
          'x-amz-cf-pop': 'EZE51-C1',
          'x-amz-cf-id': 'yhjIG4BRC_OSy-leSWjEAL167BEOTZcH4ns_UQsfSCC6fBs8akaZTw=='
        },
        [Symbol(kHeadersCount)]: 38,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'api.mercadolibre.com',
      protocol: 'https:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError],
          socket: [Function: handleRequestSocket]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: '/shipments/41441506905',
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            access_token: 'APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: null,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [
                    <ref *1> TLSSocket {
                      _tlsOptions: {
                        allowHalfOpen: undefined,
                        pipe: false,
                        secureContext: SecureContext { context: SecureContext {} },
                        isServer: false,
                        requestCert: true,
                        rejectUnauthorized: true,
                        session: undefined,
                        ALPNProtocols: undefined,
                        requestOCSP: undefined,
                        enableTrace: undefined,
                        pskCallback: undefined,
                        highWaterMark: undefined,
                        onread: undefined,
                        signal: undefined
                      },
                      _secureEstablished: true,
                      _securePending: false,
                      _newSessionPending: false,
                      _controlReleased: true,
                      secureConnecting: false,
                      _SNICallback: null,
                      servername: 'api.mercadolibre.com',
                      alpnProtocol: false,
                      authorized: true,
                      authorizationError: null,
                      encrypted: true,
                      _events: [Object: null prototype] {
                        close: [
                          [Function: onSocketCloseDestroySSL],
                          [Function: bound onceWrapper] {
                            listener: [Function (anonymous)]
                          },
                          [Function: onClose],
                          [Function: socketCloseListener]
                        ],
                        end: [Function: onReadableStreamEnd],
                        newListener: [Function: keylogNewListener],
                        secure: [Function: onConnectSecure],
                        session: [Function (anonymous)],
                        free: [Function: onFree],
                        timeout: [Function: onTimeout],
                        agentRemove: [Function: onRemove],
                        error: [Function: socketErrorListener],
                        finish: [Function: bound onceWrapper] {
                          listener: [Function: destroy]
                        }
                      },
                      _eventsCount: 10,
                      connecting: false,
                      _hadError: false,
                      _parent: null,
                      _host: 'api.mercadolibre.com',
                      _readableState: ReadableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        buffer: BufferList { head: null, tail: null, length: 0 },
                        length: 0,
                        pipes: [],
                        flowing: true,
                        ended: false,
                        endEmitted: false,
                        reading: true,
                        constructed: true,
                        sync: false,
                        needReadable: true,
                        emittedReadable: false,
                        readableListening: false,
                        resumeScheduled: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        destroyed: false,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        defaultEncoding: 'utf8',
                        awaitDrainWriters: null,
                        multiAwaitDrain: false,
                        readingMore: false,
                        dataEmitted: true,
                        decoder: null,
                        encoding: null,
                        [Symbol(kPaused)]: false
                      },
                      _maxListeners: undefined,
                      _writableState: WritableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        finalCalled: true,
                        needDrain: false,
                        ending: true,
                        ended: true,
                        finished: false,
                        destroyed: false,
                        decodeStrings: false,
                        defaultEncoding: 'utf8',
                        length: 0,
                        writing: false,
                        corked: 0,
                        sync: false,
                        bufferProcessing: false,
                        onwrite: [Function: bound onwrite],
                        writecb: null,
                        writelen: 0,
                        afterWriteTickInfo: null,
                        buffered: [],
                        bufferedIndex: 0,
                        allBuffers: true,
                        allNoop: true,
                        pendingcb: 1,
                        constructed: true,
                        prefinished: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        [Symbol(kOnFinished)]: []
                      },
                      allowHalfOpen: false,
                      _sockname: null,
                      _pendingData: null,
                      _pendingEncoding: '',
                      server: undefined,
                      _server: null,
                      ssl: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _requestCert: true,
                      _rejectUnauthorized: true,
                      parser: null,
                      _httpMessage: [Circular *2],
                      [Symbol(res)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(verified)]: true,
                      [Symbol(pendingSession)]: null,
                      [Symbol(async_id_symbol)]: 459,
                      [Symbol(kHandle)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(lastWriteQueueSize)]: 0,
                      [Symbol(timeout)]: null,
                      [Symbol(kBuffer)]: null,
                      [Symbol(kBufferCb)]: null,
                      [Symbol(kBufferGen)]: null,
                      [Symbol(kCapture)]: false,
                      [Symbol(kSetNoDelay)]: false,
                      [Symbol(kSetKeepAlive)]: true,
                      [Symbol(kSetKeepAliveInitialDelay)]: 60,
                      [Symbol(kBytesRead)]: 0,
                      [Symbol(kBytesWritten)]: 0,
                      [Symbol(connect-options)]: {
                        rejectUnauthorized: true,
                        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                        checkServerIdentity: [Function: checkServerIdentity],
                        minDHSize: 1024,
                        maxRedirects: 21,
                        maxBodyLength: 10485760,
                        protocol: 'https:',
                        path: null,
                        method: 'GET',
                        headers: {
                          Accept: 'application/json, text/plain, */*',
                          access_token: 'APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                          'User-Agent': 'axios/0.27.2'
                        },
                        agent: undefined,
                        agents: { http: undefined, https: undefined },
                        auth: undefined,
                        hostname: 'api.mercadolibre.com',
                        port: 443,
                        nativeProtocols: [Circular *4],
                        pathname: '/shipments/41441506905',
                        _defaultAgent: [Circular *3],
                        host: 'api.mercadolibre.com',
                        servername: 'api.mercadolibre.com',
                        _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
                        encoding: null,
                        singleUse: true
                      },
                      [Symbol(RequestTimeout)]: undefined
                    }
                  ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 02 fe 1c a2 ec e4 71 f4 69 0b ec df 0a 9d c3 d9 f0 b8 56 15 df e2 2b f0 d7 38 1f 54 7a ca 29 cf 04 ... 1936 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/shipments/41441506905'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 0,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *2],
        _currentUrl: 'https://api.mercadolibre.com/shipments/41441506905',
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        access_token: [
          'access_token',
          'APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378'
        ],
        'user-agent': [ 'User-Agent', 'axios/0.27.2' ],
        host: [ 'Host', 'api.mercadolibre.com' ]
      }
    },
    data: {
      error: 'invalid_caller_id',
      message: 'Invalid caller.id: null',
      status: 400
    }
  },
  level: 'error',
  timestamp: '2022-06-12T22:11:56.938Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:12:48.812Z'
}
{
  message: 'Request failed with status code 400',
  name: 'AxiosError',
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [Function: httpAdapter],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] {
        LINE_BREAK: '\r\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      }
    },
    validateStatus: [Function: validateStatus],
    headers: {
      Accept: 'application/json, text/plain, */*',
      access_token: 'APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
      'User-Agent': 'axios/0.27.2'
    },
    method: 'get',
    url: 'https://api.mercadolibre.com/shipments/41441506905',
    data: undefined
  },
  request: <ref *2> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      prefinish: [Function: requestOnPrefinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: false,
    socket: <ref *1> TLSSocket {
      _tlsOptions: {
        allowHalfOpen: undefined,
        pipe: false,
        secureContext: SecureContext { context: SecureContext {} },
        isServer: false,
        requestCert: true,
        rejectUnauthorized: true,
        session: undefined,
        ALPNProtocols: undefined,
        requestOCSP: undefined,
        enableTrace: undefined,
        pskCallback: undefined,
        highWaterMark: undefined,
        onread: undefined,
        signal: undefined
      },
      _secureEstablished: true,
      _securePending: false,
      _newSessionPending: false,
      _controlReleased: true,
      secureConnecting: false,
      _SNICallback: null,
      servername: 'api.mercadolibre.com',
      alpnProtocol: false,
      authorized: true,
      authorizationError: null,
      encrypted: true,
      _events: [Object: null prototype] {
        close: [
          [Function: onSocketCloseDestroySSL],
          [Function: bound onceWrapper] {
            listener: [Function (anonymous)]
          },
          [Function: onClose],
          [Function: socketCloseListener]
        ],
        end: [Function: onReadableStreamEnd],
        newListener: [Function: keylogNewListener],
        secure: [Function: onConnectSecure],
        session: [Function (anonymous)],
        free: [Function: onFree],
        timeout: [Function: onTimeout],
        agentRemove: [Function: onRemove],
        error: [Function: socketErrorListener],
        finish: [Function: bound onceWrapper] { listener: [Function: destroy] }
      },
      _eventsCount: 10,
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'api.mercadolibre.com',
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        constructed: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: true,
        needDrain: false,
        ending: true,
        ended: true,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: undefined,
      _server: null,
      ssl: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      _requestCert: true,
      _rejectUnauthorized: true,
      parser: null,
      _httpMessage: [Circular *2],
      [Symbol(res)]: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(verified)]: true,
      [Symbol(pendingSession)]: null,
      [Symbol(async_id_symbol)]: 460,
      [Symbol(kHandle)]: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: false,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 60,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(connect-options)]: {
        rejectUnauthorized: true,
        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
        checkServerIdentity: [Function: checkServerIdentity],
        minDHSize: 1024,
        maxRedirects: 21,
        maxBodyLength: 10485760,
        protocol: 'https:',
        path: null,
        method: 'GET',
        headers: {
          Accept: 'application/json, text/plain, */*',
          access_token: 'APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
          'User-Agent': 'axios/0.27.2'
        },
        agent: undefined,
        agents: { http: undefined, https: undefined },
        auth: undefined,
        hostname: 'api.mercadolibre.com',
        port: 443,
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 01 0f f1 6f b7 e6 9e 50 71 f3 a3 66 96 a1 0e 3c 0f bb 77 9b 5e 1e 44 60 9e 51 1b 4e cc c2 f5 28 04 ... 1937 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/shipments/41441506905',
        _defaultAgent: Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] { path: null },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          maxCachedSessions: 100,
          _sessionCache: {
            map: {
              'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 01 0f f1 6f b7 e6 9e 50 71 f3 a3 66 96 a1 0e 3c 0f bb 77 9b 5e 1e 44 60 9e 51 1b 4e cc c2 f5 28 04 ... 1937 more bytes>
            },
            list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
          },
          [Symbol(kCapture)]: false
        },
        host: 'api.mercadolibre.com',
        servername: 'api.mercadolibre.com',
        _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
        encoding: null,
        singleUse: true
      },
      [Symbol(RequestTimeout)]: undefined
    },
    _header: 'GET /shipments/41441506905 HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'access_token: APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378\r\n' +
      'User-Agent: axios/0.27.2\r\n' +
      'Host: api.mercadolibre.com\r\n' +
      'Connection: close\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: <ref *3> Agent {
      _events: [Object: null prototype] {
        free: [Function (anonymous)],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] { path: null },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {
        'api.mercadolibre.com:443:::::::::::::::::::::': [
          <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'api.mercadolibre.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 10,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'api.mercadolibre.com',
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *2],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 460,
            [Symbol(kHandle)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              maxRedirects: 21,
              maxBodyLength: 10485760,
              protocol: 'https:',
              path: null,
              method: 'GET',
              headers: {
                Accept: 'application/json, text/plain, */*',
                access_token: 'APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                'User-Agent': 'axios/0.27.2'
              },
              agent: undefined,
              agents: { http: undefined, https: undefined },
              auth: undefined,
              hostname: 'api.mercadolibre.com',
              port: 443,
              nativeProtocols: {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: [Circular *3],
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/shipments/41441506905',
              _defaultAgent: [Circular *3],
              host: 'api.mercadolibre.com',
              servername: 'api.mercadolibre.com',
              _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            },
            [Symbol(RequestTimeout)]: undefined
          }
        ]
      },
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      maxCachedSessions: 100,
      _sessionCache: {
        map: {
          'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 01 0f f1 6f b7 e6 9e 50 71 f3 a3 66 96 a1 0e 3c 0f bb 77 9b 5e 1e 44 60 9e 51 1b 4e cc c2 f5 28 04 ... 1937 more bytes>
        },
        list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
      },
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    path: '/shipments/41441506905',
    _ended: true,
    res: IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        constructed: true,
        sync: false,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        destroyed: true,
        errored: null,
        closed: true,
        closeEmitted: true,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
        data: [Function: handleStreamData],
        aborted: [Function: handlerStreamAborted],
        error: [Function: handleStreamError]
      },
      _eventsCount: 4,
      _maxListeners: undefined,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadolibre.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadolibre.com',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 460,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: null,
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            access_token: 'APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: 443,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 01 0f f1 6f b7 e6 9e 50 71 f3 a3 66 96 a1 0e 3c 0f bb 77 9b 5e 1e 44 60 9e 51 1b 4e cc c2 f5 28 04 ... 1937 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/shipments/41441506905',
          _defaultAgent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 01 0f f1 6f b7 e6 9e 50 71 f3 a3 66 96 a1 0e 3c 0f bb 77 9b 5e 1e 44 60 9e 51 1b 4e cc c2 f5 28 04 ... 1937 more bytes>
              },
              list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'api.mercadolibre.com',
          servername: 'api.mercadolibre.com',
          _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        },
        [Symbol(RequestTimeout)]: undefined
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [
        'Content-Type',
        'application/json;charset=utf-8',
        'Transfer-Encoding',
        'chunked',
        'Connection',
        'close',
        'Date',
        'Sun, 12 Jun 2022 22:12:50 GMT',
        'vary',
        'Accept,Accept-Encoding',
        'cache-control',
        'max-age=0',
        'etag',
        '691d4344a74c713173f10e61932c614b',
        'X-Content-Type-Options',
        'nosniff',
        'X-Request-Id',
        '00244807-16e1-4c6b-a00b-a29453aaa7ff',
        'X-Frame-Options',
        'DENY',
        'X-XSS-Protection',
        '1; mode=block',
        'Access-Control-Allow-Origin',
        '*',
        'Access-Control-Allow-Headers',
        'Content-Type',
        'Access-Control-Allow-Methods',
        'PUT, GET, POST, DELETE, OPTIONS',
        'Access-Control-Max-Age',
        '86400',
        'X-Cache',
        'Error from cloudfront',
        'Via',
        '1.1 b375de1f20c1e859438860f1d5e105f4.cloudfront.net (CloudFront)',
        'X-Amz-Cf-Pop',
        'EZE50-P1',
        'X-Amz-Cf-Id',
        'eC5LllN9HS0QX3wWKRordNzwLu_nLZjxK8JWzlIV60EZVSw_ncef-g=='
      ],
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 400,
      statusMessage: 'Bad Request',
      client: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadolibre.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadolibre.com',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 460,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: null,
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            access_token: 'APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: 443,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 01 0f f1 6f b7 e6 9e 50 71 f3 a3 66 96 a1 0e 3c 0f bb 77 9b 5e 1e 44 60 9e 51 1b 4e cc c2 f5 28 04 ... 1937 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/shipments/41441506905',
          _defaultAgent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 01 0f f1 6f b7 e6 9e 50 71 f3 a3 66 96 a1 0e 3c 0f bb 77 9b 5e 1e 44 60 9e 51 1b 4e cc c2 f5 28 04 ... 1937 more bytes>
              },
              list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'api.mercadolibre.com',
          servername: 'api.mercadolibre.com',
          _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        },
        [Symbol(RequestTimeout)]: undefined
      },
      _consuming: true,
      _dumped: false,
      req: [Circular *2],
      responseUrl: 'https://api.mercadolibre.com/shipments/41441506905',
      redirects: [],
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: {
        'content-type': 'application/json;charset=utf-8',
        'transfer-encoding': 'chunked',
        connection: 'close',
        date: 'Sun, 12 Jun 2022 22:12:50 GMT',
        vary: 'Accept,Accept-Encoding',
        'cache-control': 'max-age=0',
        etag: '691d4344a74c713173f10e61932c614b',
        'x-content-type-options': 'nosniff',
        'x-request-id': '00244807-16e1-4c6b-a00b-a29453aaa7ff',
        'x-frame-options': 'DENY',
        'x-xss-protection': '1; mode=block',
        'access-control-allow-origin': '*',
        'access-control-allow-headers': 'Content-Type',
        'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
        'access-control-max-age': '86400',
        'x-cache': 'Error from cloudfront',
        via: '1.1 b375de1f20c1e859438860f1d5e105f4.cloudfront.net (CloudFront)',
        'x-amz-cf-pop': 'EZE50-P1',
        'x-amz-cf-id': 'eC5LllN9HS0QX3wWKRordNzwLu_nLZjxK8JWzlIV60EZVSw_ncef-g=='
      },
      [Symbol(kHeadersCount)]: 38,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: false,
    host: 'api.mercadolibre.com',
    protocol: 'https:',
    _redirectable: Writable {
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      _events: [Object: null prototype] {
        response: [Function: handleResponse],
        error: [Function: handleRequestError],
        socket: [Function: handleRequestSocket]
      },
      _eventsCount: 3,
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: 10485760,
        protocol: 'https:',
        path: '/shipments/41441506905',
        method: 'GET',
        headers: {
          Accept: 'application/json, text/plain, */*',
          access_token: 'APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
          'User-Agent': 'axios/0.27.2'
        },
        agent: undefined,
        agents: { http: undefined, https: undefined },
        auth: undefined,
        hostname: 'api.mercadolibre.com',
        port: null,
        nativeProtocols: <ref *4> {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [
                  <ref *1> TLSSocket {
                    _tlsOptions: {
                      allowHalfOpen: undefined,
                      pipe: false,
                      secureContext: SecureContext { context: SecureContext {} },
                      isServer: false,
                      requestCert: true,
                      rejectUnauthorized: true,
                      session: undefined,
                      ALPNProtocols: undefined,
                      requestOCSP: undefined,
                      enableTrace: undefined,
                      pskCallback: undefined,
                      highWaterMark: undefined,
                      onread: undefined,
                      signal: undefined
                    },
                    _secureEstablished: true,
                    _securePending: false,
                    _newSessionPending: false,
                    _controlReleased: true,
                    secureConnecting: false,
                    _SNICallback: null,
                    servername: 'api.mercadolibre.com',
                    alpnProtocol: false,
                    authorized: true,
                    authorizationError: null,
                    encrypted: true,
                    _events: [Object: null prototype] {
                      close: [
                        [Function: onSocketCloseDestroySSL],
                        [Function: bound onceWrapper] {
                          listener: [Function (anonymous)]
                        },
                        [Function: onClose],
                        [Function: socketCloseListener]
                      ],
                      end: [Function: onReadableStreamEnd],
                      newListener: [Function: keylogNewListener],
                      secure: [Function: onConnectSecure],
                      session: [Function (anonymous)],
                      free: [Function: onFree],
                      timeout: [Function: onTimeout],
                      agentRemove: [Function: onRemove],
                      error: [Function: socketErrorListener],
                      finish: [Function: bound onceWrapper] {
                        listener: [Function: destroy]
                      }
                    },
                    _eventsCount: 10,
                    connecting: false,
                    _hadError: false,
                    _parent: null,
                    _host: 'api.mercadolibre.com',
                    _readableState: ReadableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      buffer: BufferList { head: null, tail: null, length: 0 },
                      length: 0,
                      pipes: [],
                      flowing: true,
                      ended: false,
                      endEmitted: false,
                      reading: true,
                      constructed: true,
                      sync: false,
                      needReadable: true,
                      emittedReadable: false,
                      readableListening: false,
                      resumeScheduled: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      destroyed: false,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      defaultEncoding: 'utf8',
                      awaitDrainWriters: null,
                      multiAwaitDrain: false,
                      readingMore: false,
                      dataEmitted: true,
                      decoder: null,
                      encoding: null,
                      [Symbol(kPaused)]: false
                    },
                    _maxListeners: undefined,
                    _writableState: WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      finalCalled: true,
                      needDrain: false,
                      ending: true,
                      ended: true,
                      finished: false,
                      destroyed: false,
                      decodeStrings: false,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: false,
                      bufferProcessing: false,
                      onwrite: [Function: bound onwrite],
                      writecb: null,
                      writelen: 0,
                      afterWriteTickInfo: null,
                      buffered: [],
                      bufferedIndex: 0,
                      allBuffers: true,
                      allNoop: true,
                      pendingcb: 1,
                      constructed: true,
                      prefinished: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      [Symbol(kOnFinished)]: []
                    },
                    allowHalfOpen: false,
                    _sockname: null,
                    _pendingData: null,
                    _pendingEncoding: '',
                    server: undefined,
                    _server: null,
                    ssl: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _requestCert: true,
                    _rejectUnauthorized: true,
                    parser: null,
                    _httpMessage: [Circular *2],
                    [Symbol(res)]: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    [Symbol(verified)]: true,
                    [Symbol(pendingSession)]: null,
                    [Symbol(async_id_symbol)]: 460,
                    [Symbol(kHandle)]: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    [Symbol(lastWriteQueueSize)]: 0,
                    [Symbol(timeout)]: null,
                    [Symbol(kBuffer)]: null,
                    [Symbol(kBufferCb)]: null,
                    [Symbol(kBufferGen)]: null,
                    [Symbol(kCapture)]: false,
                    [Symbol(kSetNoDelay)]: false,
                    [Symbol(kSetKeepAlive)]: true,
                    [Symbol(kSetKeepAliveInitialDelay)]: 60,
                    [Symbol(kBytesRead)]: 0,
                    [Symbol(kBytesWritten)]: 0,
                    [Symbol(connect-options)]: {
                      rejectUnauthorized: true,
                      ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                      checkServerIdentity: [Function: checkServerIdentity],
                      minDHSize: 1024,
                      maxRedirects: 21,
                      maxBodyLength: 10485760,
                      protocol: 'https:',
                      path: null,
                      method: 'GET',
                      headers: {
                        Accept: 'application/json, text/plain, */*',
                        access_token: 'APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                        'User-Agent': 'axios/0.27.2'
                      },
                      agent: undefined,
                      agents: { http: undefined, https: undefined },
                      auth: undefined,
                      hostname: 'api.mercadolibre.com',
                      port: 443,
                      nativeProtocols: [Circular *4],
                      pathname: '/shipments/41441506905',
                      _defaultAgent: [Circular *3],
                      host: 'api.mercadolibre.com',
                      servername: 'api.mercadolibre.com',
                      _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
                      encoding: null,
                      singleUse: true
                    },
                    [Symbol(RequestTimeout)]: undefined
                  }
                ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 01 0f f1 6f b7 e6 9e 50 71 f3 a3 66 96 a1 0e 3c 0f bb 77 9b 5e 1e 44 60 9e 51 1b 4e cc c2 f5 28 04 ... 1937 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/shipments/41441506905'
      },
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *2],
      _currentUrl: 'https://api.mercadolibre.com/shipments/41441506905',
      [Symbol(kCapture)]: false
    },
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [ 'Accept', 'application/json, text/plain, */*' ],
      access_token: [
        'access_token',
        'APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378'
      ],
      'user-agent': [ 'User-Agent', 'axios/0.27.2' ],
      host: [ 'Host', 'api.mercadolibre.com' ]
    }
  },
  response: {
    status: 400,
    statusText: 'Bad Request',
    headers: {
      'content-type': 'application/json;charset=utf-8',
      'transfer-encoding': 'chunked',
      connection: 'close',
      date: 'Sun, 12 Jun 2022 22:12:50 GMT',
      vary: 'Accept,Accept-Encoding',
      'cache-control': 'max-age=0',
      etag: '691d4344a74c713173f10e61932c614b',
      'x-content-type-options': 'nosniff',
      'x-request-id': '00244807-16e1-4c6b-a00b-a29453aaa7ff',
      'x-frame-options': 'DENY',
      'x-xss-protection': '1; mode=block',
      'access-control-allow-origin': '*',
      'access-control-allow-headers': 'Content-Type',
      'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
      'access-control-max-age': '86400',
      'x-cache': 'Error from cloudfront',
      via: '1.1 b375de1f20c1e859438860f1d5e105f4.cloudfront.net (CloudFront)',
      'x-amz-cf-pop': 'EZE50-P1',
      'x-amz-cf-id': 'eC5LllN9HS0QX3wWKRordNzwLu_nLZjxK8JWzlIV60EZVSw_ncef-g=='
    },
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [Function: httpAdapter],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        }
      },
      validateStatus: [Function: validateStatus],
      headers: {
        Accept: 'application/json, text/plain, */*',
        access_token: 'APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
        'User-Agent': 'axios/0.27.2'
      },
      method: 'get',
      url: 'https://api.mercadolibre.com/shipments/41441506905',
      data: undefined
    },
    request: <ref *2> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        prefinish: [Function: requestOnPrefinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadolibre.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadolibre.com',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 460,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: null,
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            access_token: 'APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: 443,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 01 0f f1 6f b7 e6 9e 50 71 f3 a3 66 96 a1 0e 3c 0f bb 77 9b 5e 1e 44 60 9e 51 1b 4e cc c2 f5 28 04 ... 1937 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/shipments/41441506905',
          _defaultAgent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 01 0f f1 6f b7 e6 9e 50 71 f3 a3 66 96 a1 0e 3c 0f bb 77 9b 5e 1e 44 60 9e 51 1b 4e cc c2 f5 28 04 ... 1937 more bytes>
              },
              list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'api.mercadolibre.com',
          servername: 'api.mercadolibre.com',
          _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        },
        [Symbol(RequestTimeout)]: undefined
      },
      _header: 'GET /shipments/41441506905 HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'access_token: APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378\r\n' +
        'User-Agent: axios/0.27.2\r\n' +
        'Host: api.mercadolibre.com\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: <ref *3> Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype] { path: null },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'api.mercadolibre.com:443:::::::::::::::::::::': [
            <ref *1> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: true,
                session: undefined,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'api.mercadolibre.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 10,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'api.mercadolibre.com',
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: false,
                errored: null,
                closed: false,
                closeEmitted: false,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: true,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 1,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular *2],
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 460,
              [Symbol(kHandle)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(connect-options)]: {
                rejectUnauthorized: true,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                maxRedirects: 21,
                maxBodyLength: 10485760,
                protocol: 'https:',
                path: null,
                method: 'GET',
                headers: {
                  Accept: 'application/json, text/plain, */*',
                  access_token: 'APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                  'User-Agent': 'axios/0.27.2'
                },
                agent: undefined,
                agents: { http: undefined, https: undefined },
                auth: undefined,
                hostname: 'api.mercadolibre.com',
                port: 443,
                nativeProtocols: <ref *4> {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: [Circular *3],
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/shipments/41441506905',
                _defaultAgent: [Circular *3],
                host: 'api.mercadolibre.com',
                servername: 'api.mercadolibre.com',
                _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
                encoding: null,
                singleUse: true
              },
              [Symbol(RequestTimeout)]: undefined
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        maxCachedSessions: 100,
        _sessionCache: {
          map: {
            'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 01 0f f1 6f b7 e6 9e 50 71 f3 a3 66 96 a1 0e 3c 0f bb 77 9b 5e 1e 44 60 9e 51 1b 4e cc c2 f5 28 04 ... 1937 more bytes>
          },
          list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
        },
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      path: '/shipments/41441506905',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          constructed: true,
          sync: false,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          destroyed: true,
          errored: null,
          closed: true,
          closeEmitted: true,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          data: [Function: handleStreamData],
          aborted: [Function: handlerStreamAborted],
          error: [Function: handleStreamError]
        },
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'api.mercadolibre.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'api.mercadolibre.com',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 460,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: 10485760,
            protocol: 'https:',
            path: null,
            method: 'GET',
            headers: {
              Accept: 'application/json, text/plain, */*',
              access_token: 'APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
              'User-Agent': 'axios/0.27.2'
            },
            agent: undefined,
            agents: { http: undefined, https: undefined },
            auth: undefined,
            hostname: 'api.mercadolibre.com',
            port: 443,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] { path: null },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 01 0f f1 6f b7 e6 9e 50 71 f3 a3 66 96 a1 0e 3c 0f bb 77 9b 5e 1e 44 60 9e 51 1b 4e cc c2 f5 28 04 ... 1937 more bytes>
                    },
                    list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/shipments/41441506905',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 01 0f f1 6f b7 e6 9e 50 71 f3 a3 66 96 a1 0e 3c 0f bb 77 9b 5e 1e 44 60 9e 51 1b 4e cc c2 f5 28 04 ... 1937 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'api.mercadolibre.com',
            servername: 'api.mercadolibre.com',
            _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          },
          [Symbol(RequestTimeout)]: undefined
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
          'Content-Type',
          'application/json;charset=utf-8',
          'Transfer-Encoding',
          'chunked',
          'Connection',
          'close',
          'Date',
          'Sun, 12 Jun 2022 22:12:50 GMT',
          'vary',
          'Accept,Accept-Encoding',
          'cache-control',
          'max-age=0',
          'etag',
          '691d4344a74c713173f10e61932c614b',
          'X-Content-Type-Options',
          'nosniff',
          'X-Request-Id',
          '00244807-16e1-4c6b-a00b-a29453aaa7ff',
          'X-Frame-Options',
          'DENY',
          'X-XSS-Protection',
          '1; mode=block',
          'Access-Control-Allow-Origin',
          '*',
          'Access-Control-Allow-Headers',
          'Content-Type',
          'Access-Control-Allow-Methods',
          'PUT, GET, POST, DELETE, OPTIONS',
          'Access-Control-Max-Age',
          '86400',
          'X-Cache',
          'Error from cloudfront',
          'Via',
          '1.1 b375de1f20c1e859438860f1d5e105f4.cloudfront.net (CloudFront)',
          'X-Amz-Cf-Pop',
          'EZE50-P1',
          'X-Amz-Cf-Id',
          'eC5LllN9HS0QX3wWKRordNzwLu_nLZjxK8JWzlIV60EZVSw_ncef-g=='
        ],
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 400,
        statusMessage: 'Bad Request',
        client: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'api.mercadolibre.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'api.mercadolibre.com',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 460,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: 10485760,
            protocol: 'https:',
            path: null,
            method: 'GET',
            headers: {
              Accept: 'application/json, text/plain, */*',
              access_token: 'APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
              'User-Agent': 'axios/0.27.2'
            },
            agent: undefined,
            agents: { http: undefined, https: undefined },
            auth: undefined,
            hostname: 'api.mercadolibre.com',
            port: 443,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] { path: null },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 01 0f f1 6f b7 e6 9e 50 71 f3 a3 66 96 a1 0e 3c 0f bb 77 9b 5e 1e 44 60 9e 51 1b 4e cc c2 f5 28 04 ... 1937 more bytes>
                    },
                    list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/shipments/41441506905',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 01 0f f1 6f b7 e6 9e 50 71 f3 a3 66 96 a1 0e 3c 0f bb 77 9b 5e 1e 44 60 9e 51 1b 4e cc c2 f5 28 04 ... 1937 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'api.mercadolibre.com',
            servername: 'api.mercadolibre.com',
            _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          },
          [Symbol(RequestTimeout)]: undefined
        },
        _consuming: true,
        _dumped: false,
        req: [Circular *2],
        responseUrl: 'https://api.mercadolibre.com/shipments/41441506905',
        redirects: [],
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
          'content-type': 'application/json;charset=utf-8',
          'transfer-encoding': 'chunked',
          connection: 'close',
          date: 'Sun, 12 Jun 2022 22:12:50 GMT',
          vary: 'Accept,Accept-Encoding',
          'cache-control': 'max-age=0',
          etag: '691d4344a74c713173f10e61932c614b',
          'x-content-type-options': 'nosniff',
          'x-request-id': '00244807-16e1-4c6b-a00b-a29453aaa7ff',
          'x-frame-options': 'DENY',
          'x-xss-protection': '1; mode=block',
          'access-control-allow-origin': '*',
          'access-control-allow-headers': 'Content-Type',
          'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
          'access-control-max-age': '86400',
          'x-cache': 'Error from cloudfront',
          via: '1.1 b375de1f20c1e859438860f1d5e105f4.cloudfront.net (CloudFront)',
          'x-amz-cf-pop': 'EZE50-P1',
          'x-amz-cf-id': 'eC5LllN9HS0QX3wWKRordNzwLu_nLZjxK8JWzlIV60EZVSw_ncef-g=='
        },
        [Symbol(kHeadersCount)]: 38,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'api.mercadolibre.com',
      protocol: 'https:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError],
          socket: [Function: handleRequestSocket]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: '/shipments/41441506905',
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            access_token: 'APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: null,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [
                    <ref *1> TLSSocket {
                      _tlsOptions: {
                        allowHalfOpen: undefined,
                        pipe: false,
                        secureContext: SecureContext { context: SecureContext {} },
                        isServer: false,
                        requestCert: true,
                        rejectUnauthorized: true,
                        session: undefined,
                        ALPNProtocols: undefined,
                        requestOCSP: undefined,
                        enableTrace: undefined,
                        pskCallback: undefined,
                        highWaterMark: undefined,
                        onread: undefined,
                        signal: undefined
                      },
                      _secureEstablished: true,
                      _securePending: false,
                      _newSessionPending: false,
                      _controlReleased: true,
                      secureConnecting: false,
                      _SNICallback: null,
                      servername: 'api.mercadolibre.com',
                      alpnProtocol: false,
                      authorized: true,
                      authorizationError: null,
                      encrypted: true,
                      _events: [Object: null prototype] {
                        close: [
                          [Function: onSocketCloseDestroySSL],
                          [Function: bound onceWrapper] {
                            listener: [Function (anonymous)]
                          },
                          [Function: onClose],
                          [Function: socketCloseListener]
                        ],
                        end: [Function: onReadableStreamEnd],
                        newListener: [Function: keylogNewListener],
                        secure: [Function: onConnectSecure],
                        session: [Function (anonymous)],
                        free: [Function: onFree],
                        timeout: [Function: onTimeout],
                        agentRemove: [Function: onRemove],
                        error: [Function: socketErrorListener],
                        finish: [Function: bound onceWrapper] {
                          listener: [Function: destroy]
                        }
                      },
                      _eventsCount: 10,
                      connecting: false,
                      _hadError: false,
                      _parent: null,
                      _host: 'api.mercadolibre.com',
                      _readableState: ReadableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        buffer: BufferList { head: null, tail: null, length: 0 },
                        length: 0,
                        pipes: [],
                        flowing: true,
                        ended: false,
                        endEmitted: false,
                        reading: true,
                        constructed: true,
                        sync: false,
                        needReadable: true,
                        emittedReadable: false,
                        readableListening: false,
                        resumeScheduled: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        destroyed: false,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        defaultEncoding: 'utf8',
                        awaitDrainWriters: null,
                        multiAwaitDrain: false,
                        readingMore: false,
                        dataEmitted: true,
                        decoder: null,
                        encoding: null,
                        [Symbol(kPaused)]: false
                      },
                      _maxListeners: undefined,
                      _writableState: WritableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        finalCalled: true,
                        needDrain: false,
                        ending: true,
                        ended: true,
                        finished: false,
                        destroyed: false,
                        decodeStrings: false,
                        defaultEncoding: 'utf8',
                        length: 0,
                        writing: false,
                        corked: 0,
                        sync: false,
                        bufferProcessing: false,
                        onwrite: [Function: bound onwrite],
                        writecb: null,
                        writelen: 0,
                        afterWriteTickInfo: null,
                        buffered: [],
                        bufferedIndex: 0,
                        allBuffers: true,
                        allNoop: true,
                        pendingcb: 1,
                        constructed: true,
                        prefinished: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        [Symbol(kOnFinished)]: []
                      },
                      allowHalfOpen: false,
                      _sockname: null,
                      _pendingData: null,
                      _pendingEncoding: '',
                      server: undefined,
                      _server: null,
                      ssl: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _requestCert: true,
                      _rejectUnauthorized: true,
                      parser: null,
                      _httpMessage: [Circular *2],
                      [Symbol(res)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(verified)]: true,
                      [Symbol(pendingSession)]: null,
                      [Symbol(async_id_symbol)]: 460,
                      [Symbol(kHandle)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(lastWriteQueueSize)]: 0,
                      [Symbol(timeout)]: null,
                      [Symbol(kBuffer)]: null,
                      [Symbol(kBufferCb)]: null,
                      [Symbol(kBufferGen)]: null,
                      [Symbol(kCapture)]: false,
                      [Symbol(kSetNoDelay)]: false,
                      [Symbol(kSetKeepAlive)]: true,
                      [Symbol(kSetKeepAliveInitialDelay)]: 60,
                      [Symbol(kBytesRead)]: 0,
                      [Symbol(kBytesWritten)]: 0,
                      [Symbol(connect-options)]: {
                        rejectUnauthorized: true,
                        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                        checkServerIdentity: [Function: checkServerIdentity],
                        minDHSize: 1024,
                        maxRedirects: 21,
                        maxBodyLength: 10485760,
                        protocol: 'https:',
                        path: null,
                        method: 'GET',
                        headers: {
                          Accept: 'application/json, text/plain, */*',
                          access_token: 'APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                          'User-Agent': 'axios/0.27.2'
                        },
                        agent: undefined,
                        agents: { http: undefined, https: undefined },
                        auth: undefined,
                        hostname: 'api.mercadolibre.com',
                        port: 443,
                        nativeProtocols: [Circular *4],
                        pathname: '/shipments/41441506905',
                        _defaultAgent: [Circular *3],
                        host: 'api.mercadolibre.com',
                        servername: 'api.mercadolibre.com',
                        _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
                        encoding: null,
                        singleUse: true
                      },
                      [Symbol(RequestTimeout)]: undefined
                    }
                  ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 01 0f f1 6f b7 e6 9e 50 71 f3 a3 66 96 a1 0e 3c 0f bb 77 9b 5e 1e 44 60 9e 51 1b 4e cc c2 f5 28 04 ... 1937 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/shipments/41441506905'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 0,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *2],
        _currentUrl: 'https://api.mercadolibre.com/shipments/41441506905',
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        access_token: [
          'access_token',
          'APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378'
        ],
        'user-agent': [ 'User-Agent', 'axios/0.27.2' ],
        host: [ 'Host', 'api.mercadolibre.com' ]
      }
    },
    data: {
      error: 'invalid_caller_id',
      message: 'Invalid caller.id: null',
      status: 400
    }
  },
  level: 'error',
  timestamp: '2022-06-12T22:12:50.893Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:15:05.123Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:15:22.850Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:15:25.597Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:15:55.448Z'
}
{
  code: 'EREQUEST',
  originalError: Error: Invalid column name 'undefined'.
      at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:382:19)
      at Connection.emit (node:events:527:28)
      at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
      at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
      at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
      at Readable.emit (node:events:527:28)
      at addChunk (node:internal/streams/readable:315:12)
      at readableAddChunk (node:internal/streams/readable:289:9)
      at Readable.push (node:internal/streams/readable:228:10)
      at next (node:internal/streams/from:98:31) {
    info: ErrorMessageToken {
      name: 'ERROR',
      handlerName: 'onErrorMessage',
      number: 207,
      state: 1,
      class: 16,
      message: "Invalid column name 'undefined'.",
      serverName: 'NBJMAUAS\\NEWMANAG',
      procName: '',
      lineNumber: 1
    }
  },
  name: 'RequestError',
  number: 207,
  lineNumber: 1,
  state: 1,
  class: 16,
  serverName: 'NBJMAUAS\\NEWMANAG',
  procName: '',
  precedingErrors: [],
  level: 'error',
  timestamp: '2022-06-12T22:15:58.531Z'
}
{ level: 'error', timestamp: '2022-06-12T22:15:58.545Z' }
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:17:04.004Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:17:19.569Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:17:55.027Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:18:09.784Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:18:13.852Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:18:40.762Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:18:44.562Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:18:47.346Z'
}
{
  code: 'EREQUEST',
  originalError: Error: Invalid column name 'undefined'.
      at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:382:19)
      at Connection.emit (node:events:527:28)
      at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
      at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
      at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
      at Readable.emit (node:events:527:28)
      at addChunk (node:internal/streams/readable:315:12)
      at readableAddChunk (node:internal/streams/readable:289:9)
      at Readable.push (node:internal/streams/readable:228:10)
      at next (node:internal/streams/from:98:31) {
    info: ErrorMessageToken {
      name: 'ERROR',
      handlerName: 'onErrorMessage',
      number: 207,
      state: 1,
      class: 16,
      message: "Invalid column name 'undefined'.",
      serverName: 'NBJMAUAS\\NEWMANAG',
      procName: '',
      lineNumber: 1
    }
  },
  name: 'RequestError',
  number: 207,
  lineNumber: 1,
  state: 1,
  class: 16,
  serverName: 'NBJMAUAS\\NEWMANAG',
  procName: '',
  precedingErrors: [],
  level: 'error',
  timestamp: '2022-06-12T22:19:00.581Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:20:11.052Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:20:17.278Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:20:19.223Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:20:41.396Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:20:44.279Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:20:47.699Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:21:05.649Z'
}
{
  code: 'EREQUEST',
  originalError: Error: Invalid column name 'undefined'.
      at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:382:19)
      at Connection.emit (node:events:527:28)
      at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
      at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
      at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
      at Readable.emit (node:events:527:28)
      at addChunk (node:internal/streams/readable:315:12)
      at readableAddChunk (node:internal/streams/readable:289:9)
      at Readable.push (node:internal/streams/readable:228:10)
      at next (node:internal/streams/from:98:31) {
    info: ErrorMessageToken {
      name: 'ERROR',
      handlerName: 'onErrorMessage',
      number: 207,
      state: 1,
      class: 16,
      message: "Invalid column name 'undefined'.",
      serverName: 'NBJMAUAS\\NEWMANAG',
      procName: '',
      lineNumber: 1
    }
  },
  name: 'RequestError',
  number: 207,
  lineNumber: 1,
  state: 1,
  class: 16,
  serverName: 'NBJMAUAS\\NEWMANAG',
  procName: '',
  precedingErrors: [],
  level: 'error',
  timestamp: '2022-06-12T22:21:08.659Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:21:31.467Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:21:34.248Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:22:16.294Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:22:19.731Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:22:28.798Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:22:30.746Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:22:33.426Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:22:34.783Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:22:38.166Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:22:41.082Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:22:45.533Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:22:47.707Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:22:50.450Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:22:53.400Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:22:58.381Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:23:01.663Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:23:02.863Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:23:04.137Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:23:05.694Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:23:09.066Z'
}
{
  code: 'EREQUEST',
  originalError: Error: Invalid column name 'undefined'.
      at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:382:19)
      at Connection.emit (node:events:527:28)
      at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
      at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
      at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
      at Readable.emit (node:events:527:28)
      at addChunk (node:internal/streams/readable:315:12)
      at readableAddChunk (node:internal/streams/readable:289:9)
      at Readable.push (node:internal/streams/readable:228:10)
      at next (node:internal/streams/from:98:31) {
    info: ErrorMessageToken {
      name: 'ERROR',
      handlerName: 'onErrorMessage',
      number: 207,
      state: 1,
      class: 16,
      message: "Invalid column name 'undefined'.",
      serverName: 'NBJMAUAS\\NEWMANAG',
      procName: '',
      lineNumber: 1
    }
  },
  name: 'RequestError',
  number: 207,
  lineNumber: 1,
  state: 1,
  class: 16,
  serverName: 'NBJMAUAS\\NEWMANAG',
  procName: '',
  precedingErrors: [],
  level: 'error',
  timestamp: '2022-06-12T22:23:23.719Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:23:43.043Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:23:44.718Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:23:46.099Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:23:48.616Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:23:52.415Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:24:37.033Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:24:38.291Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:24:46.652Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:24:52.561Z'
}
{
  code: 'EREQUEST',
  originalError: Error: Invalid column name 'undefined'.
      at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:382:19)
      at Connection.emit (node:events:527:28)
      at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
      at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
      at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
      at Readable.emit (node:events:527:28)
      at addChunk (node:internal/streams/readable:315:12)
      at readableAddChunk (node:internal/streams/readable:289:9)
      at Readable.push (node:internal/streams/readable:228:10)
      at next (node:internal/streams/from:98:31) {
    info: ErrorMessageToken {
      name: 'ERROR',
      handlerName: 'onErrorMessage',
      number: 207,
      state: 1,
      class: 16,
      message: "Invalid column name 'undefined'.",
      serverName: 'NBJMAUAS\\NEWMANAG',
      procName: '',
      lineNumber: 1
    }
  },
  name: 'RequestError',
  number: 207,
  lineNumber: 1,
  state: 1,
  class: 16,
  serverName: 'NBJMAUAS\\NEWMANAG',
  procName: '',
  precedingErrors: [],
  level: 'error',
  timestamp: '2022-06-12T22:25:00.199Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:25:26.980Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:26:14.469Z'
}
{
  code: 'EREQUEST',
  originalError: Error: Invalid column name 'undefined'.
      at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:382:19)
      at Connection.emit (node:events:527:28)
      at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
      at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
      at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
      at Readable.emit (node:events:527:28)
      at addChunk (node:internal/streams/readable:315:12)
      at readableAddChunk (node:internal/streams/readable:289:9)
      at Readable.push (node:internal/streams/readable:228:10)
      at next (node:internal/streams/from:98:31) {
    info: ErrorMessageToken {
      name: 'ERROR',
      handlerName: 'onErrorMessage',
      number: 207,
      state: 1,
      class: 16,
      message: "Invalid column name 'undefined'.",
      serverName: 'NBJMAUAS\\NEWMANAG',
      procName: '',
      lineNumber: 1
    }
  },
  name: 'RequestError',
  number: 207,
  lineNumber: 1,
  state: 1,
  class: 16,
  serverName: 'NBJMAUAS\\NEWMANAG',
  procName: '',
  precedingErrors: [],
  level: 'error',
  timestamp: '2022-06-12T22:26:19.037Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:26:41.684Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:29:43.789Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:29:45.454Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:30:44.438Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:30:54.526Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:32:06.577Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:32:17.230Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:32:22.487Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:32:26.206Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:32:29.522Z'
}
{
  message: RequestError
      at Request.userCallback (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:447:19)
      at Request.callback (D:\Proyectos\MeliFlex\node_modules\tedious\lib\request.js:205:14)
      at Parser.onEndOfMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:2882:22)
      at Object.onceWrapper (node:events:641:28)
      at Parser.emit (node:events:527:28)
      at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:32:12)
      at Readable.emit (node:events:527:28)
      at endReadableNT (node:internal/streams/readable:1345:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21) {
    code: 'EREQUEST',
    originalError: AggregateError
        at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:379:30)
        at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
        at Readable.emit (node:events:527:28)
        at addChunk (node:internal/streams/readable:315:12)
        at readableAddChunk (node:internal/streams/readable:289:9)
        at Readable.push (node:internal/streams/readable:228:10)
        at next (node:internal/streams/from:98:31)
        at processTicksAndRejections (node:internal/process/task_queues:96:5),
    number: undefined,
    lineNumber: undefined,
    state: undefined,
    class: undefined,
    serverName: undefined,
    procName: undefined,
    precedingErrors: [
      RequestError: Incorrect syntax near ', '.
          at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:384:15)
          at Connection.emit (node:events:527:28)
          at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
          at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
          at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
          at Readable.emit (node:events:527:28)
          at addChunk (node:internal/streams/readable:315:12)
          at readableAddChunk (node:internal/streams/readable:289:9)
          at Readable.push (node:internal/streams/readable:228:10)
          at next (node:internal/streams/from:98:31) {
        code: 'EREQUEST',
        originalError: Error: Incorrect syntax near ', '.
            at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:382:19)
            at Connection.emit (node:events:527:28)
            at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
            at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
            at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
            at Readable.emit (node:events:527:28)
            at addChunk (node:internal/streams/readable:315:12)
            at readableAddChunk (node:internal/streams/readable:289:9)
            at Readable.push (node:internal/streams/readable:228:10)
            at next (node:internal/streams/from:98:31) {
          info: ErrorMessageToken {
            name: 'ERROR',
            handlerName: 'onErrorMessage',
            number: 102,
            state: 1,
            class: 15,
            message: "Incorrect syntax near ', '.",
            serverName: 'NBJMAUAS\\NEWMANAG',
            procName: '',
            lineNumber: 2
          }
        },
        number: 102,
        lineNumber: 2,
        state: 1,
        class: 15,
        serverName: 'NBJMAUAS\\NEWMANAG',
        procName: ''
      },
      RequestError: Unclosed quotation mark after the character string ')'.
          at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:384:15)
          at Connection.emit (node:events:527:28)
          at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
          at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
          at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
          at Readable.emit (node:events:527:28)
          at addChunk (node:internal/streams/readable:315:12)
          at readableAddChunk (node:internal/streams/readable:289:9)
          at Readable.push (node:internal/streams/readable:228:10)
          at next (node:internal/streams/from:98:31) {
        code: 'EREQUEST',
        originalError: Error: Unclosed quotation mark after the character string ')'.
            at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:382:19)
            at Connection.emit (node:events:527:28)
            at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
            at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
            at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
            at Readable.emit (node:events:527:28)
            at addChunk (node:internal/streams/readable:315:12)
            at readableAddChunk (node:internal/streams/readable:289:9)
            at Readable.push (node:internal/streams/readable:228:10)
            at next (node:internal/streams/from:98:31) {
          info: ErrorMessageToken {
            name: 'ERROR',
            handlerName: 'onErrorMessage',
            number: 105,
            state: 1,
            class: 15,
            message: "Unclosed quotation mark after the character string ')'.",
            serverName: 'NBJMAUAS\\NEWMANAG',
            procName: '',
            lineNumber: 2
          }
        },
        number: 105,
        lineNumber: 2,
        state: 1,
        class: 15,
        serverName: 'NBJMAUAS\\NEWMANAG',
        procName: ''
      }
    ]
  },
  level: 'error',
  timestamp: '2022-06-12T22:32:41.676Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:33:14.420Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:33:37.244Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:33:45.808Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:33:50.658Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:34:16.099Z'
}
{
  message: RequestError
      at Request.userCallback (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:447:19)
      at Request.callback (D:\Proyectos\MeliFlex\node_modules\tedious\lib\request.js:205:14)
      at Parser.onEndOfMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:2882:22)
      at Object.onceWrapper (node:events:641:28)
      at Parser.emit (node:events:527:28)
      at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:32:12)
      at Readable.emit (node:events:527:28)
      at endReadableNT (node:internal/streams/readable:1345:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21) {
    code: 'EREQUEST',
    originalError: AggregateError
        at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:379:30)
        at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
        at Readable.emit (node:events:527:28)
        at addChunk (node:internal/streams/readable:315:12)
        at readableAddChunk (node:internal/streams/readable:289:9)
        at Readable.push (node:internal/streams/readable:228:10)
        at next (node:internal/streams/from:98:31)
        at processTicksAndRejections (node:internal/process/task_queues:96:5),
    number: undefined,
    lineNumber: undefined,
    state: undefined,
    class: undefined,
    serverName: undefined,
    procName: undefined,
    precedingErrors: [
      RequestError: Incorrect syntax near ', '.
          at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:384:15)
          at Connection.emit (node:events:527:28)
          at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
          at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
          at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
          at Readable.emit (node:events:527:28)
          at addChunk (node:internal/streams/readable:315:12)
          at readableAddChunk (node:internal/streams/readable:289:9)
          at Readable.push (node:internal/streams/readable:228:10)
          at next (node:internal/streams/from:98:31) {
        code: 'EREQUEST',
        originalError: Error: Incorrect syntax near ', '.
            at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:382:19)
            at Connection.emit (node:events:527:28)
            at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
            at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
            at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
            at Readable.emit (node:events:527:28)
            at addChunk (node:internal/streams/readable:315:12)
            at readableAddChunk (node:internal/streams/readable:289:9)
            at Readable.push (node:internal/streams/readable:228:10)
            at next (node:internal/streams/from:98:31) {
          info: ErrorMessageToken {
            name: 'ERROR',
            handlerName: 'onErrorMessage',
            number: 102,
            state: 1,
            class: 15,
            message: "Incorrect syntax near ', '.",
            serverName: 'NBJMAUAS\\NEWMANAG',
            procName: '',
            lineNumber: 2
          }
        },
        number: 102,
        lineNumber: 2,
        state: 1,
        class: 15,
        serverName: 'NBJMAUAS\\NEWMANAG',
        procName: ''
      },
      RequestError: Unclosed quotation mark after the character string ')'.
          at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:384:15)
          at Connection.emit (node:events:527:28)
          at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
          at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
          at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
          at Readable.emit (node:events:527:28)
          at addChunk (node:internal/streams/readable:315:12)
          at readableAddChunk (node:internal/streams/readable:289:9)
          at Readable.push (node:internal/streams/readable:228:10)
          at next (node:internal/streams/from:98:31) {
        code: 'EREQUEST',
        originalError: Error: Unclosed quotation mark after the character string ')'.
            at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:382:19)
            at Connection.emit (node:events:527:28)
            at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
            at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
            at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
            at Readable.emit (node:events:527:28)
            at addChunk (node:internal/streams/readable:315:12)
            at readableAddChunk (node:internal/streams/readable:289:9)
            at Readable.push (node:internal/streams/readable:228:10)
            at next (node:internal/streams/from:98:31) {
          info: ErrorMessageToken {
            name: 'ERROR',
            handlerName: 'onErrorMessage',
            number: 105,
            state: 1,
            class: 15,
            message: "Unclosed quotation mark after the character string ')'.",
            serverName: 'NBJMAUAS\\NEWMANAG',
            procName: '',
            lineNumber: 2
          }
        },
        number: 105,
        lineNumber: 2,
        state: 1,
        class: 15,
        serverName: 'NBJMAUAS\\NEWMANAG',
        procName: ''
      }
    ]
  },
  level: 'error',
  timestamp: '2022-06-12T22:34:44.093Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:36:29.691Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:36:34.965Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:36:40.325Z'
}
{
  message: RequestError
      at Request.userCallback (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:447:19)
      at Request.callback (D:\Proyectos\MeliFlex\node_modules\tedious\lib\request.js:205:14)
      at Parser.onEndOfMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:2882:22)
      at Object.onceWrapper (node:events:641:28)
      at Parser.emit (node:events:527:28)
      at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:32:12)
      at Readable.emit (node:events:527:28)
      at endReadableNT (node:internal/streams/readable:1345:12)
      at processTicksAndRejections (node:internal/process/task_queues:83:21) {
    code: 'EREQUEST',
    originalError: AggregateError
        at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:379:30)
        at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
        at Readable.emit (node:events:527:28)
        at addChunk (node:internal/streams/readable:315:12)
        at readableAddChunk (node:internal/streams/readable:289:9)
        at Readable.push (node:internal/streams/readable:228:10)
        at next (node:internal/streams/from:98:31)
        at processTicksAndRejections (node:internal/process/task_queues:96:5),
    number: undefined,
    lineNumber: undefined,
    state: undefined,
    class: undefined,
    serverName: undefined,
    procName: undefined,
    precedingErrors: [
      RequestError: Incorrect syntax near ', '.
          at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:384:15)
          at Connection.emit (node:events:527:28)
          at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
          at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
          at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
          at Readable.emit (node:events:527:28)
          at addChunk (node:internal/streams/readable:315:12)
          at readableAddChunk (node:internal/streams/readable:289:9)
          at Readable.push (node:internal/streams/readable:228:10)
          at next (node:internal/streams/from:98:31) {
        code: 'EREQUEST',
        originalError: Error: Incorrect syntax near ', '.
            at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:382:19)
            at Connection.emit (node:events:527:28)
            at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
            at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
            at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
            at Readable.emit (node:events:527:28)
            at addChunk (node:internal/streams/readable:315:12)
            at readableAddChunk (node:internal/streams/readable:289:9)
            at Readable.push (node:internal/streams/readable:228:10)
            at next (node:internal/streams/from:98:31) {
          info: ErrorMessageToken {
            name: 'ERROR',
            handlerName: 'onErrorMessage',
            number: 102,
            state: 1,
            class: 15,
            message: "Incorrect syntax near ', '.",
            serverName: 'NBJMAUAS\\NEWMANAG',
            procName: '',
            lineNumber: 2
          }
        },
        number: 102,
        lineNumber: 2,
        state: 1,
        class: 15,
        serverName: 'NBJMAUAS\\NEWMANAG',
        procName: ''
      },
      RequestError: Unclosed quotation mark after the character string ')'.
          at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:384:15)
          at Connection.emit (node:events:527:28)
          at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
          at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
          at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
          at Readable.emit (node:events:527:28)
          at addChunk (node:internal/streams/readable:315:12)
          at readableAddChunk (node:internal/streams/readable:289:9)
          at Readable.push (node:internal/streams/readable:228:10)
          at next (node:internal/streams/from:98:31) {
        code: 'EREQUEST',
        originalError: Error: Unclosed quotation mark after the character string ')'.
            at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:382:19)
            at Connection.emit (node:events:527:28)
            at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
            at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
            at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
            at Readable.emit (node:events:527:28)
            at addChunk (node:internal/streams/readable:315:12)
            at readableAddChunk (node:internal/streams/readable:289:9)
            at Readable.push (node:internal/streams/readable:228:10)
            at next (node:internal/streams/from:98:31) {
          info: ErrorMessageToken {
            name: 'ERROR',
            handlerName: 'onErrorMessage',
            number: 105,
            state: 1,
            class: 15,
            message: "Unclosed quotation mark after the character string ')'.",
            serverName: 'NBJMAUAS\\NEWMANAG',
            procName: '',
            lineNumber: 2
          }
        },
        number: 105,
        lineNumber: 2,
        state: 1,
        class: 15,
        serverName: 'NBJMAUAS\\NEWMANAG',
        procName: ''
      }
    ]
  },
  level: 'error',
  timestamp: '2022-06-12T22:36:56.396Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:38:15.084Z'
}
{
  code: 'EREQUEST',
  originalError: Error: Error converting data type varchar to numeric.
      at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:382:19)
      at Connection.emit (node:events:527:28)
      at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
      at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
      at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
      at Readable.emit (node:events:527:28)
      at addChunk (node:internal/streams/readable:315:12)
      at readableAddChunk (node:internal/streams/readable:289:9)
      at Readable.push (node:internal/streams/readable:228:10)
      at next (node:internal/streams/from:98:31) {
    info: ErrorMessageToken {
      name: 'ERROR',
      handlerName: 'onErrorMessage',
      number: 8114,
      state: 5,
      class: 16,
      message: 'Error converting data type varchar to numeric.',
      serverName: 'NBJMAUAS\\NEWMANAG',
      procName: '',
      lineNumber: 1
    }
  },
  name: 'RequestError',
  number: 8114,
  lineNumber: 1,
  state: 5,
  class: 16,
  serverName: 'NBJMAUAS\\NEWMANAG',
  procName: '',
  precedingErrors: [],
  level: 'error',
  timestamp: '2022-06-12T22:38:28.484Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:41:12.673Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:44:26.300Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:44:34.787Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:45:30.507Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:45:46.836Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:47:17.489Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:47:20.215Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:47:33.522Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:47:39.307Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:47:52.241Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:47:53.843Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:49:38.658Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:49:40.037Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:51:40.233Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:51:41.769Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:51:46.758Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:51:53.363Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-12T22:52:00.595Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:07:57.446Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:08:04.003Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:08:26.026Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:08:37.997Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:08:39.892Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:08:47.229Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:08:51.786Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:08:55.656Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:15:58.240Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:16:02.061Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:16:05.121Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:16:08.842Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:16:16.442Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:16:20.363Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:16:35.536Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:16:38.330Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:17:17.253Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:17:18.568Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:19:11.244Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:19:15.281Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:19:23.124Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:19:26.273Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:20:42.979Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:20:49.588Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:20:51.164Z'
}
{
  message: 'Request failed with status code 401',
  name: 'AxiosError',
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [Function: httpAdapter],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] {
        LINE_BREAK: '\r\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      }
    },
    validateStatus: [Function: validateStatus],
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
      'User-Agent': 'axios/0.27.2'
    },
    method: 'get',
    url: 'https://api.mercadolibre.com/shipments/41441506905',
    data: undefined
  },
  request: <ref *2> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      prefinish: [Function: requestOnPrefinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: false,
    socket: <ref *1> TLSSocket {
      _tlsOptions: {
        allowHalfOpen: undefined,
        pipe: false,
        secureContext: SecureContext { context: SecureContext {} },
        isServer: false,
        requestCert: true,
        rejectUnauthorized: true,
        session: undefined,
        ALPNProtocols: undefined,
        requestOCSP: undefined,
        enableTrace: undefined,
        pskCallback: undefined,
        highWaterMark: undefined,
        onread: undefined,
        signal: undefined
      },
      _secureEstablished: true,
      _securePending: false,
      _newSessionPending: false,
      _controlReleased: true,
      secureConnecting: false,
      _SNICallback: null,
      servername: 'api.mercadolibre.com',
      alpnProtocol: false,
      authorized: true,
      authorizationError: null,
      encrypted: true,
      _events: [Object: null prototype] {
        close: [
          [Function: onSocketCloseDestroySSL],
          [Function: bound onceWrapper] {
            listener: [Function (anonymous)]
          },
          [Function: onClose],
          [Function: socketCloseListener]
        ],
        end: [Function: onReadableStreamEnd],
        newListener: [Function: keylogNewListener],
        secure: [Function: onConnectSecure],
        session: [Function (anonymous)],
        free: [Function: onFree],
        timeout: [Function: onTimeout],
        agentRemove: [Function: onRemove],
        error: [Function: socketErrorListener],
        finish: [Function: bound onceWrapper] { listener: [Function: destroy] }
      },
      _eventsCount: 10,
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'api.mercadolibre.com',
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        constructed: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: true,
        needDrain: false,
        ending: true,
        ended: true,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: undefined,
      _server: null,
      ssl: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      _requestCert: true,
      _rejectUnauthorized: true,
      parser: null,
      _httpMessage: [Circular *2],
      [Symbol(res)]: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(verified)]: true,
      [Symbol(pendingSession)]: null,
      [Symbol(async_id_symbol)]: 729,
      [Symbol(kHandle)]: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: false,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 60,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(connect-options)]: {
        rejectUnauthorized: true,
        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
        checkServerIdentity: [Function: checkServerIdentity],
        minDHSize: 1024,
        maxRedirects: 21,
        maxBodyLength: 10485760,
        protocol: 'https:',
        path: null,
        method: 'GET',
        headers: {
          Accept: 'application/json, text/plain, */*',
          Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
          'User-Agent': 'axios/0.27.2'
        },
        agent: undefined,
        agents: { http: undefined, https: undefined },
        auth: undefined,
        hostname: 'api.mercadolibre.com',
        port: 443,
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 8f 76 18 0e 86 2b c1 e2 47 86 05 77 19 fe cc ff 4b d6 76 58 36 93 57 73 ee 19 4e 1c e8 fb 25 96 04 ... 1937 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/shipments/41441506905',
        _defaultAgent: Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] { path: null },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          maxCachedSessions: 100,
          _sessionCache: {
            map: {
              'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 8f 76 18 0e 86 2b c1 e2 47 86 05 77 19 fe cc ff 4b d6 76 58 36 93 57 73 ee 19 4e 1c e8 fb 25 96 04 ... 1937 more bytes>
            },
            list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
          },
          [Symbol(kCapture)]: false
        },
        host: 'api.mercadolibre.com',
        servername: 'api.mercadolibre.com',
        _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
        encoding: null,
        singleUse: true
      },
      [Symbol(RequestTimeout)]: undefined
    },
    _header: 'GET /shipments/41441506905 HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'Authorization: Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378\r\n' +
      'User-Agent: axios/0.27.2\r\n' +
      'Host: api.mercadolibre.com\r\n' +
      'Connection: close\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: <ref *3> Agent {
      _events: [Object: null prototype] {
        free: [Function (anonymous)],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] { path: null },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {
        'api.mercadolibre.com:443:::::::::::::::::::::': [
          <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'api.mercadolibre.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 10,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'api.mercadolibre.com',
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *2],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 729,
            [Symbol(kHandle)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              maxRedirects: 21,
              maxBodyLength: 10485760,
              protocol: 'https:',
              path: null,
              method: 'GET',
              headers: {
                Accept: 'application/json, text/plain, */*',
                Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                'User-Agent': 'axios/0.27.2'
              },
              agent: undefined,
              agents: { http: undefined, https: undefined },
              auth: undefined,
              hostname: 'api.mercadolibre.com',
              port: 443,
              nativeProtocols: {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: [Circular *3],
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/shipments/41441506905',
              _defaultAgent: [Circular *3],
              host: 'api.mercadolibre.com',
              servername: 'api.mercadolibre.com',
              _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            },
            [Symbol(RequestTimeout)]: undefined
          }
        ]
      },
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      maxCachedSessions: 100,
      _sessionCache: {
        map: {
          'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 8f 76 18 0e 86 2b c1 e2 47 86 05 77 19 fe cc ff 4b d6 76 58 36 93 57 73 ee 19 4e 1c e8 fb 25 96 04 ... 1937 more bytes>
        },
        list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
      },
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    path: '/shipments/41441506905',
    _ended: true,
    res: IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        constructed: true,
        sync: false,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        destroyed: true,
        errored: null,
        closed: true,
        closeEmitted: true,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
        data: [Function: handleStreamData],
        aborted: [Function: handlerStreamAborted],
        error: [Function: handleStreamError]
      },
      _eventsCount: 4,
      _maxListeners: undefined,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadolibre.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadolibre.com',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 729,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: null,
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: 443,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 8f 76 18 0e 86 2b c1 e2 47 86 05 77 19 fe cc ff 4b d6 76 58 36 93 57 73 ee 19 4e 1c e8 fb 25 96 04 ... 1937 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/shipments/41441506905',
          _defaultAgent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 8f 76 18 0e 86 2b c1 e2 47 86 05 77 19 fe cc ff 4b d6 76 58 36 93 57 73 ee 19 4e 1c e8 fb 25 96 04 ... 1937 more bytes>
              },
              list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'api.mercadolibre.com',
          servername: 'api.mercadolibre.com',
          _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        },
        [Symbol(RequestTimeout)]: undefined
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [
        'Content-Type',
        'application/json',
        'Transfer-Encoding',
        'chunked',
        'Connection',
        'close',
        'Date',
        'Mon, 13 Jun 2022 00:21:31 GMT',
        'X-Content-Type-Options',
        'nosniff',
        'X-Request-Id',
        '1a261f84-4af6-4a36-999a-05712942c8e2',
        'X-Frame-Options',
        'DENY',
        'X-XSS-Protection',
        '1; mode=block',
        'Access-Control-Allow-Origin',
        '*',
        'Access-Control-Allow-Headers',
        'Content-Type',
        'Access-Control-Allow-Methods',
        'PUT, GET, POST, DELETE, OPTIONS',
        'Access-Control-Max-Age',
        '86400',
        'X-Cache',
        'Error from cloudfront',
        'Via',
        '1.1 0e0ad29313cce66bcaa3fd8596e1b5de.cloudfront.net (CloudFront)',
        'X-Amz-Cf-Pop',
        'EZE50-P1',
        'X-Amz-Cf-Id',
        'b0bzewBWq54QDMKgzKIc4YygeRFiaoVIpE1uoZf-_rli66kpNuvt5w=='
      ],
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 401,
      statusMessage: 'Unauthorized',
      client: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadolibre.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadolibre.com',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 729,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: null,
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: 443,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 8f 76 18 0e 86 2b c1 e2 47 86 05 77 19 fe cc ff 4b d6 76 58 36 93 57 73 ee 19 4e 1c e8 fb 25 96 04 ... 1937 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/shipments/41441506905',
          _defaultAgent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 8f 76 18 0e 86 2b c1 e2 47 86 05 77 19 fe cc ff 4b d6 76 58 36 93 57 73 ee 19 4e 1c e8 fb 25 96 04 ... 1937 more bytes>
              },
              list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'api.mercadolibre.com',
          servername: 'api.mercadolibre.com',
          _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        },
        [Symbol(RequestTimeout)]: undefined
      },
      _consuming: true,
      _dumped: false,
      req: [Circular *2],
      responseUrl: 'https://api.mercadolibre.com/shipments/41441506905',
      redirects: [],
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: {
        'content-type': 'application/json',
        'transfer-encoding': 'chunked',
        connection: 'close',
        date: 'Mon, 13 Jun 2022 00:21:31 GMT',
        'x-content-type-options': 'nosniff',
        'x-request-id': '1a261f84-4af6-4a36-999a-05712942c8e2',
        'x-frame-options': 'DENY',
        'x-xss-protection': '1; mode=block',
        'access-control-allow-origin': '*',
        'access-control-allow-headers': 'Content-Type',
        'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
        'access-control-max-age': '86400',
        'x-cache': 'Error from cloudfront',
        via: '1.1 0e0ad29313cce66bcaa3fd8596e1b5de.cloudfront.net (CloudFront)',
        'x-amz-cf-pop': 'EZE50-P1',
        'x-amz-cf-id': 'b0bzewBWq54QDMKgzKIc4YygeRFiaoVIpE1uoZf-_rli66kpNuvt5w=='
      },
      [Symbol(kHeadersCount)]: 32,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: false,
    host: 'api.mercadolibre.com',
    protocol: 'https:',
    _redirectable: Writable {
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      _events: [Object: null prototype] {
        response: [Function: handleResponse],
        error: [Function: handleRequestError],
        socket: [Function: handleRequestSocket]
      },
      _eventsCount: 3,
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: 10485760,
        protocol: 'https:',
        path: '/shipments/41441506905',
        method: 'GET',
        headers: {
          Accept: 'application/json, text/plain, */*',
          Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
          'User-Agent': 'axios/0.27.2'
        },
        agent: undefined,
        agents: { http: undefined, https: undefined },
        auth: undefined,
        hostname: 'api.mercadolibre.com',
        port: null,
        nativeProtocols: <ref *4> {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [
                  <ref *1> TLSSocket {
                    _tlsOptions: {
                      allowHalfOpen: undefined,
                      pipe: false,
                      secureContext: SecureContext { context: SecureContext {} },
                      isServer: false,
                      requestCert: true,
                      rejectUnauthorized: true,
                      session: undefined,
                      ALPNProtocols: undefined,
                      requestOCSP: undefined,
                      enableTrace: undefined,
                      pskCallback: undefined,
                      highWaterMark: undefined,
                      onread: undefined,
                      signal: undefined
                    },
                    _secureEstablished: true,
                    _securePending: false,
                    _newSessionPending: false,
                    _controlReleased: true,
                    secureConnecting: false,
                    _SNICallback: null,
                    servername: 'api.mercadolibre.com',
                    alpnProtocol: false,
                    authorized: true,
                    authorizationError: null,
                    encrypted: true,
                    _events: [Object: null prototype] {
                      close: [
                        [Function: onSocketCloseDestroySSL],
                        [Function: bound onceWrapper] {
                          listener: [Function (anonymous)]
                        },
                        [Function: onClose],
                        [Function: socketCloseListener]
                      ],
                      end: [Function: onReadableStreamEnd],
                      newListener: [Function: keylogNewListener],
                      secure: [Function: onConnectSecure],
                      session: [Function (anonymous)],
                      free: [Function: onFree],
                      timeout: [Function: onTimeout],
                      agentRemove: [Function: onRemove],
                      error: [Function: socketErrorListener],
                      finish: [Function: bound onceWrapper] {
                        listener: [Function: destroy]
                      }
                    },
                    _eventsCount: 10,
                    connecting: false,
                    _hadError: false,
                    _parent: null,
                    _host: 'api.mercadolibre.com',
                    _readableState: ReadableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      buffer: BufferList { head: null, tail: null, length: 0 },
                      length: 0,
                      pipes: [],
                      flowing: true,
                      ended: false,
                      endEmitted: false,
                      reading: true,
                      constructed: true,
                      sync: false,
                      needReadable: true,
                      emittedReadable: false,
                      readableListening: false,
                      resumeScheduled: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      destroyed: false,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      defaultEncoding: 'utf8',
                      awaitDrainWriters: null,
                      multiAwaitDrain: false,
                      readingMore: false,
                      dataEmitted: true,
                      decoder: null,
                      encoding: null,
                      [Symbol(kPaused)]: false
                    },
                    _maxListeners: undefined,
                    _writableState: WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      finalCalled: true,
                      needDrain: false,
                      ending: true,
                      ended: true,
                      finished: false,
                      destroyed: false,
                      decodeStrings: false,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: false,
                      bufferProcessing: false,
                      onwrite: [Function: bound onwrite],
                      writecb: null,
                      writelen: 0,
                      afterWriteTickInfo: null,
                      buffered: [],
                      bufferedIndex: 0,
                      allBuffers: true,
                      allNoop: true,
                      pendingcb: 1,
                      constructed: true,
                      prefinished: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      [Symbol(kOnFinished)]: []
                    },
                    allowHalfOpen: false,
                    _sockname: null,
                    _pendingData: null,
                    _pendingEncoding: '',
                    server: undefined,
                    _server: null,
                    ssl: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _requestCert: true,
                    _rejectUnauthorized: true,
                    parser: null,
                    _httpMessage: [Circular *2],
                    [Symbol(res)]: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    [Symbol(verified)]: true,
                    [Symbol(pendingSession)]: null,
                    [Symbol(async_id_symbol)]: 729,
                    [Symbol(kHandle)]: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    [Symbol(lastWriteQueueSize)]: 0,
                    [Symbol(timeout)]: null,
                    [Symbol(kBuffer)]: null,
                    [Symbol(kBufferCb)]: null,
                    [Symbol(kBufferGen)]: null,
                    [Symbol(kCapture)]: false,
                    [Symbol(kSetNoDelay)]: false,
                    [Symbol(kSetKeepAlive)]: true,
                    [Symbol(kSetKeepAliveInitialDelay)]: 60,
                    [Symbol(kBytesRead)]: 0,
                    [Symbol(kBytesWritten)]: 0,
                    [Symbol(connect-options)]: {
                      rejectUnauthorized: true,
                      ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                      checkServerIdentity: [Function: checkServerIdentity],
                      minDHSize: 1024,
                      maxRedirects: 21,
                      maxBodyLength: 10485760,
                      protocol: 'https:',
                      path: null,
                      method: 'GET',
                      headers: {
                        Accept: 'application/json, text/plain, */*',
                        Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                        'User-Agent': 'axios/0.27.2'
                      },
                      agent: undefined,
                      agents: { http: undefined, https: undefined },
                      auth: undefined,
                      hostname: 'api.mercadolibre.com',
                      port: 443,
                      nativeProtocols: [Circular *4],
                      pathname: '/shipments/41441506905',
                      _defaultAgent: [Circular *3],
                      host: 'api.mercadolibre.com',
                      servername: 'api.mercadolibre.com',
                      _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
                      encoding: null,
                      singleUse: true
                    },
                    [Symbol(RequestTimeout)]: undefined
                  }
                ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 8f 76 18 0e 86 2b c1 e2 47 86 05 77 19 fe cc ff 4b d6 76 58 36 93 57 73 ee 19 4e 1c e8 fb 25 96 04 ... 1937 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/shipments/41441506905'
      },
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *2],
      _currentUrl: 'https://api.mercadolibre.com/shipments/41441506905',
      [Symbol(kCapture)]: false
    },
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [ 'Accept', 'application/json, text/plain, */*' ],
      authorization: [
        'Authorization',
        'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378'
      ],
      'user-agent': [ 'User-Agent', 'axios/0.27.2' ],
      host: [ 'Host', 'api.mercadolibre.com' ]
    }
  },
  response: {
    status: 401,
    statusText: 'Unauthorized',
    headers: {
      'content-type': 'application/json',
      'transfer-encoding': 'chunked',
      connection: 'close',
      date: 'Mon, 13 Jun 2022 00:21:31 GMT',
      'x-content-type-options': 'nosniff',
      'x-request-id': '1a261f84-4af6-4a36-999a-05712942c8e2',
      'x-frame-options': 'DENY',
      'x-xss-protection': '1; mode=block',
      'access-control-allow-origin': '*',
      'access-control-allow-headers': 'Content-Type',
      'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
      'access-control-max-age': '86400',
      'x-cache': 'Error from cloudfront',
      via: '1.1 0e0ad29313cce66bcaa3fd8596e1b5de.cloudfront.net (CloudFront)',
      'x-amz-cf-pop': 'EZE50-P1',
      'x-amz-cf-id': 'b0bzewBWq54QDMKgzKIc4YygeRFiaoVIpE1uoZf-_rli66kpNuvt5w=='
    },
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [Function: httpAdapter],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        }
      },
      validateStatus: [Function: validateStatus],
      headers: {
        Accept: 'application/json, text/plain, */*',
        Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
        'User-Agent': 'axios/0.27.2'
      },
      method: 'get',
      url: 'https://api.mercadolibre.com/shipments/41441506905',
      data: undefined
    },
    request: <ref *2> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        prefinish: [Function: requestOnPrefinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadolibre.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadolibre.com',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 729,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: null,
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: 443,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 8f 76 18 0e 86 2b c1 e2 47 86 05 77 19 fe cc ff 4b d6 76 58 36 93 57 73 ee 19 4e 1c e8 fb 25 96 04 ... 1937 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/shipments/41441506905',
          _defaultAgent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 8f 76 18 0e 86 2b c1 e2 47 86 05 77 19 fe cc ff 4b d6 76 58 36 93 57 73 ee 19 4e 1c e8 fb 25 96 04 ... 1937 more bytes>
              },
              list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'api.mercadolibre.com',
          servername: 'api.mercadolibre.com',
          _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        },
        [Symbol(RequestTimeout)]: undefined
      },
      _header: 'GET /shipments/41441506905 HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Authorization: Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378\r\n' +
        'User-Agent: axios/0.27.2\r\n' +
        'Host: api.mercadolibre.com\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: <ref *3> Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype] { path: null },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'api.mercadolibre.com:443:::::::::::::::::::::': [
            <ref *1> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: true,
                session: undefined,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'api.mercadolibre.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 10,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'api.mercadolibre.com',
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: false,
                errored: null,
                closed: false,
                closeEmitted: false,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: true,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 1,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular *2],
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 729,
              [Symbol(kHandle)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(connect-options)]: {
                rejectUnauthorized: true,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                maxRedirects: 21,
                maxBodyLength: 10485760,
                protocol: 'https:',
                path: null,
                method: 'GET',
                headers: {
                  Accept: 'application/json, text/plain, */*',
                  Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                  'User-Agent': 'axios/0.27.2'
                },
                agent: undefined,
                agents: { http: undefined, https: undefined },
                auth: undefined,
                hostname: 'api.mercadolibre.com',
                port: 443,
                nativeProtocols: <ref *4> {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: [Circular *3],
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/shipments/41441506905',
                _defaultAgent: [Circular *3],
                host: 'api.mercadolibre.com',
                servername: 'api.mercadolibre.com',
                _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
                encoding: null,
                singleUse: true
              },
              [Symbol(RequestTimeout)]: undefined
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        maxCachedSessions: 100,
        _sessionCache: {
          map: {
            'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 8f 76 18 0e 86 2b c1 e2 47 86 05 77 19 fe cc ff 4b d6 76 58 36 93 57 73 ee 19 4e 1c e8 fb 25 96 04 ... 1937 more bytes>
          },
          list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
        },
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      path: '/shipments/41441506905',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          constructed: true,
          sync: false,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          destroyed: true,
          errored: null,
          closed: true,
          closeEmitted: true,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          data: [Function: handleStreamData],
          aborted: [Function: handlerStreamAborted],
          error: [Function: handleStreamError]
        },
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'api.mercadolibre.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'api.mercadolibre.com',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 729,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: 10485760,
            protocol: 'https:',
            path: null,
            method: 'GET',
            headers: {
              Accept: 'application/json, text/plain, */*',
              Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
              'User-Agent': 'axios/0.27.2'
            },
            agent: undefined,
            agents: { http: undefined, https: undefined },
            auth: undefined,
            hostname: 'api.mercadolibre.com',
            port: 443,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] { path: null },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 8f 76 18 0e 86 2b c1 e2 47 86 05 77 19 fe cc ff 4b d6 76 58 36 93 57 73 ee 19 4e 1c e8 fb 25 96 04 ... 1937 more bytes>
                    },
                    list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/shipments/41441506905',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 8f 76 18 0e 86 2b c1 e2 47 86 05 77 19 fe cc ff 4b d6 76 58 36 93 57 73 ee 19 4e 1c e8 fb 25 96 04 ... 1937 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'api.mercadolibre.com',
            servername: 'api.mercadolibre.com',
            _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          },
          [Symbol(RequestTimeout)]: undefined
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
          'Content-Type',
          'application/json',
          'Transfer-Encoding',
          'chunked',
          'Connection',
          'close',
          'Date',
          'Mon, 13 Jun 2022 00:21:31 GMT',
          'X-Content-Type-Options',
          'nosniff',
          'X-Request-Id',
          '1a261f84-4af6-4a36-999a-05712942c8e2',
          'X-Frame-Options',
          'DENY',
          'X-XSS-Protection',
          '1; mode=block',
          'Access-Control-Allow-Origin',
          '*',
          'Access-Control-Allow-Headers',
          'Content-Type',
          'Access-Control-Allow-Methods',
          'PUT, GET, POST, DELETE, OPTIONS',
          'Access-Control-Max-Age',
          '86400',
          'X-Cache',
          'Error from cloudfront',
          'Via',
          '1.1 0e0ad29313cce66bcaa3fd8596e1b5de.cloudfront.net (CloudFront)',
          'X-Amz-Cf-Pop',
          'EZE50-P1',
          'X-Amz-Cf-Id',
          'b0bzewBWq54QDMKgzKIc4YygeRFiaoVIpE1uoZf-_rli66kpNuvt5w=='
        ],
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 401,
        statusMessage: 'Unauthorized',
        client: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'api.mercadolibre.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'api.mercadolibre.com',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 729,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: 10485760,
            protocol: 'https:',
            path: null,
            method: 'GET',
            headers: {
              Accept: 'application/json, text/plain, */*',
              Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
              'User-Agent': 'axios/0.27.2'
            },
            agent: undefined,
            agents: { http: undefined, https: undefined },
            auth: undefined,
            hostname: 'api.mercadolibre.com',
            port: 443,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] { path: null },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 8f 76 18 0e 86 2b c1 e2 47 86 05 77 19 fe cc ff 4b d6 76 58 36 93 57 73 ee 19 4e 1c e8 fb 25 96 04 ... 1937 more bytes>
                    },
                    list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/shipments/41441506905',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 8f 76 18 0e 86 2b c1 e2 47 86 05 77 19 fe cc ff 4b d6 76 58 36 93 57 73 ee 19 4e 1c e8 fb 25 96 04 ... 1937 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'api.mercadolibre.com',
            servername: 'api.mercadolibre.com',
            _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          },
          [Symbol(RequestTimeout)]: undefined
        },
        _consuming: true,
        _dumped: false,
        req: [Circular *2],
        responseUrl: 'https://api.mercadolibre.com/shipments/41441506905',
        redirects: [],
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
          'content-type': 'application/json',
          'transfer-encoding': 'chunked',
          connection: 'close',
          date: 'Mon, 13 Jun 2022 00:21:31 GMT',
          'x-content-type-options': 'nosniff',
          'x-request-id': '1a261f84-4af6-4a36-999a-05712942c8e2',
          'x-frame-options': 'DENY',
          'x-xss-protection': '1; mode=block',
          'access-control-allow-origin': '*',
          'access-control-allow-headers': 'Content-Type',
          'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
          'access-control-max-age': '86400',
          'x-cache': 'Error from cloudfront',
          via: '1.1 0e0ad29313cce66bcaa3fd8596e1b5de.cloudfront.net (CloudFront)',
          'x-amz-cf-pop': 'EZE50-P1',
          'x-amz-cf-id': 'b0bzewBWq54QDMKgzKIc4YygeRFiaoVIpE1uoZf-_rli66kpNuvt5w=='
        },
        [Symbol(kHeadersCount)]: 32,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'api.mercadolibre.com',
      protocol: 'https:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError],
          socket: [Function: handleRequestSocket]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: '/shipments/41441506905',
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: null,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [
                    <ref *1> TLSSocket {
                      _tlsOptions: {
                        allowHalfOpen: undefined,
                        pipe: false,
                        secureContext: SecureContext { context: SecureContext {} },
                        isServer: false,
                        requestCert: true,
                        rejectUnauthorized: true,
                        session: undefined,
                        ALPNProtocols: undefined,
                        requestOCSP: undefined,
                        enableTrace: undefined,
                        pskCallback: undefined,
                        highWaterMark: undefined,
                        onread: undefined,
                        signal: undefined
                      },
                      _secureEstablished: true,
                      _securePending: false,
                      _newSessionPending: false,
                      _controlReleased: true,
                      secureConnecting: false,
                      _SNICallback: null,
                      servername: 'api.mercadolibre.com',
                      alpnProtocol: false,
                      authorized: true,
                      authorizationError: null,
                      encrypted: true,
                      _events: [Object: null prototype] {
                        close: [
                          [Function: onSocketCloseDestroySSL],
                          [Function: bound onceWrapper] {
                            listener: [Function (anonymous)]
                          },
                          [Function: onClose],
                          [Function: socketCloseListener]
                        ],
                        end: [Function: onReadableStreamEnd],
                        newListener: [Function: keylogNewListener],
                        secure: [Function: onConnectSecure],
                        session: [Function (anonymous)],
                        free: [Function: onFree],
                        timeout: [Function: onTimeout],
                        agentRemove: [Function: onRemove],
                        error: [Function: socketErrorListener],
                        finish: [Function: bound onceWrapper] {
                          listener: [Function: destroy]
                        }
                      },
                      _eventsCount: 10,
                      connecting: false,
                      _hadError: false,
                      _parent: null,
                      _host: 'api.mercadolibre.com',
                      _readableState: ReadableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        buffer: BufferList { head: null, tail: null, length: 0 },
                        length: 0,
                        pipes: [],
                        flowing: true,
                        ended: false,
                        endEmitted: false,
                        reading: true,
                        constructed: true,
                        sync: false,
                        needReadable: true,
                        emittedReadable: false,
                        readableListening: false,
                        resumeScheduled: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        destroyed: false,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        defaultEncoding: 'utf8',
                        awaitDrainWriters: null,
                        multiAwaitDrain: false,
                        readingMore: false,
                        dataEmitted: true,
                        decoder: null,
                        encoding: null,
                        [Symbol(kPaused)]: false
                      },
                      _maxListeners: undefined,
                      _writableState: WritableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        finalCalled: true,
                        needDrain: false,
                        ending: true,
                        ended: true,
                        finished: false,
                        destroyed: false,
                        decodeStrings: false,
                        defaultEncoding: 'utf8',
                        length: 0,
                        writing: false,
                        corked: 0,
                        sync: false,
                        bufferProcessing: false,
                        onwrite: [Function: bound onwrite],
                        writecb: null,
                        writelen: 0,
                        afterWriteTickInfo: null,
                        buffered: [],
                        bufferedIndex: 0,
                        allBuffers: true,
                        allNoop: true,
                        pendingcb: 1,
                        constructed: true,
                        prefinished: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        [Symbol(kOnFinished)]: []
                      },
                      allowHalfOpen: false,
                      _sockname: null,
                      _pendingData: null,
                      _pendingEncoding: '',
                      server: undefined,
                      _server: null,
                      ssl: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _requestCert: true,
                      _rejectUnauthorized: true,
                      parser: null,
                      _httpMessage: [Circular *2],
                      [Symbol(res)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(verified)]: true,
                      [Symbol(pendingSession)]: null,
                      [Symbol(async_id_symbol)]: 729,
                      [Symbol(kHandle)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(lastWriteQueueSize)]: 0,
                      [Symbol(timeout)]: null,
                      [Symbol(kBuffer)]: null,
                      [Symbol(kBufferCb)]: null,
                      [Symbol(kBufferGen)]: null,
                      [Symbol(kCapture)]: false,
                      [Symbol(kSetNoDelay)]: false,
                      [Symbol(kSetKeepAlive)]: true,
                      [Symbol(kSetKeepAliveInitialDelay)]: 60,
                      [Symbol(kBytesRead)]: 0,
                      [Symbol(kBytesWritten)]: 0,
                      [Symbol(connect-options)]: {
                        rejectUnauthorized: true,
                        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                        checkServerIdentity: [Function: checkServerIdentity],
                        minDHSize: 1024,
                        maxRedirects: 21,
                        maxBodyLength: 10485760,
                        protocol: 'https:',
                        path: null,
                        method: 'GET',
                        headers: {
                          Accept: 'application/json, text/plain, */*',
                          Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                          'User-Agent': 'axios/0.27.2'
                        },
                        agent: undefined,
                        agents: { http: undefined, https: undefined },
                        auth: undefined,
                        hostname: 'api.mercadolibre.com',
                        port: 443,
                        nativeProtocols: [Circular *4],
                        pathname: '/shipments/41441506905',
                        _defaultAgent: [Circular *3],
                        host: 'api.mercadolibre.com',
                        servername: 'api.mercadolibre.com',
                        _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
                        encoding: null,
                        singleUse: true
                      },
                      [Symbol(RequestTimeout)]: undefined
                    }
                  ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 8f 76 18 0e 86 2b c1 e2 47 86 05 77 19 fe cc ff 4b d6 76 58 36 93 57 73 ee 19 4e 1c e8 fb 25 96 04 ... 1937 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/shipments/41441506905'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 0,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *2],
        _currentUrl: 'https://api.mercadolibre.com/shipments/41441506905',
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        authorization: [
          'Authorization',
          'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378'
        ],
        'user-agent': [ 'User-Agent', 'axios/0.27.2' ],
        host: [ 'Host', 'api.mercadolibre.com' ]
      }
    },
    data: {
      message: 'invalid_token',
      error: 'not_found',
      status: 401,
      cause: []
    }
  },
  level: 'error',
  timestamp: '2022-06-13T00:21:32.303Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:22:11.395Z'
}
{
  message: 'Request failed with status code 401',
  name: 'AxiosError',
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [Function: httpAdapter],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] {
        LINE_BREAK: '\r\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      }
    },
    validateStatus: [Function: validateStatus],
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
      'User-Agent': 'axios/0.27.2'
    },
    method: 'get',
    url: 'https://api.mercadolibre.com/shipments/41441506905',
    data: undefined
  },
  request: <ref *2> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      prefinish: [Function: requestOnPrefinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: false,
    socket: <ref *1> TLSSocket {
      _tlsOptions: {
        allowHalfOpen: undefined,
        pipe: false,
        secureContext: SecureContext { context: SecureContext {} },
        isServer: false,
        requestCert: true,
        rejectUnauthorized: true,
        session: undefined,
        ALPNProtocols: undefined,
        requestOCSP: undefined,
        enableTrace: undefined,
        pskCallback: undefined,
        highWaterMark: undefined,
        onread: undefined,
        signal: undefined
      },
      _secureEstablished: true,
      _securePending: false,
      _newSessionPending: false,
      _controlReleased: true,
      secureConnecting: false,
      _SNICallback: null,
      servername: 'api.mercadolibre.com',
      alpnProtocol: false,
      authorized: true,
      authorizationError: null,
      encrypted: true,
      _events: [Object: null prototype] {
        close: [
          [Function: onSocketCloseDestroySSL],
          [Function: bound onceWrapper] {
            listener: [Function (anonymous)]
          },
          [Function: onClose],
          [Function: socketCloseListener]
        ],
        end: [Function: onReadableStreamEnd],
        newListener: [Function: keylogNewListener],
        secure: [Function: onConnectSecure],
        session: [Function (anonymous)],
        free: [Function: onFree],
        timeout: [Function: onTimeout],
        agentRemove: [Function: onRemove],
        error: [Function: socketErrorListener],
        finish: [Function: bound onceWrapper] { listener: [Function: destroy] }
      },
      _eventsCount: 10,
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'api.mercadolibre.com',
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        constructed: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: true,
        needDrain: false,
        ending: true,
        ended: true,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: undefined,
      _server: null,
      ssl: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      _requestCert: true,
      _rejectUnauthorized: true,
      parser: null,
      _httpMessage: [Circular *2],
      [Symbol(res)]: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(verified)]: true,
      [Symbol(pendingSession)]: null,
      [Symbol(async_id_symbol)]: 458,
      [Symbol(kHandle)]: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: false,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 60,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(connect-options)]: {
        rejectUnauthorized: true,
        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
        checkServerIdentity: [Function: checkServerIdentity],
        minDHSize: 1024,
        maxRedirects: 21,
        maxBodyLength: 10485760,
        protocol: 'https:',
        path: null,
        method: 'GET',
        headers: {
          Accept: 'application/json, text/plain, */*',
          Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
          'User-Agent': 'axios/0.27.2'
        },
        agent: undefined,
        agents: { http: undefined, https: undefined },
        auth: undefined,
        hostname: 'api.mercadolibre.com',
        port: 443,
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 4b 27 b6 03 2e a2 39 19 2e e4 2c 89 23 8b 60 69 ba e3 4e 71 a4 7c 69 9c 86 2e 6f 52 83 c5 2e 7b 04 ... 1936 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/shipments/41441506905',
        _defaultAgent: Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] { path: null },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          maxCachedSessions: 100,
          _sessionCache: {
            map: {
              'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 4b 27 b6 03 2e a2 39 19 2e e4 2c 89 23 8b 60 69 ba e3 4e 71 a4 7c 69 9c 86 2e 6f 52 83 c5 2e 7b 04 ... 1936 more bytes>
            },
            list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
          },
          [Symbol(kCapture)]: false
        },
        host: 'api.mercadolibre.com',
        servername: 'api.mercadolibre.com',
        _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
        encoding: null,
        singleUse: true
      },
      [Symbol(RequestTimeout)]: undefined
    },
    _header: 'GET /shipments/41441506905 HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'Authorization: Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378\r\n' +
      'User-Agent: axios/0.27.2\r\n' +
      'Host: api.mercadolibre.com\r\n' +
      'Connection: close\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: <ref *3> Agent {
      _events: [Object: null prototype] {
        free: [Function (anonymous)],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] { path: null },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {
        'api.mercadolibre.com:443:::::::::::::::::::::': [
          <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'api.mercadolibre.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 10,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'api.mercadolibre.com',
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *2],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 458,
            [Symbol(kHandle)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              maxRedirects: 21,
              maxBodyLength: 10485760,
              protocol: 'https:',
              path: null,
              method: 'GET',
              headers: {
                Accept: 'application/json, text/plain, */*',
                Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                'User-Agent': 'axios/0.27.2'
              },
              agent: undefined,
              agents: { http: undefined, https: undefined },
              auth: undefined,
              hostname: 'api.mercadolibre.com',
              port: 443,
              nativeProtocols: {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: [Circular *3],
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/shipments/41441506905',
              _defaultAgent: [Circular *3],
              host: 'api.mercadolibre.com',
              servername: 'api.mercadolibre.com',
              _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            },
            [Symbol(RequestTimeout)]: undefined
          }
        ]
      },
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      maxCachedSessions: 100,
      _sessionCache: {
        map: {
          'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 4b 27 b6 03 2e a2 39 19 2e e4 2c 89 23 8b 60 69 ba e3 4e 71 a4 7c 69 9c 86 2e 6f 52 83 c5 2e 7b 04 ... 1936 more bytes>
        },
        list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
      },
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    path: '/shipments/41441506905',
    _ended: true,
    res: IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        constructed: true,
        sync: false,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        destroyed: true,
        errored: null,
        closed: true,
        closeEmitted: true,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
        data: [Function: handleStreamData],
        aborted: [Function: handlerStreamAborted],
        error: [Function: handleStreamError]
      },
      _eventsCount: 4,
      _maxListeners: undefined,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadolibre.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadolibre.com',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 458,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: null,
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: 443,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 4b 27 b6 03 2e a2 39 19 2e e4 2c 89 23 8b 60 69 ba e3 4e 71 a4 7c 69 9c 86 2e 6f 52 83 c5 2e 7b 04 ... 1936 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/shipments/41441506905',
          _defaultAgent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 4b 27 b6 03 2e a2 39 19 2e e4 2c 89 23 8b 60 69 ba e3 4e 71 a4 7c 69 9c 86 2e 6f 52 83 c5 2e 7b 04 ... 1936 more bytes>
              },
              list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'api.mercadolibre.com',
          servername: 'api.mercadolibre.com',
          _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        },
        [Symbol(RequestTimeout)]: undefined
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [
        'Content-Type',
        'application/json',
        'Transfer-Encoding',
        'chunked',
        'Connection',
        'close',
        'Date',
        'Mon, 13 Jun 2022 00:22:27 GMT',
        'X-Content-Type-Options',
        'nosniff',
        'X-Request-Id',
        'c8aa005a-4e21-4a70-af29-4484d48d7744',
        'X-Frame-Options',
        'DENY',
        'X-XSS-Protection',
        '1; mode=block',
        'Access-Control-Allow-Origin',
        '*',
        'Access-Control-Allow-Headers',
        'Content-Type',
        'Access-Control-Allow-Methods',
        'PUT, GET, POST, DELETE, OPTIONS',
        'Access-Control-Max-Age',
        '86400',
        'X-Cache',
        'Error from cloudfront',
        'Via',
        '1.1 3e4df971a572827d7b2a18db7147bb96.cloudfront.net (CloudFront)',
        'X-Amz-Cf-Pop',
        'EZE50-P1',
        'X-Amz-Cf-Id',
        'HKP11e7EsuVNAByjPfaTXSlVHqG5K0idhpiMvZMDVPo6GRL2Pryysw=='
      ],
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 401,
      statusMessage: 'Unauthorized',
      client: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadolibre.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadolibre.com',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 458,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: null,
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: 443,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 4b 27 b6 03 2e a2 39 19 2e e4 2c 89 23 8b 60 69 ba e3 4e 71 a4 7c 69 9c 86 2e 6f 52 83 c5 2e 7b 04 ... 1936 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/shipments/41441506905',
          _defaultAgent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 4b 27 b6 03 2e a2 39 19 2e e4 2c 89 23 8b 60 69 ba e3 4e 71 a4 7c 69 9c 86 2e 6f 52 83 c5 2e 7b 04 ... 1936 more bytes>
              },
              list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'api.mercadolibre.com',
          servername: 'api.mercadolibre.com',
          _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        },
        [Symbol(RequestTimeout)]: undefined
      },
      _consuming: true,
      _dumped: false,
      req: [Circular *2],
      responseUrl: 'https://api.mercadolibre.com/shipments/41441506905',
      redirects: [],
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: {
        'content-type': 'application/json',
        'transfer-encoding': 'chunked',
        connection: 'close',
        date: 'Mon, 13 Jun 2022 00:22:27 GMT',
        'x-content-type-options': 'nosniff',
        'x-request-id': 'c8aa005a-4e21-4a70-af29-4484d48d7744',
        'x-frame-options': 'DENY',
        'x-xss-protection': '1; mode=block',
        'access-control-allow-origin': '*',
        'access-control-allow-headers': 'Content-Type',
        'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
        'access-control-max-age': '86400',
        'x-cache': 'Error from cloudfront',
        via: '1.1 3e4df971a572827d7b2a18db7147bb96.cloudfront.net (CloudFront)',
        'x-amz-cf-pop': 'EZE50-P1',
        'x-amz-cf-id': 'HKP11e7EsuVNAByjPfaTXSlVHqG5K0idhpiMvZMDVPo6GRL2Pryysw=='
      },
      [Symbol(kHeadersCount)]: 32,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: false,
    host: 'api.mercadolibre.com',
    protocol: 'https:',
    _redirectable: Writable {
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      _events: [Object: null prototype] {
        response: [Function: handleResponse],
        error: [Function: handleRequestError],
        socket: [Function: handleRequestSocket]
      },
      _eventsCount: 3,
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: 10485760,
        protocol: 'https:',
        path: '/shipments/41441506905',
        method: 'GET',
        headers: {
          Accept: 'application/json, text/plain, */*',
          Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
          'User-Agent': 'axios/0.27.2'
        },
        agent: undefined,
        agents: { http: undefined, https: undefined },
        auth: undefined,
        hostname: 'api.mercadolibre.com',
        port: null,
        nativeProtocols: <ref *4> {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [
                  <ref *1> TLSSocket {
                    _tlsOptions: {
                      allowHalfOpen: undefined,
                      pipe: false,
                      secureContext: SecureContext { context: SecureContext {} },
                      isServer: false,
                      requestCert: true,
                      rejectUnauthorized: true,
                      session: undefined,
                      ALPNProtocols: undefined,
                      requestOCSP: undefined,
                      enableTrace: undefined,
                      pskCallback: undefined,
                      highWaterMark: undefined,
                      onread: undefined,
                      signal: undefined
                    },
                    _secureEstablished: true,
                    _securePending: false,
                    _newSessionPending: false,
                    _controlReleased: true,
                    secureConnecting: false,
                    _SNICallback: null,
                    servername: 'api.mercadolibre.com',
                    alpnProtocol: false,
                    authorized: true,
                    authorizationError: null,
                    encrypted: true,
                    _events: [Object: null prototype] {
                      close: [
                        [Function: onSocketCloseDestroySSL],
                        [Function: bound onceWrapper] {
                          listener: [Function (anonymous)]
                        },
                        [Function: onClose],
                        [Function: socketCloseListener]
                      ],
                      end: [Function: onReadableStreamEnd],
                      newListener: [Function: keylogNewListener],
                      secure: [Function: onConnectSecure],
                      session: [Function (anonymous)],
                      free: [Function: onFree],
                      timeout: [Function: onTimeout],
                      agentRemove: [Function: onRemove],
                      error: [Function: socketErrorListener],
                      finish: [Function: bound onceWrapper] {
                        listener: [Function: destroy]
                      }
                    },
                    _eventsCount: 10,
                    connecting: false,
                    _hadError: false,
                    _parent: null,
                    _host: 'api.mercadolibre.com',
                    _readableState: ReadableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      buffer: BufferList { head: null, tail: null, length: 0 },
                      length: 0,
                      pipes: [],
                      flowing: true,
                      ended: false,
                      endEmitted: false,
                      reading: true,
                      constructed: true,
                      sync: false,
                      needReadable: true,
                      emittedReadable: false,
                      readableListening: false,
                      resumeScheduled: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      destroyed: false,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      defaultEncoding: 'utf8',
                      awaitDrainWriters: null,
                      multiAwaitDrain: false,
                      readingMore: false,
                      dataEmitted: true,
                      decoder: null,
                      encoding: null,
                      [Symbol(kPaused)]: false
                    },
                    _maxListeners: undefined,
                    _writableState: WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      finalCalled: true,
                      needDrain: false,
                      ending: true,
                      ended: true,
                      finished: false,
                      destroyed: false,
                      decodeStrings: false,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: false,
                      bufferProcessing: false,
                      onwrite: [Function: bound onwrite],
                      writecb: null,
                      writelen: 0,
                      afterWriteTickInfo: null,
                      buffered: [],
                      bufferedIndex: 0,
                      allBuffers: true,
                      allNoop: true,
                      pendingcb: 1,
                      constructed: true,
                      prefinished: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      [Symbol(kOnFinished)]: []
                    },
                    allowHalfOpen: false,
                    _sockname: null,
                    _pendingData: null,
                    _pendingEncoding: '',
                    server: undefined,
                    _server: null,
                    ssl: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _requestCert: true,
                    _rejectUnauthorized: true,
                    parser: null,
                    _httpMessage: [Circular *2],
                    [Symbol(res)]: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    [Symbol(verified)]: true,
                    [Symbol(pendingSession)]: null,
                    [Symbol(async_id_symbol)]: 458,
                    [Symbol(kHandle)]: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    [Symbol(lastWriteQueueSize)]: 0,
                    [Symbol(timeout)]: null,
                    [Symbol(kBuffer)]: null,
                    [Symbol(kBufferCb)]: null,
                    [Symbol(kBufferGen)]: null,
                    [Symbol(kCapture)]: false,
                    [Symbol(kSetNoDelay)]: false,
                    [Symbol(kSetKeepAlive)]: true,
                    [Symbol(kSetKeepAliveInitialDelay)]: 60,
                    [Symbol(kBytesRead)]: 0,
                    [Symbol(kBytesWritten)]: 0,
                    [Symbol(connect-options)]: {
                      rejectUnauthorized: true,
                      ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                      checkServerIdentity: [Function: checkServerIdentity],
                      minDHSize: 1024,
                      maxRedirects: 21,
                      maxBodyLength: 10485760,
                      protocol: 'https:',
                      path: null,
                      method: 'GET',
                      headers: {
                        Accept: 'application/json, text/plain, */*',
                        Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                        'User-Agent': 'axios/0.27.2'
                      },
                      agent: undefined,
                      agents: { http: undefined, https: undefined },
                      auth: undefined,
                      hostname: 'api.mercadolibre.com',
                      port: 443,
                      nativeProtocols: [Circular *4],
                      pathname: '/shipments/41441506905',
                      _defaultAgent: [Circular *3],
                      host: 'api.mercadolibre.com',
                      servername: 'api.mercadolibre.com',
                      _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
                      encoding: null,
                      singleUse: true
                    },
                    [Symbol(RequestTimeout)]: undefined
                  }
                ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 4b 27 b6 03 2e a2 39 19 2e e4 2c 89 23 8b 60 69 ba e3 4e 71 a4 7c 69 9c 86 2e 6f 52 83 c5 2e 7b 04 ... 1936 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/shipments/41441506905'
      },
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *2],
      _currentUrl: 'https://api.mercadolibre.com/shipments/41441506905',
      [Symbol(kCapture)]: false
    },
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [ 'Accept', 'application/json, text/plain, */*' ],
      authorization: [
        'Authorization',
        'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378'
      ],
      'user-agent': [ 'User-Agent', 'axios/0.27.2' ],
      host: [ 'Host', 'api.mercadolibre.com' ]
    }
  },
  response: {
    status: 401,
    statusText: 'Unauthorized',
    headers: {
      'content-type': 'application/json',
      'transfer-encoding': 'chunked',
      connection: 'close',
      date: 'Mon, 13 Jun 2022 00:22:27 GMT',
      'x-content-type-options': 'nosniff',
      'x-request-id': 'c8aa005a-4e21-4a70-af29-4484d48d7744',
      'x-frame-options': 'DENY',
      'x-xss-protection': '1; mode=block',
      'access-control-allow-origin': '*',
      'access-control-allow-headers': 'Content-Type',
      'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
      'access-control-max-age': '86400',
      'x-cache': 'Error from cloudfront',
      via: '1.1 3e4df971a572827d7b2a18db7147bb96.cloudfront.net (CloudFront)',
      'x-amz-cf-pop': 'EZE50-P1',
      'x-amz-cf-id': 'HKP11e7EsuVNAByjPfaTXSlVHqG5K0idhpiMvZMDVPo6GRL2Pryysw=='
    },
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [Function: httpAdapter],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        }
      },
      validateStatus: [Function: validateStatus],
      headers: {
        Accept: 'application/json, text/plain, */*',
        Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
        'User-Agent': 'axios/0.27.2'
      },
      method: 'get',
      url: 'https://api.mercadolibre.com/shipments/41441506905',
      data: undefined
    },
    request: <ref *2> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        prefinish: [Function: requestOnPrefinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadolibre.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadolibre.com',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 458,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: null,
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: 443,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 4b 27 b6 03 2e a2 39 19 2e e4 2c 89 23 8b 60 69 ba e3 4e 71 a4 7c 69 9c 86 2e 6f 52 83 c5 2e 7b 04 ... 1936 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/shipments/41441506905',
          _defaultAgent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 4b 27 b6 03 2e a2 39 19 2e e4 2c 89 23 8b 60 69 ba e3 4e 71 a4 7c 69 9c 86 2e 6f 52 83 c5 2e 7b 04 ... 1936 more bytes>
              },
              list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'api.mercadolibre.com',
          servername: 'api.mercadolibre.com',
          _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        },
        [Symbol(RequestTimeout)]: undefined
      },
      _header: 'GET /shipments/41441506905 HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Authorization: Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378\r\n' +
        'User-Agent: axios/0.27.2\r\n' +
        'Host: api.mercadolibre.com\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: <ref *3> Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype] { path: null },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'api.mercadolibre.com:443:::::::::::::::::::::': [
            <ref *1> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: true,
                session: undefined,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'api.mercadolibre.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 10,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'api.mercadolibre.com',
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: false,
                errored: null,
                closed: false,
                closeEmitted: false,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: true,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 1,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular *2],
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 458,
              [Symbol(kHandle)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(connect-options)]: {
                rejectUnauthorized: true,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                maxRedirects: 21,
                maxBodyLength: 10485760,
                protocol: 'https:',
                path: null,
                method: 'GET',
                headers: {
                  Accept: 'application/json, text/plain, */*',
                  Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                  'User-Agent': 'axios/0.27.2'
                },
                agent: undefined,
                agents: { http: undefined, https: undefined },
                auth: undefined,
                hostname: 'api.mercadolibre.com',
                port: 443,
                nativeProtocols: <ref *4> {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: [Circular *3],
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/shipments/41441506905',
                _defaultAgent: [Circular *3],
                host: 'api.mercadolibre.com',
                servername: 'api.mercadolibre.com',
                _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
                encoding: null,
                singleUse: true
              },
              [Symbol(RequestTimeout)]: undefined
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        maxCachedSessions: 100,
        _sessionCache: {
          map: {
            'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 4b 27 b6 03 2e a2 39 19 2e e4 2c 89 23 8b 60 69 ba e3 4e 71 a4 7c 69 9c 86 2e 6f 52 83 c5 2e 7b 04 ... 1936 more bytes>
          },
          list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
        },
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      path: '/shipments/41441506905',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          constructed: true,
          sync: false,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          destroyed: true,
          errored: null,
          closed: true,
          closeEmitted: true,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          data: [Function: handleStreamData],
          aborted: [Function: handlerStreamAborted],
          error: [Function: handleStreamError]
        },
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'api.mercadolibre.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'api.mercadolibre.com',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 458,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: 10485760,
            protocol: 'https:',
            path: null,
            method: 'GET',
            headers: {
              Accept: 'application/json, text/plain, */*',
              Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
              'User-Agent': 'axios/0.27.2'
            },
            agent: undefined,
            agents: { http: undefined, https: undefined },
            auth: undefined,
            hostname: 'api.mercadolibre.com',
            port: 443,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] { path: null },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 4b 27 b6 03 2e a2 39 19 2e e4 2c 89 23 8b 60 69 ba e3 4e 71 a4 7c 69 9c 86 2e 6f 52 83 c5 2e 7b 04 ... 1936 more bytes>
                    },
                    list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/shipments/41441506905',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 4b 27 b6 03 2e a2 39 19 2e e4 2c 89 23 8b 60 69 ba e3 4e 71 a4 7c 69 9c 86 2e 6f 52 83 c5 2e 7b 04 ... 1936 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'api.mercadolibre.com',
            servername: 'api.mercadolibre.com',
            _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          },
          [Symbol(RequestTimeout)]: undefined
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
          'Content-Type',
          'application/json',
          'Transfer-Encoding',
          'chunked',
          'Connection',
          'close',
          'Date',
          'Mon, 13 Jun 2022 00:22:27 GMT',
          'X-Content-Type-Options',
          'nosniff',
          'X-Request-Id',
          'c8aa005a-4e21-4a70-af29-4484d48d7744',
          'X-Frame-Options',
          'DENY',
          'X-XSS-Protection',
          '1; mode=block',
          'Access-Control-Allow-Origin',
          '*',
          'Access-Control-Allow-Headers',
          'Content-Type',
          'Access-Control-Allow-Methods',
          'PUT, GET, POST, DELETE, OPTIONS',
          'Access-Control-Max-Age',
          '86400',
          'X-Cache',
          'Error from cloudfront',
          'Via',
          '1.1 3e4df971a572827d7b2a18db7147bb96.cloudfront.net (CloudFront)',
          'X-Amz-Cf-Pop',
          'EZE50-P1',
          'X-Amz-Cf-Id',
          'HKP11e7EsuVNAByjPfaTXSlVHqG5K0idhpiMvZMDVPo6GRL2Pryysw=='
        ],
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 401,
        statusMessage: 'Unauthorized',
        client: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'api.mercadolibre.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'api.mercadolibre.com',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 458,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: 10485760,
            protocol: 'https:',
            path: null,
            method: 'GET',
            headers: {
              Accept: 'application/json, text/plain, */*',
              Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
              'User-Agent': 'axios/0.27.2'
            },
            agent: undefined,
            agents: { http: undefined, https: undefined },
            auth: undefined,
            hostname: 'api.mercadolibre.com',
            port: 443,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] { path: null },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 4b 27 b6 03 2e a2 39 19 2e e4 2c 89 23 8b 60 69 ba e3 4e 71 a4 7c 69 9c 86 2e 6f 52 83 c5 2e 7b 04 ... 1936 more bytes>
                    },
                    list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/shipments/41441506905',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 4b 27 b6 03 2e a2 39 19 2e e4 2c 89 23 8b 60 69 ba e3 4e 71 a4 7c 69 9c 86 2e 6f 52 83 c5 2e 7b 04 ... 1936 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'api.mercadolibre.com',
            servername: 'api.mercadolibre.com',
            _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          },
          [Symbol(RequestTimeout)]: undefined
        },
        _consuming: true,
        _dumped: false,
        req: [Circular *2],
        responseUrl: 'https://api.mercadolibre.com/shipments/41441506905',
        redirects: [],
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
          'content-type': 'application/json',
          'transfer-encoding': 'chunked',
          connection: 'close',
          date: 'Mon, 13 Jun 2022 00:22:27 GMT',
          'x-content-type-options': 'nosniff',
          'x-request-id': 'c8aa005a-4e21-4a70-af29-4484d48d7744',
          'x-frame-options': 'DENY',
          'x-xss-protection': '1; mode=block',
          'access-control-allow-origin': '*',
          'access-control-allow-headers': 'Content-Type',
          'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
          'access-control-max-age': '86400',
          'x-cache': 'Error from cloudfront',
          via: '1.1 3e4df971a572827d7b2a18db7147bb96.cloudfront.net (CloudFront)',
          'x-amz-cf-pop': 'EZE50-P1',
          'x-amz-cf-id': 'HKP11e7EsuVNAByjPfaTXSlVHqG5K0idhpiMvZMDVPo6GRL2Pryysw=='
        },
        [Symbol(kHeadersCount)]: 32,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'api.mercadolibre.com',
      protocol: 'https:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError],
          socket: [Function: handleRequestSocket]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: '/shipments/41441506905',
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: null,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [
                    <ref *1> TLSSocket {
                      _tlsOptions: {
                        allowHalfOpen: undefined,
                        pipe: false,
                        secureContext: SecureContext { context: SecureContext {} },
                        isServer: false,
                        requestCert: true,
                        rejectUnauthorized: true,
                        session: undefined,
                        ALPNProtocols: undefined,
                        requestOCSP: undefined,
                        enableTrace: undefined,
                        pskCallback: undefined,
                        highWaterMark: undefined,
                        onread: undefined,
                        signal: undefined
                      },
                      _secureEstablished: true,
                      _securePending: false,
                      _newSessionPending: false,
                      _controlReleased: true,
                      secureConnecting: false,
                      _SNICallback: null,
                      servername: 'api.mercadolibre.com',
                      alpnProtocol: false,
                      authorized: true,
                      authorizationError: null,
                      encrypted: true,
                      _events: [Object: null prototype] {
                        close: [
                          [Function: onSocketCloseDestroySSL],
                          [Function: bound onceWrapper] {
                            listener: [Function (anonymous)]
                          },
                          [Function: onClose],
                          [Function: socketCloseListener]
                        ],
                        end: [Function: onReadableStreamEnd],
                        newListener: [Function: keylogNewListener],
                        secure: [Function: onConnectSecure],
                        session: [Function (anonymous)],
                        free: [Function: onFree],
                        timeout: [Function: onTimeout],
                        agentRemove: [Function: onRemove],
                        error: [Function: socketErrorListener],
                        finish: [Function: bound onceWrapper] {
                          listener: [Function: destroy]
                        }
                      },
                      _eventsCount: 10,
                      connecting: false,
                      _hadError: false,
                      _parent: null,
                      _host: 'api.mercadolibre.com',
                      _readableState: ReadableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        buffer: BufferList { head: null, tail: null, length: 0 },
                        length: 0,
                        pipes: [],
                        flowing: true,
                        ended: false,
                        endEmitted: false,
                        reading: true,
                        constructed: true,
                        sync: false,
                        needReadable: true,
                        emittedReadable: false,
                        readableListening: false,
                        resumeScheduled: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        destroyed: false,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        defaultEncoding: 'utf8',
                        awaitDrainWriters: null,
                        multiAwaitDrain: false,
                        readingMore: false,
                        dataEmitted: true,
                        decoder: null,
                        encoding: null,
                        [Symbol(kPaused)]: false
                      },
                      _maxListeners: undefined,
                      _writableState: WritableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        finalCalled: true,
                        needDrain: false,
                        ending: true,
                        ended: true,
                        finished: false,
                        destroyed: false,
                        decodeStrings: false,
                        defaultEncoding: 'utf8',
                        length: 0,
                        writing: false,
                        corked: 0,
                        sync: false,
                        bufferProcessing: false,
                        onwrite: [Function: bound onwrite],
                        writecb: null,
                        writelen: 0,
                        afterWriteTickInfo: null,
                        buffered: [],
                        bufferedIndex: 0,
                        allBuffers: true,
                        allNoop: true,
                        pendingcb: 1,
                        constructed: true,
                        prefinished: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        [Symbol(kOnFinished)]: []
                      },
                      allowHalfOpen: false,
                      _sockname: null,
                      _pendingData: null,
                      _pendingEncoding: '',
                      server: undefined,
                      _server: null,
                      ssl: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _requestCert: true,
                      _rejectUnauthorized: true,
                      parser: null,
                      _httpMessage: [Circular *2],
                      [Symbol(res)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(verified)]: true,
                      [Symbol(pendingSession)]: null,
                      [Symbol(async_id_symbol)]: 458,
                      [Symbol(kHandle)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(lastWriteQueueSize)]: 0,
                      [Symbol(timeout)]: null,
                      [Symbol(kBuffer)]: null,
                      [Symbol(kBufferCb)]: null,
                      [Symbol(kBufferGen)]: null,
                      [Symbol(kCapture)]: false,
                      [Symbol(kSetNoDelay)]: false,
                      [Symbol(kSetKeepAlive)]: true,
                      [Symbol(kSetKeepAliveInitialDelay)]: 60,
                      [Symbol(kBytesRead)]: 0,
                      [Symbol(kBytesWritten)]: 0,
                      [Symbol(connect-options)]: {
                        rejectUnauthorized: true,
                        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                        checkServerIdentity: [Function: checkServerIdentity],
                        minDHSize: 1024,
                        maxRedirects: 21,
                        maxBodyLength: 10485760,
                        protocol: 'https:',
                        path: null,
                        method: 'GET',
                        headers: {
                          Accept: 'application/json, text/plain, */*',
                          Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                          'User-Agent': 'axios/0.27.2'
                        },
                        agent: undefined,
                        agents: { http: undefined, https: undefined },
                        auth: undefined,
                        hostname: 'api.mercadolibre.com',
                        port: 443,
                        nativeProtocols: [Circular *4],
                        pathname: '/shipments/41441506905',
                        _defaultAgent: [Circular *3],
                        host: 'api.mercadolibre.com',
                        servername: 'api.mercadolibre.com',
                        _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
                        encoding: null,
                        singleUse: true
                      },
                      [Symbol(RequestTimeout)]: undefined
                    }
                  ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 4b 27 b6 03 2e a2 39 19 2e e4 2c 89 23 8b 60 69 ba e3 4e 71 a4 7c 69 9c 86 2e 6f 52 83 c5 2e 7b 04 ... 1936 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/shipments/41441506905'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 0,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *2],
        _currentUrl: 'https://api.mercadolibre.com/shipments/41441506905',
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        authorization: [
          'Authorization',
          'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378'
        ],
        'user-agent': [ 'User-Agent', 'axios/0.27.2' ],
        host: [ 'Host', 'api.mercadolibre.com' ]
      }
    },
    data: {
      message: 'invalid_token',
      error: 'not_found',
      status: 401,
      cause: []
    }
  },
  level: 'error',
  timestamp: '2022-06-13T00:22:28.897Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:25:20.063Z'
}
{
  message: 'Request failed with status code 401',
  name: 'AxiosError',
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [Function: httpAdapter],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] {
        LINE_BREAK: '\r\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      }
    },
    validateStatus: [Function: validateStatus],
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
      'User-Agent': 'axios/0.27.2'
    },
    method: 'get',
    url: 'https://api.mercadolibre.com/shipments/41441506905',
    data: undefined
  },
  request: <ref *2> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      prefinish: [Function: requestOnPrefinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: false,
    socket: <ref *1> TLSSocket {
      _tlsOptions: {
        allowHalfOpen: undefined,
        pipe: false,
        secureContext: SecureContext { context: SecureContext {} },
        isServer: false,
        requestCert: true,
        rejectUnauthorized: true,
        session: undefined,
        ALPNProtocols: undefined,
        requestOCSP: undefined,
        enableTrace: undefined,
        pskCallback: undefined,
        highWaterMark: undefined,
        onread: undefined,
        signal: undefined
      },
      _secureEstablished: true,
      _securePending: false,
      _newSessionPending: false,
      _controlReleased: true,
      secureConnecting: false,
      _SNICallback: null,
      servername: 'api.mercadolibre.com',
      alpnProtocol: false,
      authorized: true,
      authorizationError: null,
      encrypted: true,
      _events: [Object: null prototype] {
        close: [
          [Function: onSocketCloseDestroySSL],
          [Function: bound onceWrapper] {
            listener: [Function (anonymous)]
          },
          [Function: onClose],
          [Function: socketCloseListener]
        ],
        end: [Function: onReadableStreamEnd],
        newListener: [Function: keylogNewListener],
        secure: [Function: onConnectSecure],
        session: [Function (anonymous)],
        free: [Function: onFree],
        timeout: [Function: onTimeout],
        agentRemove: [Function: onRemove],
        error: [Function: socketErrorListener],
        finish: [Function: bound onceWrapper] { listener: [Function: destroy] }
      },
      _eventsCount: 10,
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'api.mercadolibre.com',
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        constructed: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: true,
        needDrain: false,
        ending: true,
        ended: true,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: undefined,
      _server: null,
      ssl: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      _requestCert: true,
      _rejectUnauthorized: true,
      parser: null,
      _httpMessage: [Circular *2],
      [Symbol(res)]: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(verified)]: true,
      [Symbol(pendingSession)]: null,
      [Symbol(async_id_symbol)]: 524,
      [Symbol(kHandle)]: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: false,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 60,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(connect-options)]: {
        rejectUnauthorized: true,
        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
        checkServerIdentity: [Function: checkServerIdentity],
        minDHSize: 1024,
        maxRedirects: 21,
        maxBodyLength: 10485760,
        protocol: 'https:',
        path: null,
        method: 'GET',
        headers: {
          Accept: 'application/json, text/plain, */*',
          Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
          'User-Agent': 'axios/0.27.2'
        },
        agent: undefined,
        agents: { http: undefined, https: undefined },
        auth: undefined,
        hostname: 'api.mercadolibre.com',
        port: 443,
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 bb 5f 45 2f e1 3b d0 7c 57 1d ec 7b ab c6 1a 63 61 8c 83 d4 0b 5f 38 ec bc ad 56 30 5d 00 66 9c 04 ... 1937 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/shipments/41441506905',
        _defaultAgent: Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] { path: null },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          maxCachedSessions: 100,
          _sessionCache: {
            map: {
              'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 bb 5f 45 2f e1 3b d0 7c 57 1d ec 7b ab c6 1a 63 61 8c 83 d4 0b 5f 38 ec bc ad 56 30 5d 00 66 9c 04 ... 1937 more bytes>
            },
            list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
          },
          [Symbol(kCapture)]: false
        },
        host: 'api.mercadolibre.com',
        servername: 'api.mercadolibre.com',
        _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
        encoding: null,
        singleUse: true
      },
      [Symbol(RequestTimeout)]: undefined
    },
    _header: 'GET /shipments/41441506905 HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'Authorization: Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378\r\n' +
      'User-Agent: axios/0.27.2\r\n' +
      'Host: api.mercadolibre.com\r\n' +
      'Connection: close\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: <ref *3> Agent {
      _events: [Object: null prototype] {
        free: [Function (anonymous)],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] { path: null },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {
        'api.mercadolibre.com:443:::::::::::::::::::::': [
          <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'api.mercadolibre.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 10,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'api.mercadolibre.com',
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *2],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 524,
            [Symbol(kHandle)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              maxRedirects: 21,
              maxBodyLength: 10485760,
              protocol: 'https:',
              path: null,
              method: 'GET',
              headers: {
                Accept: 'application/json, text/plain, */*',
                Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                'User-Agent': 'axios/0.27.2'
              },
              agent: undefined,
              agents: { http: undefined, https: undefined },
              auth: undefined,
              hostname: 'api.mercadolibre.com',
              port: 443,
              nativeProtocols: {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: [Circular *3],
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/shipments/41441506905',
              _defaultAgent: [Circular *3],
              host: 'api.mercadolibre.com',
              servername: 'api.mercadolibre.com',
              _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            },
            [Symbol(RequestTimeout)]: undefined
          }
        ]
      },
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      maxCachedSessions: 100,
      _sessionCache: {
        map: {
          'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 bb 5f 45 2f e1 3b d0 7c 57 1d ec 7b ab c6 1a 63 61 8c 83 d4 0b 5f 38 ec bc ad 56 30 5d 00 66 9c 04 ... 1937 more bytes>
        },
        list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
      },
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    path: '/shipments/41441506905',
    _ended: true,
    res: IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        constructed: true,
        sync: false,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        destroyed: true,
        errored: null,
        closed: true,
        closeEmitted: true,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
        data: [Function: handleStreamData],
        aborted: [Function: handlerStreamAborted],
        error: [Function: handleStreamError]
      },
      _eventsCount: 4,
      _maxListeners: undefined,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadolibre.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadolibre.com',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 524,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: null,
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: 443,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 bb 5f 45 2f e1 3b d0 7c 57 1d ec 7b ab c6 1a 63 61 8c 83 d4 0b 5f 38 ec bc ad 56 30 5d 00 66 9c 04 ... 1937 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/shipments/41441506905',
          _defaultAgent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 bb 5f 45 2f e1 3b d0 7c 57 1d ec 7b ab c6 1a 63 61 8c 83 d4 0b 5f 38 ec bc ad 56 30 5d 00 66 9c 04 ... 1937 more bytes>
              },
              list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'api.mercadolibre.com',
          servername: 'api.mercadolibre.com',
          _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        },
        [Symbol(RequestTimeout)]: undefined
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [
        'Content-Type',
        'application/json',
        'Transfer-Encoding',
        'chunked',
        'Connection',
        'close',
        'Date',
        'Mon, 13 Jun 2022 00:25:26 GMT',
        'X-Content-Type-Options',
        'nosniff',
        'X-Request-Id',
        'b13a6ecc-4f23-43a7-9374-67c47193b35c',
        'X-Frame-Options',
        'DENY',
        'X-XSS-Protection',
        '1; mode=block',
        'Access-Control-Allow-Origin',
        '*',
        'Access-Control-Allow-Headers',
        'Content-Type',
        'Access-Control-Allow-Methods',
        'PUT, GET, POST, DELETE, OPTIONS',
        'Access-Control-Max-Age',
        '86400',
        'X-Cache',
        'Error from cloudfront',
        'Via',
        '1.1 2ddd948d1ec2ebdb41f08585eb5b0876.cloudfront.net (CloudFront)',
        'X-Amz-Cf-Pop',
        'EZE50-P1',
        'X-Amz-Cf-Id',
        '8YqFAzFp7l3KX8DaTzvcThiKPRHp55vPDRf0FqXQ9cRcyK9vfAgQQA=='
      ],
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 401,
      statusMessage: 'Unauthorized',
      client: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadolibre.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadolibre.com',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 524,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: null,
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: 443,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 bb 5f 45 2f e1 3b d0 7c 57 1d ec 7b ab c6 1a 63 61 8c 83 d4 0b 5f 38 ec bc ad 56 30 5d 00 66 9c 04 ... 1937 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/shipments/41441506905',
          _defaultAgent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 bb 5f 45 2f e1 3b d0 7c 57 1d ec 7b ab c6 1a 63 61 8c 83 d4 0b 5f 38 ec bc ad 56 30 5d 00 66 9c 04 ... 1937 more bytes>
              },
              list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'api.mercadolibre.com',
          servername: 'api.mercadolibre.com',
          _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        },
        [Symbol(RequestTimeout)]: undefined
      },
      _consuming: true,
      _dumped: false,
      req: [Circular *2],
      responseUrl: 'https://api.mercadolibre.com/shipments/41441506905',
      redirects: [],
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: {
        'content-type': 'application/json',
        'transfer-encoding': 'chunked',
        connection: 'close',
        date: 'Mon, 13 Jun 2022 00:25:26 GMT',
        'x-content-type-options': 'nosniff',
        'x-request-id': 'b13a6ecc-4f23-43a7-9374-67c47193b35c',
        'x-frame-options': 'DENY',
        'x-xss-protection': '1; mode=block',
        'access-control-allow-origin': '*',
        'access-control-allow-headers': 'Content-Type',
        'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
        'access-control-max-age': '86400',
        'x-cache': 'Error from cloudfront',
        via: '1.1 2ddd948d1ec2ebdb41f08585eb5b0876.cloudfront.net (CloudFront)',
        'x-amz-cf-pop': 'EZE50-P1',
        'x-amz-cf-id': '8YqFAzFp7l3KX8DaTzvcThiKPRHp55vPDRf0FqXQ9cRcyK9vfAgQQA=='
      },
      [Symbol(kHeadersCount)]: 32,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: false,
    host: 'api.mercadolibre.com',
    protocol: 'https:',
    _redirectable: Writable {
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      _events: [Object: null prototype] {
        response: [Function: handleResponse],
        error: [Function: handleRequestError],
        socket: [Function: handleRequestSocket]
      },
      _eventsCount: 3,
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: 10485760,
        protocol: 'https:',
        path: '/shipments/41441506905',
        method: 'GET',
        headers: {
          Accept: 'application/json, text/plain, */*',
          Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
          'User-Agent': 'axios/0.27.2'
        },
        agent: undefined,
        agents: { http: undefined, https: undefined },
        auth: undefined,
        hostname: 'api.mercadolibre.com',
        port: null,
        nativeProtocols: <ref *4> {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [
                  <ref *1> TLSSocket {
                    _tlsOptions: {
                      allowHalfOpen: undefined,
                      pipe: false,
                      secureContext: SecureContext { context: SecureContext {} },
                      isServer: false,
                      requestCert: true,
                      rejectUnauthorized: true,
                      session: undefined,
                      ALPNProtocols: undefined,
                      requestOCSP: undefined,
                      enableTrace: undefined,
                      pskCallback: undefined,
                      highWaterMark: undefined,
                      onread: undefined,
                      signal: undefined
                    },
                    _secureEstablished: true,
                    _securePending: false,
                    _newSessionPending: false,
                    _controlReleased: true,
                    secureConnecting: false,
                    _SNICallback: null,
                    servername: 'api.mercadolibre.com',
                    alpnProtocol: false,
                    authorized: true,
                    authorizationError: null,
                    encrypted: true,
                    _events: [Object: null prototype] {
                      close: [
                        [Function: onSocketCloseDestroySSL],
                        [Function: bound onceWrapper] {
                          listener: [Function (anonymous)]
                        },
                        [Function: onClose],
                        [Function: socketCloseListener]
                      ],
                      end: [Function: onReadableStreamEnd],
                      newListener: [Function: keylogNewListener],
                      secure: [Function: onConnectSecure],
                      session: [Function (anonymous)],
                      free: [Function: onFree],
                      timeout: [Function: onTimeout],
                      agentRemove: [Function: onRemove],
                      error: [Function: socketErrorListener],
                      finish: [Function: bound onceWrapper] {
                        listener: [Function: destroy]
                      }
                    },
                    _eventsCount: 10,
                    connecting: false,
                    _hadError: false,
                    _parent: null,
                    _host: 'api.mercadolibre.com',
                    _readableState: ReadableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      buffer: BufferList { head: null, tail: null, length: 0 },
                      length: 0,
                      pipes: [],
                      flowing: true,
                      ended: false,
                      endEmitted: false,
                      reading: true,
                      constructed: true,
                      sync: false,
                      needReadable: true,
                      emittedReadable: false,
                      readableListening: false,
                      resumeScheduled: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      destroyed: false,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      defaultEncoding: 'utf8',
                      awaitDrainWriters: null,
                      multiAwaitDrain: false,
                      readingMore: false,
                      dataEmitted: true,
                      decoder: null,
                      encoding: null,
                      [Symbol(kPaused)]: false
                    },
                    _maxListeners: undefined,
                    _writableState: WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      finalCalled: true,
                      needDrain: false,
                      ending: true,
                      ended: true,
                      finished: false,
                      destroyed: false,
                      decodeStrings: false,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: false,
                      bufferProcessing: false,
                      onwrite: [Function: bound onwrite],
                      writecb: null,
                      writelen: 0,
                      afterWriteTickInfo: null,
                      buffered: [],
                      bufferedIndex: 0,
                      allBuffers: true,
                      allNoop: true,
                      pendingcb: 1,
                      constructed: true,
                      prefinished: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      [Symbol(kOnFinished)]: []
                    },
                    allowHalfOpen: false,
                    _sockname: null,
                    _pendingData: null,
                    _pendingEncoding: '',
                    server: undefined,
                    _server: null,
                    ssl: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _requestCert: true,
                    _rejectUnauthorized: true,
                    parser: null,
                    _httpMessage: [Circular *2],
                    [Symbol(res)]: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    [Symbol(verified)]: true,
                    [Symbol(pendingSession)]: null,
                    [Symbol(async_id_symbol)]: 524,
                    [Symbol(kHandle)]: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    [Symbol(lastWriteQueueSize)]: 0,
                    [Symbol(timeout)]: null,
                    [Symbol(kBuffer)]: null,
                    [Symbol(kBufferCb)]: null,
                    [Symbol(kBufferGen)]: null,
                    [Symbol(kCapture)]: false,
                    [Symbol(kSetNoDelay)]: false,
                    [Symbol(kSetKeepAlive)]: true,
                    [Symbol(kSetKeepAliveInitialDelay)]: 60,
                    [Symbol(kBytesRead)]: 0,
                    [Symbol(kBytesWritten)]: 0,
                    [Symbol(connect-options)]: {
                      rejectUnauthorized: true,
                      ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                      checkServerIdentity: [Function: checkServerIdentity],
                      minDHSize: 1024,
                      maxRedirects: 21,
                      maxBodyLength: 10485760,
                      protocol: 'https:',
                      path: null,
                      method: 'GET',
                      headers: {
                        Accept: 'application/json, text/plain, */*',
                        Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                        'User-Agent': 'axios/0.27.2'
                      },
                      agent: undefined,
                      agents: { http: undefined, https: undefined },
                      auth: undefined,
                      hostname: 'api.mercadolibre.com',
                      port: 443,
                      nativeProtocols: [Circular *4],
                      pathname: '/shipments/41441506905',
                      _defaultAgent: [Circular *3],
                      host: 'api.mercadolibre.com',
                      servername: 'api.mercadolibre.com',
                      _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
                      encoding: null,
                      singleUse: true
                    },
                    [Symbol(RequestTimeout)]: undefined
                  }
                ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 bb 5f 45 2f e1 3b d0 7c 57 1d ec 7b ab c6 1a 63 61 8c 83 d4 0b 5f 38 ec bc ad 56 30 5d 00 66 9c 04 ... 1937 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/shipments/41441506905'
      },
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *2],
      _currentUrl: 'https://api.mercadolibre.com/shipments/41441506905',
      [Symbol(kCapture)]: false
    },
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [ 'Accept', 'application/json, text/plain, */*' ],
      authorization: [
        'Authorization',
        'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378'
      ],
      'user-agent': [ 'User-Agent', 'axios/0.27.2' ],
      host: [ 'Host', 'api.mercadolibre.com' ]
    }
  },
  response: {
    status: 401,
    statusText: 'Unauthorized',
    headers: {
      'content-type': 'application/json',
      'transfer-encoding': 'chunked',
      connection: 'close',
      date: 'Mon, 13 Jun 2022 00:25:26 GMT',
      'x-content-type-options': 'nosniff',
      'x-request-id': 'b13a6ecc-4f23-43a7-9374-67c47193b35c',
      'x-frame-options': 'DENY',
      'x-xss-protection': '1; mode=block',
      'access-control-allow-origin': '*',
      'access-control-allow-headers': 'Content-Type',
      'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
      'access-control-max-age': '86400',
      'x-cache': 'Error from cloudfront',
      via: '1.1 2ddd948d1ec2ebdb41f08585eb5b0876.cloudfront.net (CloudFront)',
      'x-amz-cf-pop': 'EZE50-P1',
      'x-amz-cf-id': '8YqFAzFp7l3KX8DaTzvcThiKPRHp55vPDRf0FqXQ9cRcyK9vfAgQQA=='
    },
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [Function: httpAdapter],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        }
      },
      validateStatus: [Function: validateStatus],
      headers: {
        Accept: 'application/json, text/plain, */*',
        Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
        'User-Agent': 'axios/0.27.2'
      },
      method: 'get',
      url: 'https://api.mercadolibre.com/shipments/41441506905',
      data: undefined
    },
    request: <ref *2> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        prefinish: [Function: requestOnPrefinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadolibre.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadolibre.com',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 524,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: null,
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: 443,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 bb 5f 45 2f e1 3b d0 7c 57 1d ec 7b ab c6 1a 63 61 8c 83 d4 0b 5f 38 ec bc ad 56 30 5d 00 66 9c 04 ... 1937 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/shipments/41441506905',
          _defaultAgent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 bb 5f 45 2f e1 3b d0 7c 57 1d ec 7b ab c6 1a 63 61 8c 83 d4 0b 5f 38 ec bc ad 56 30 5d 00 66 9c 04 ... 1937 more bytes>
              },
              list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'api.mercadolibre.com',
          servername: 'api.mercadolibre.com',
          _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        },
        [Symbol(RequestTimeout)]: undefined
      },
      _header: 'GET /shipments/41441506905 HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Authorization: Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378\r\n' +
        'User-Agent: axios/0.27.2\r\n' +
        'Host: api.mercadolibre.com\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: <ref *3> Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype] { path: null },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'api.mercadolibre.com:443:::::::::::::::::::::': [
            <ref *1> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: true,
                session: undefined,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'api.mercadolibre.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 10,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'api.mercadolibre.com',
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: false,
                errored: null,
                closed: false,
                closeEmitted: false,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: true,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 1,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular *2],
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 524,
              [Symbol(kHandle)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(connect-options)]: {
                rejectUnauthorized: true,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                maxRedirects: 21,
                maxBodyLength: 10485760,
                protocol: 'https:',
                path: null,
                method: 'GET',
                headers: {
                  Accept: 'application/json, text/plain, */*',
                  Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                  'User-Agent': 'axios/0.27.2'
                },
                agent: undefined,
                agents: { http: undefined, https: undefined },
                auth: undefined,
                hostname: 'api.mercadolibre.com',
                port: 443,
                nativeProtocols: <ref *4> {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: [Circular *3],
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/shipments/41441506905',
                _defaultAgent: [Circular *3],
                host: 'api.mercadolibre.com',
                servername: 'api.mercadolibre.com',
                _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
                encoding: null,
                singleUse: true
              },
              [Symbol(RequestTimeout)]: undefined
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        maxCachedSessions: 100,
        _sessionCache: {
          map: {
            'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 bb 5f 45 2f e1 3b d0 7c 57 1d ec 7b ab c6 1a 63 61 8c 83 d4 0b 5f 38 ec bc ad 56 30 5d 00 66 9c 04 ... 1937 more bytes>
          },
          list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
        },
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      path: '/shipments/41441506905',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          constructed: true,
          sync: false,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          destroyed: true,
          errored: null,
          closed: true,
          closeEmitted: true,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          data: [Function: handleStreamData],
          aborted: [Function: handlerStreamAborted],
          error: [Function: handleStreamError]
        },
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'api.mercadolibre.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'api.mercadolibre.com',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 524,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: 10485760,
            protocol: 'https:',
            path: null,
            method: 'GET',
            headers: {
              Accept: 'application/json, text/plain, */*',
              Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
              'User-Agent': 'axios/0.27.2'
            },
            agent: undefined,
            agents: { http: undefined, https: undefined },
            auth: undefined,
            hostname: 'api.mercadolibre.com',
            port: 443,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] { path: null },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 bb 5f 45 2f e1 3b d0 7c 57 1d ec 7b ab c6 1a 63 61 8c 83 d4 0b 5f 38 ec bc ad 56 30 5d 00 66 9c 04 ... 1937 more bytes>
                    },
                    list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/shipments/41441506905',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 bb 5f 45 2f e1 3b d0 7c 57 1d ec 7b ab c6 1a 63 61 8c 83 d4 0b 5f 38 ec bc ad 56 30 5d 00 66 9c 04 ... 1937 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'api.mercadolibre.com',
            servername: 'api.mercadolibre.com',
            _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          },
          [Symbol(RequestTimeout)]: undefined
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
          'Content-Type',
          'application/json',
          'Transfer-Encoding',
          'chunked',
          'Connection',
          'close',
          'Date',
          'Mon, 13 Jun 2022 00:25:26 GMT',
          'X-Content-Type-Options',
          'nosniff',
          'X-Request-Id',
          'b13a6ecc-4f23-43a7-9374-67c47193b35c',
          'X-Frame-Options',
          'DENY',
          'X-XSS-Protection',
          '1; mode=block',
          'Access-Control-Allow-Origin',
          '*',
          'Access-Control-Allow-Headers',
          'Content-Type',
          'Access-Control-Allow-Methods',
          'PUT, GET, POST, DELETE, OPTIONS',
          'Access-Control-Max-Age',
          '86400',
          'X-Cache',
          'Error from cloudfront',
          'Via',
          '1.1 2ddd948d1ec2ebdb41f08585eb5b0876.cloudfront.net (CloudFront)',
          'X-Amz-Cf-Pop',
          'EZE50-P1',
          'X-Amz-Cf-Id',
          '8YqFAzFp7l3KX8DaTzvcThiKPRHp55vPDRf0FqXQ9cRcyK9vfAgQQA=='
        ],
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 401,
        statusMessage: 'Unauthorized',
        client: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'api.mercadolibre.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'api.mercadolibre.com',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 524,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: 10485760,
            protocol: 'https:',
            path: null,
            method: 'GET',
            headers: {
              Accept: 'application/json, text/plain, */*',
              Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
              'User-Agent': 'axios/0.27.2'
            },
            agent: undefined,
            agents: { http: undefined, https: undefined },
            auth: undefined,
            hostname: 'api.mercadolibre.com',
            port: 443,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] { path: null },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 bb 5f 45 2f e1 3b d0 7c 57 1d ec 7b ab c6 1a 63 61 8c 83 d4 0b 5f 38 ec bc ad 56 30 5d 00 66 9c 04 ... 1937 more bytes>
                    },
                    list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/shipments/41441506905',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 bb 5f 45 2f e1 3b d0 7c 57 1d ec 7b ab c6 1a 63 61 8c 83 d4 0b 5f 38 ec bc ad 56 30 5d 00 66 9c 04 ... 1937 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'api.mercadolibre.com',
            servername: 'api.mercadolibre.com',
            _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          },
          [Symbol(RequestTimeout)]: undefined
        },
        _consuming: true,
        _dumped: false,
        req: [Circular *2],
        responseUrl: 'https://api.mercadolibre.com/shipments/41441506905',
        redirects: [],
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
          'content-type': 'application/json',
          'transfer-encoding': 'chunked',
          connection: 'close',
          date: 'Mon, 13 Jun 2022 00:25:26 GMT',
          'x-content-type-options': 'nosniff',
          'x-request-id': 'b13a6ecc-4f23-43a7-9374-67c47193b35c',
          'x-frame-options': 'DENY',
          'x-xss-protection': '1; mode=block',
          'access-control-allow-origin': '*',
          'access-control-allow-headers': 'Content-Type',
          'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
          'access-control-max-age': '86400',
          'x-cache': 'Error from cloudfront',
          via: '1.1 2ddd948d1ec2ebdb41f08585eb5b0876.cloudfront.net (CloudFront)',
          'x-amz-cf-pop': 'EZE50-P1',
          'x-amz-cf-id': '8YqFAzFp7l3KX8DaTzvcThiKPRHp55vPDRf0FqXQ9cRcyK9vfAgQQA=='
        },
        [Symbol(kHeadersCount)]: 32,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'api.mercadolibre.com',
      protocol: 'https:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError],
          socket: [Function: handleRequestSocket]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: '/shipments/41441506905',
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: null,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [
                    <ref *1> TLSSocket {
                      _tlsOptions: {
                        allowHalfOpen: undefined,
                        pipe: false,
                        secureContext: SecureContext { context: SecureContext {} },
                        isServer: false,
                        requestCert: true,
                        rejectUnauthorized: true,
                        session: undefined,
                        ALPNProtocols: undefined,
                        requestOCSP: undefined,
                        enableTrace: undefined,
                        pskCallback: undefined,
                        highWaterMark: undefined,
                        onread: undefined,
                        signal: undefined
                      },
                      _secureEstablished: true,
                      _securePending: false,
                      _newSessionPending: false,
                      _controlReleased: true,
                      secureConnecting: false,
                      _SNICallback: null,
                      servername: 'api.mercadolibre.com',
                      alpnProtocol: false,
                      authorized: true,
                      authorizationError: null,
                      encrypted: true,
                      _events: [Object: null prototype] {
                        close: [
                          [Function: onSocketCloseDestroySSL],
                          [Function: bound onceWrapper] {
                            listener: [Function (anonymous)]
                          },
                          [Function: onClose],
                          [Function: socketCloseListener]
                        ],
                        end: [Function: onReadableStreamEnd],
                        newListener: [Function: keylogNewListener],
                        secure: [Function: onConnectSecure],
                        session: [Function (anonymous)],
                        free: [Function: onFree],
                        timeout: [Function: onTimeout],
                        agentRemove: [Function: onRemove],
                        error: [Function: socketErrorListener],
                        finish: [Function: bound onceWrapper] {
                          listener: [Function: destroy]
                        }
                      },
                      _eventsCount: 10,
                      connecting: false,
                      _hadError: false,
                      _parent: null,
                      _host: 'api.mercadolibre.com',
                      _readableState: ReadableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        buffer: BufferList { head: null, tail: null, length: 0 },
                        length: 0,
                        pipes: [],
                        flowing: true,
                        ended: false,
                        endEmitted: false,
                        reading: true,
                        constructed: true,
                        sync: false,
                        needReadable: true,
                        emittedReadable: false,
                        readableListening: false,
                        resumeScheduled: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        destroyed: false,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        defaultEncoding: 'utf8',
                        awaitDrainWriters: null,
                        multiAwaitDrain: false,
                        readingMore: false,
                        dataEmitted: true,
                        decoder: null,
                        encoding: null,
                        [Symbol(kPaused)]: false
                      },
                      _maxListeners: undefined,
                      _writableState: WritableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        finalCalled: true,
                        needDrain: false,
                        ending: true,
                        ended: true,
                        finished: false,
                        destroyed: false,
                        decodeStrings: false,
                        defaultEncoding: 'utf8',
                        length: 0,
                        writing: false,
                        corked: 0,
                        sync: false,
                        bufferProcessing: false,
                        onwrite: [Function: bound onwrite],
                        writecb: null,
                        writelen: 0,
                        afterWriteTickInfo: null,
                        buffered: [],
                        bufferedIndex: 0,
                        allBuffers: true,
                        allNoop: true,
                        pendingcb: 1,
                        constructed: true,
                        prefinished: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        [Symbol(kOnFinished)]: []
                      },
                      allowHalfOpen: false,
                      _sockname: null,
                      _pendingData: null,
                      _pendingEncoding: '',
                      server: undefined,
                      _server: null,
                      ssl: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _requestCert: true,
                      _rejectUnauthorized: true,
                      parser: null,
                      _httpMessage: [Circular *2],
                      [Symbol(res)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(verified)]: true,
                      [Symbol(pendingSession)]: null,
                      [Symbol(async_id_symbol)]: 524,
                      [Symbol(kHandle)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(lastWriteQueueSize)]: 0,
                      [Symbol(timeout)]: null,
                      [Symbol(kBuffer)]: null,
                      [Symbol(kBufferCb)]: null,
                      [Symbol(kBufferGen)]: null,
                      [Symbol(kCapture)]: false,
                      [Symbol(kSetNoDelay)]: false,
                      [Symbol(kSetKeepAlive)]: true,
                      [Symbol(kSetKeepAliveInitialDelay)]: 60,
                      [Symbol(kBytesRead)]: 0,
                      [Symbol(kBytesWritten)]: 0,
                      [Symbol(connect-options)]: {
                        rejectUnauthorized: true,
                        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                        checkServerIdentity: [Function: checkServerIdentity],
                        minDHSize: 1024,
                        maxRedirects: 21,
                        maxBodyLength: 10485760,
                        protocol: 'https:',
                        path: null,
                        method: 'GET',
                        headers: {
                          Accept: 'application/json, text/plain, */*',
                          Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                          'User-Agent': 'axios/0.27.2'
                        },
                        agent: undefined,
                        agents: { http: undefined, https: undefined },
                        auth: undefined,
                        hostname: 'api.mercadolibre.com',
                        port: 443,
                        nativeProtocols: [Circular *4],
                        pathname: '/shipments/41441506905',
                        _defaultAgent: [Circular *3],
                        host: 'api.mercadolibre.com',
                        servername: 'api.mercadolibre.com',
                        _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
                        encoding: null,
                        singleUse: true
                      },
                      [Symbol(RequestTimeout)]: undefined
                    }
                  ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 bb 5f 45 2f e1 3b d0 7c 57 1d ec 7b ab c6 1a 63 61 8c 83 d4 0b 5f 38 ec bc ad 56 30 5d 00 66 9c 04 ... 1937 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/shipments/41441506905'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 0,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *2],
        _currentUrl: 'https://api.mercadolibre.com/shipments/41441506905',
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        authorization: [
          'Authorization',
          'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378'
        ],
        'user-agent': [ 'User-Agent', 'axios/0.27.2' ],
        host: [ 'Host', 'api.mercadolibre.com' ]
      }
    },
    data: {
      message: 'invalid_token',
      error: 'not_found',
      status: 401,
      cause: []
    }
  },
  level: 'error',
  timestamp: '2022-06-13T00:25:27.675Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:32:01.916Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:32:02.929Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:34:20.452Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:34:35.650Z'
}
{
  message: 'Request failed with status code 401',
  name: 'AxiosError',
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [Function: httpAdapter],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] {
        LINE_BREAK: '\r\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      }
    },
    validateStatus: [Function: validateStatus],
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
      'User-Agent': 'axios/0.27.2'
    },
    method: 'get',
    url: 'https://api.mercadolibre.com/shipments/41441506905',
    data: undefined
  },
  request: <ref *2> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      prefinish: [Function: requestOnPrefinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: false,
    socket: <ref *1> TLSSocket {
      _tlsOptions: {
        allowHalfOpen: undefined,
        pipe: false,
        secureContext: SecureContext { context: SecureContext {} },
        isServer: false,
        requestCert: true,
        rejectUnauthorized: true,
        session: undefined,
        ALPNProtocols: undefined,
        requestOCSP: undefined,
        enableTrace: undefined,
        pskCallback: undefined,
        highWaterMark: undefined,
        onread: undefined,
        signal: undefined
      },
      _secureEstablished: true,
      _securePending: false,
      _newSessionPending: false,
      _controlReleased: true,
      secureConnecting: false,
      _SNICallback: null,
      servername: 'api.mercadolibre.com',
      alpnProtocol: false,
      authorized: true,
      authorizationError: null,
      encrypted: true,
      _events: [Object: null prototype] {
        close: [
          [Function: onSocketCloseDestroySSL],
          [Function: bound onceWrapper] {
            listener: [Function (anonymous)]
          },
          [Function: onClose],
          [Function: socketCloseListener]
        ],
        end: [Function: onReadableStreamEnd],
        newListener: [Function: keylogNewListener],
        secure: [Function: onConnectSecure],
        session: [Function (anonymous)],
        free: [Function: onFree],
        timeout: [Function: onTimeout],
        agentRemove: [Function: onRemove],
        error: [Function: socketErrorListener],
        finish: [Function: bound onceWrapper] { listener: [Function: destroy] }
      },
      _eventsCount: 10,
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'api.mercadolibre.com',
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        constructed: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: true,
        needDrain: false,
        ending: true,
        ended: true,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: undefined,
      _server: null,
      ssl: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      _requestCert: true,
      _rejectUnauthorized: true,
      parser: null,
      _httpMessage: [Circular *2],
      [Symbol(res)]: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(verified)]: true,
      [Symbol(pendingSession)]: null,
      [Symbol(async_id_symbol)]: 535,
      [Symbol(kHandle)]: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: false,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 60,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(connect-options)]: {
        rejectUnauthorized: true,
        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
        checkServerIdentity: [Function: checkServerIdentity],
        minDHSize: 1024,
        maxRedirects: 21,
        maxBodyLength: 10485760,
        protocol: 'https:',
        path: null,
        method: 'GET',
        headers: {
          Accept: 'application/json, text/plain, */*',
          Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
          'User-Agent': 'axios/0.27.2'
        },
        agent: undefined,
        agents: { http: undefined, https: undefined },
        auth: undefined,
        hostname: 'api.mercadolibre.com',
        port: 443,
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 2f ae 8f c3 97 44 65 46 e3 34 ea 9b 47 d8 59 47 4d 85 7a fe cc ae a8 fc ed 0c 4a df c8 3e b4 05 04 ... 1937 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/shipments/41441506905',
        _defaultAgent: Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] { path: null },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          maxCachedSessions: 100,
          _sessionCache: {
            map: {
              'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 2f ae 8f c3 97 44 65 46 e3 34 ea 9b 47 d8 59 47 4d 85 7a fe cc ae a8 fc ed 0c 4a df c8 3e b4 05 04 ... 1937 more bytes>
            },
            list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
          },
          [Symbol(kCapture)]: false
        },
        host: 'api.mercadolibre.com',
        servername: 'api.mercadolibre.com',
        _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
        encoding: null,
        singleUse: true
      },
      [Symbol(RequestTimeout)]: undefined
    },
    _header: 'GET /shipments/41441506905 HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'Authorization: Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378\r\n' +
      'User-Agent: axios/0.27.2\r\n' +
      'Host: api.mercadolibre.com\r\n' +
      'Connection: close\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: <ref *3> Agent {
      _events: [Object: null prototype] {
        free: [Function (anonymous)],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] { path: null },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {
        'api.mercadolibre.com:443:::::::::::::::::::::': [
          <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'api.mercadolibre.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 10,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'api.mercadolibre.com',
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *2],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 535,
            [Symbol(kHandle)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              maxRedirects: 21,
              maxBodyLength: 10485760,
              protocol: 'https:',
              path: null,
              method: 'GET',
              headers: {
                Accept: 'application/json, text/plain, */*',
                Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                'User-Agent': 'axios/0.27.2'
              },
              agent: undefined,
              agents: { http: undefined, https: undefined },
              auth: undefined,
              hostname: 'api.mercadolibre.com',
              port: 443,
              nativeProtocols: {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: [Circular *3],
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/shipments/41441506905',
              _defaultAgent: [Circular *3],
              host: 'api.mercadolibre.com',
              servername: 'api.mercadolibre.com',
              _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            },
            [Symbol(RequestTimeout)]: undefined
          }
        ]
      },
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      maxCachedSessions: 100,
      _sessionCache: {
        map: {
          'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 2f ae 8f c3 97 44 65 46 e3 34 ea 9b 47 d8 59 47 4d 85 7a fe cc ae a8 fc ed 0c 4a df c8 3e b4 05 04 ... 1937 more bytes>
        },
        list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
      },
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    path: '/shipments/41441506905',
    _ended: true,
    res: IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        constructed: true,
        sync: false,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        destroyed: true,
        errored: null,
        closed: true,
        closeEmitted: true,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
        data: [Function: handleStreamData],
        aborted: [Function: handlerStreamAborted],
        error: [Function: handleStreamError]
      },
      _eventsCount: 4,
      _maxListeners: undefined,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadolibre.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadolibre.com',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 535,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: null,
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: 443,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 2f ae 8f c3 97 44 65 46 e3 34 ea 9b 47 d8 59 47 4d 85 7a fe cc ae a8 fc ed 0c 4a df c8 3e b4 05 04 ... 1937 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/shipments/41441506905',
          _defaultAgent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 2f ae 8f c3 97 44 65 46 e3 34 ea 9b 47 d8 59 47 4d 85 7a fe cc ae a8 fc ed 0c 4a df c8 3e b4 05 04 ... 1937 more bytes>
              },
              list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'api.mercadolibre.com',
          servername: 'api.mercadolibre.com',
          _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        },
        [Symbol(RequestTimeout)]: undefined
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [
        'Content-Type',
        'application/json',
        'Transfer-Encoding',
        'chunked',
        'Connection',
        'close',
        'Date',
        'Mon, 13 Jun 2022 00:35:07 GMT',
        'X-Content-Type-Options',
        'nosniff',
        'X-Request-Id',
        '29f47b67-add7-4719-b56f-e5d44aadb091',
        'X-Frame-Options',
        'DENY',
        'X-XSS-Protection',
        '1; mode=block',
        'Access-Control-Allow-Origin',
        '*',
        'Access-Control-Allow-Headers',
        'Content-Type',
        'Access-Control-Allow-Methods',
        'PUT, GET, POST, DELETE, OPTIONS',
        'Access-Control-Max-Age',
        '86400',
        'X-Cache',
        'Error from cloudfront',
        'Via',
        '1.1 bf1e69d85e8944fe5ebef366af48a17a.cloudfront.net (CloudFront)',
        'X-Amz-Cf-Pop',
        'EZE51-C1',
        'X-Amz-Cf-Id',
        'SmrN93Eu-0mBfUK7o0yZtZM6RGbL2IFLodlixLQmDcwheuLDz60DGA=='
      ],
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 401,
      statusMessage: 'Unauthorized',
      client: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadolibre.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadolibre.com',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 535,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: null,
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: 443,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 2f ae 8f c3 97 44 65 46 e3 34 ea 9b 47 d8 59 47 4d 85 7a fe cc ae a8 fc ed 0c 4a df c8 3e b4 05 04 ... 1937 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/shipments/41441506905',
          _defaultAgent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 2f ae 8f c3 97 44 65 46 e3 34 ea 9b 47 d8 59 47 4d 85 7a fe cc ae a8 fc ed 0c 4a df c8 3e b4 05 04 ... 1937 more bytes>
              },
              list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'api.mercadolibre.com',
          servername: 'api.mercadolibre.com',
          _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        },
        [Symbol(RequestTimeout)]: undefined
      },
      _consuming: true,
      _dumped: false,
      req: [Circular *2],
      responseUrl: 'https://api.mercadolibre.com/shipments/41441506905',
      redirects: [],
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: {
        'content-type': 'application/json',
        'transfer-encoding': 'chunked',
        connection: 'close',
        date: 'Mon, 13 Jun 2022 00:35:07 GMT',
        'x-content-type-options': 'nosniff',
        'x-request-id': '29f47b67-add7-4719-b56f-e5d44aadb091',
        'x-frame-options': 'DENY',
        'x-xss-protection': '1; mode=block',
        'access-control-allow-origin': '*',
        'access-control-allow-headers': 'Content-Type',
        'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
        'access-control-max-age': '86400',
        'x-cache': 'Error from cloudfront',
        via: '1.1 bf1e69d85e8944fe5ebef366af48a17a.cloudfront.net (CloudFront)',
        'x-amz-cf-pop': 'EZE51-C1',
        'x-amz-cf-id': 'SmrN93Eu-0mBfUK7o0yZtZM6RGbL2IFLodlixLQmDcwheuLDz60DGA=='
      },
      [Symbol(kHeadersCount)]: 32,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: false,
    host: 'api.mercadolibre.com',
    protocol: 'https:',
    _redirectable: Writable {
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      _events: [Object: null prototype] {
        response: [Function: handleResponse],
        error: [Function: handleRequestError],
        socket: [Function: handleRequestSocket]
      },
      _eventsCount: 3,
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: 10485760,
        protocol: 'https:',
        path: '/shipments/41441506905',
        method: 'GET',
        headers: {
          Accept: 'application/json, text/plain, */*',
          Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
          'User-Agent': 'axios/0.27.2'
        },
        agent: undefined,
        agents: { http: undefined, https: undefined },
        auth: undefined,
        hostname: 'api.mercadolibre.com',
        port: null,
        nativeProtocols: <ref *4> {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [
                  <ref *1> TLSSocket {
                    _tlsOptions: {
                      allowHalfOpen: undefined,
                      pipe: false,
                      secureContext: SecureContext { context: SecureContext {} },
                      isServer: false,
                      requestCert: true,
                      rejectUnauthorized: true,
                      session: undefined,
                      ALPNProtocols: undefined,
                      requestOCSP: undefined,
                      enableTrace: undefined,
                      pskCallback: undefined,
                      highWaterMark: undefined,
                      onread: undefined,
                      signal: undefined
                    },
                    _secureEstablished: true,
                    _securePending: false,
                    _newSessionPending: false,
                    _controlReleased: true,
                    secureConnecting: false,
                    _SNICallback: null,
                    servername: 'api.mercadolibre.com',
                    alpnProtocol: false,
                    authorized: true,
                    authorizationError: null,
                    encrypted: true,
                    _events: [Object: null prototype] {
                      close: [
                        [Function: onSocketCloseDestroySSL],
                        [Function: bound onceWrapper] {
                          listener: [Function (anonymous)]
                        },
                        [Function: onClose],
                        [Function: socketCloseListener]
                      ],
                      end: [Function: onReadableStreamEnd],
                      newListener: [Function: keylogNewListener],
                      secure: [Function: onConnectSecure],
                      session: [Function (anonymous)],
                      free: [Function: onFree],
                      timeout: [Function: onTimeout],
                      agentRemove: [Function: onRemove],
                      error: [Function: socketErrorListener],
                      finish: [Function: bound onceWrapper] {
                        listener: [Function: destroy]
                      }
                    },
                    _eventsCount: 10,
                    connecting: false,
                    _hadError: false,
                    _parent: null,
                    _host: 'api.mercadolibre.com',
                    _readableState: ReadableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      buffer: BufferList { head: null, tail: null, length: 0 },
                      length: 0,
                      pipes: [],
                      flowing: true,
                      ended: false,
                      endEmitted: false,
                      reading: true,
                      constructed: true,
                      sync: false,
                      needReadable: true,
                      emittedReadable: false,
                      readableListening: false,
                      resumeScheduled: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      destroyed: false,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      defaultEncoding: 'utf8',
                      awaitDrainWriters: null,
                      multiAwaitDrain: false,
                      readingMore: false,
                      dataEmitted: true,
                      decoder: null,
                      encoding: null,
                      [Symbol(kPaused)]: false
                    },
                    _maxListeners: undefined,
                    _writableState: WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      finalCalled: true,
                      needDrain: false,
                      ending: true,
                      ended: true,
                      finished: false,
                      destroyed: false,
                      decodeStrings: false,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: false,
                      bufferProcessing: false,
                      onwrite: [Function: bound onwrite],
                      writecb: null,
                      writelen: 0,
                      afterWriteTickInfo: null,
                      buffered: [],
                      bufferedIndex: 0,
                      allBuffers: true,
                      allNoop: true,
                      pendingcb: 1,
                      constructed: true,
                      prefinished: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      [Symbol(kOnFinished)]: []
                    },
                    allowHalfOpen: false,
                    _sockname: null,
                    _pendingData: null,
                    _pendingEncoding: '',
                    server: undefined,
                    _server: null,
                    ssl: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _requestCert: true,
                    _rejectUnauthorized: true,
                    parser: null,
                    _httpMessage: [Circular *2],
                    [Symbol(res)]: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    [Symbol(verified)]: true,
                    [Symbol(pendingSession)]: null,
                    [Symbol(async_id_symbol)]: 535,
                    [Symbol(kHandle)]: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    [Symbol(lastWriteQueueSize)]: 0,
                    [Symbol(timeout)]: null,
                    [Symbol(kBuffer)]: null,
                    [Symbol(kBufferCb)]: null,
                    [Symbol(kBufferGen)]: null,
                    [Symbol(kCapture)]: false,
                    [Symbol(kSetNoDelay)]: false,
                    [Symbol(kSetKeepAlive)]: true,
                    [Symbol(kSetKeepAliveInitialDelay)]: 60,
                    [Symbol(kBytesRead)]: 0,
                    [Symbol(kBytesWritten)]: 0,
                    [Symbol(connect-options)]: {
                      rejectUnauthorized: true,
                      ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                      checkServerIdentity: [Function: checkServerIdentity],
                      minDHSize: 1024,
                      maxRedirects: 21,
                      maxBodyLength: 10485760,
                      protocol: 'https:',
                      path: null,
                      method: 'GET',
                      headers: {
                        Accept: 'application/json, text/plain, */*',
                        Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                        'User-Agent': 'axios/0.27.2'
                      },
                      agent: undefined,
                      agents: { http: undefined, https: undefined },
                      auth: undefined,
                      hostname: 'api.mercadolibre.com',
                      port: 443,
                      nativeProtocols: [Circular *4],
                      pathname: '/shipments/41441506905',
                      _defaultAgent: [Circular *3],
                      host: 'api.mercadolibre.com',
                      servername: 'api.mercadolibre.com',
                      _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
                      encoding: null,
                      singleUse: true
                    },
                    [Symbol(RequestTimeout)]: undefined
                  }
                ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 2f ae 8f c3 97 44 65 46 e3 34 ea 9b 47 d8 59 47 4d 85 7a fe cc ae a8 fc ed 0c 4a df c8 3e b4 05 04 ... 1937 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/shipments/41441506905'
      },
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *2],
      _currentUrl: 'https://api.mercadolibre.com/shipments/41441506905',
      [Symbol(kCapture)]: false
    },
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [ 'Accept', 'application/json, text/plain, */*' ],
      authorization: [
        'Authorization',
        'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378'
      ],
      'user-agent': [ 'User-Agent', 'axios/0.27.2' ],
      host: [ 'Host', 'api.mercadolibre.com' ]
    }
  },
  response: {
    status: 401,
    statusText: 'Unauthorized',
    headers: {
      'content-type': 'application/json',
      'transfer-encoding': 'chunked',
      connection: 'close',
      date: 'Mon, 13 Jun 2022 00:35:07 GMT',
      'x-content-type-options': 'nosniff',
      'x-request-id': '29f47b67-add7-4719-b56f-e5d44aadb091',
      'x-frame-options': 'DENY',
      'x-xss-protection': '1; mode=block',
      'access-control-allow-origin': '*',
      'access-control-allow-headers': 'Content-Type',
      'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
      'access-control-max-age': '86400',
      'x-cache': 'Error from cloudfront',
      via: '1.1 bf1e69d85e8944fe5ebef366af48a17a.cloudfront.net (CloudFront)',
      'x-amz-cf-pop': 'EZE51-C1',
      'x-amz-cf-id': 'SmrN93Eu-0mBfUK7o0yZtZM6RGbL2IFLodlixLQmDcwheuLDz60DGA=='
    },
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [Function: httpAdapter],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        }
      },
      validateStatus: [Function: validateStatus],
      headers: {
        Accept: 'application/json, text/plain, */*',
        Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
        'User-Agent': 'axios/0.27.2'
      },
      method: 'get',
      url: 'https://api.mercadolibre.com/shipments/41441506905',
      data: undefined
    },
    request: <ref *2> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        prefinish: [Function: requestOnPrefinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadolibre.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadolibre.com',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 535,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: null,
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: 443,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 2f ae 8f c3 97 44 65 46 e3 34 ea 9b 47 d8 59 47 4d 85 7a fe cc ae a8 fc ed 0c 4a df c8 3e b4 05 04 ... 1937 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/shipments/41441506905',
          _defaultAgent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 2f ae 8f c3 97 44 65 46 e3 34 ea 9b 47 d8 59 47 4d 85 7a fe cc ae a8 fc ed 0c 4a df c8 3e b4 05 04 ... 1937 more bytes>
              },
              list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'api.mercadolibre.com',
          servername: 'api.mercadolibre.com',
          _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        },
        [Symbol(RequestTimeout)]: undefined
      },
      _header: 'GET /shipments/41441506905 HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Authorization: Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378\r\n' +
        'User-Agent: axios/0.27.2\r\n' +
        'Host: api.mercadolibre.com\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: <ref *3> Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype] { path: null },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'api.mercadolibre.com:443:::::::::::::::::::::': [
            <ref *1> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: true,
                session: undefined,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'api.mercadolibre.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 10,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'api.mercadolibre.com',
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: false,
                errored: null,
                closed: false,
                closeEmitted: false,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: true,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 1,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular *2],
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 535,
              [Symbol(kHandle)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(connect-options)]: {
                rejectUnauthorized: true,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                maxRedirects: 21,
                maxBodyLength: 10485760,
                protocol: 'https:',
                path: null,
                method: 'GET',
                headers: {
                  Accept: 'application/json, text/plain, */*',
                  Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                  'User-Agent': 'axios/0.27.2'
                },
                agent: undefined,
                agents: { http: undefined, https: undefined },
                auth: undefined,
                hostname: 'api.mercadolibre.com',
                port: 443,
                nativeProtocols: <ref *4> {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: [Circular *3],
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/shipments/41441506905',
                _defaultAgent: [Circular *3],
                host: 'api.mercadolibre.com',
                servername: 'api.mercadolibre.com',
                _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
                encoding: null,
                singleUse: true
              },
              [Symbol(RequestTimeout)]: undefined
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        maxCachedSessions: 100,
        _sessionCache: {
          map: {
            'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 2f ae 8f c3 97 44 65 46 e3 34 ea 9b 47 d8 59 47 4d 85 7a fe cc ae a8 fc ed 0c 4a df c8 3e b4 05 04 ... 1937 more bytes>
          },
          list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
        },
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      path: '/shipments/41441506905',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          constructed: true,
          sync: false,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          destroyed: true,
          errored: null,
          closed: true,
          closeEmitted: true,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          data: [Function: handleStreamData],
          aborted: [Function: handlerStreamAborted],
          error: [Function: handleStreamError]
        },
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'api.mercadolibre.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'api.mercadolibre.com',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 535,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: 10485760,
            protocol: 'https:',
            path: null,
            method: 'GET',
            headers: {
              Accept: 'application/json, text/plain, */*',
              Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
              'User-Agent': 'axios/0.27.2'
            },
            agent: undefined,
            agents: { http: undefined, https: undefined },
            auth: undefined,
            hostname: 'api.mercadolibre.com',
            port: 443,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] { path: null },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 2f ae 8f c3 97 44 65 46 e3 34 ea 9b 47 d8 59 47 4d 85 7a fe cc ae a8 fc ed 0c 4a df c8 3e b4 05 04 ... 1937 more bytes>
                    },
                    list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/shipments/41441506905',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 2f ae 8f c3 97 44 65 46 e3 34 ea 9b 47 d8 59 47 4d 85 7a fe cc ae a8 fc ed 0c 4a df c8 3e b4 05 04 ... 1937 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'api.mercadolibre.com',
            servername: 'api.mercadolibre.com',
            _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          },
          [Symbol(RequestTimeout)]: undefined
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
          'Content-Type',
          'application/json',
          'Transfer-Encoding',
          'chunked',
          'Connection',
          'close',
          'Date',
          'Mon, 13 Jun 2022 00:35:07 GMT',
          'X-Content-Type-Options',
          'nosniff',
          'X-Request-Id',
          '29f47b67-add7-4719-b56f-e5d44aadb091',
          'X-Frame-Options',
          'DENY',
          'X-XSS-Protection',
          '1; mode=block',
          'Access-Control-Allow-Origin',
          '*',
          'Access-Control-Allow-Headers',
          'Content-Type',
          'Access-Control-Allow-Methods',
          'PUT, GET, POST, DELETE, OPTIONS',
          'Access-Control-Max-Age',
          '86400',
          'X-Cache',
          'Error from cloudfront',
          'Via',
          '1.1 bf1e69d85e8944fe5ebef366af48a17a.cloudfront.net (CloudFront)',
          'X-Amz-Cf-Pop',
          'EZE51-C1',
          'X-Amz-Cf-Id',
          'SmrN93Eu-0mBfUK7o0yZtZM6RGbL2IFLodlixLQmDcwheuLDz60DGA=='
        ],
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 401,
        statusMessage: 'Unauthorized',
        client: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'api.mercadolibre.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'api.mercadolibre.com',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 535,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: 10485760,
            protocol: 'https:',
            path: null,
            method: 'GET',
            headers: {
              Accept: 'application/json, text/plain, */*',
              Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
              'User-Agent': 'axios/0.27.2'
            },
            agent: undefined,
            agents: { http: undefined, https: undefined },
            auth: undefined,
            hostname: 'api.mercadolibre.com',
            port: 443,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] { path: null },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 2f ae 8f c3 97 44 65 46 e3 34 ea 9b 47 d8 59 47 4d 85 7a fe cc ae a8 fc ed 0c 4a df c8 3e b4 05 04 ... 1937 more bytes>
                    },
                    list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/shipments/41441506905',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 2f ae 8f c3 97 44 65 46 e3 34 ea 9b 47 d8 59 47 4d 85 7a fe cc ae a8 fc ed 0c 4a df c8 3e b4 05 04 ... 1937 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'api.mercadolibre.com',
            servername: 'api.mercadolibre.com',
            _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          },
          [Symbol(RequestTimeout)]: undefined
        },
        _consuming: true,
        _dumped: false,
        req: [Circular *2],
        responseUrl: 'https://api.mercadolibre.com/shipments/41441506905',
        redirects: [],
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
          'content-type': 'application/json',
          'transfer-encoding': 'chunked',
          connection: 'close',
          date: 'Mon, 13 Jun 2022 00:35:07 GMT',
          'x-content-type-options': 'nosniff',
          'x-request-id': '29f47b67-add7-4719-b56f-e5d44aadb091',
          'x-frame-options': 'DENY',
          'x-xss-protection': '1; mode=block',
          'access-control-allow-origin': '*',
          'access-control-allow-headers': 'Content-Type',
          'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
          'access-control-max-age': '86400',
          'x-cache': 'Error from cloudfront',
          via: '1.1 bf1e69d85e8944fe5ebef366af48a17a.cloudfront.net (CloudFront)',
          'x-amz-cf-pop': 'EZE51-C1',
          'x-amz-cf-id': 'SmrN93Eu-0mBfUK7o0yZtZM6RGbL2IFLodlixLQmDcwheuLDz60DGA=='
        },
        [Symbol(kHeadersCount)]: 32,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'api.mercadolibre.com',
      protocol: 'https:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError],
          socket: [Function: handleRequestSocket]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: '/shipments/41441506905',
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: null,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [
                    <ref *1> TLSSocket {
                      _tlsOptions: {
                        allowHalfOpen: undefined,
                        pipe: false,
                        secureContext: SecureContext { context: SecureContext {} },
                        isServer: false,
                        requestCert: true,
                        rejectUnauthorized: true,
                        session: undefined,
                        ALPNProtocols: undefined,
                        requestOCSP: undefined,
                        enableTrace: undefined,
                        pskCallback: undefined,
                        highWaterMark: undefined,
                        onread: undefined,
                        signal: undefined
                      },
                      _secureEstablished: true,
                      _securePending: false,
                      _newSessionPending: false,
                      _controlReleased: true,
                      secureConnecting: false,
                      _SNICallback: null,
                      servername: 'api.mercadolibre.com',
                      alpnProtocol: false,
                      authorized: true,
                      authorizationError: null,
                      encrypted: true,
                      _events: [Object: null prototype] {
                        close: [
                          [Function: onSocketCloseDestroySSL],
                          [Function: bound onceWrapper] {
                            listener: [Function (anonymous)]
                          },
                          [Function: onClose],
                          [Function: socketCloseListener]
                        ],
                        end: [Function: onReadableStreamEnd],
                        newListener: [Function: keylogNewListener],
                        secure: [Function: onConnectSecure],
                        session: [Function (anonymous)],
                        free: [Function: onFree],
                        timeout: [Function: onTimeout],
                        agentRemove: [Function: onRemove],
                        error: [Function: socketErrorListener],
                        finish: [Function: bound onceWrapper] {
                          listener: [Function: destroy]
                        }
                      },
                      _eventsCount: 10,
                      connecting: false,
                      _hadError: false,
                      _parent: null,
                      _host: 'api.mercadolibre.com',
                      _readableState: ReadableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        buffer: BufferList { head: null, tail: null, length: 0 },
                        length: 0,
                        pipes: [],
                        flowing: true,
                        ended: false,
                        endEmitted: false,
                        reading: true,
                        constructed: true,
                        sync: false,
                        needReadable: true,
                        emittedReadable: false,
                        readableListening: false,
                        resumeScheduled: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        destroyed: false,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        defaultEncoding: 'utf8',
                        awaitDrainWriters: null,
                        multiAwaitDrain: false,
                        readingMore: false,
                        dataEmitted: true,
                        decoder: null,
                        encoding: null,
                        [Symbol(kPaused)]: false
                      },
                      _maxListeners: undefined,
                      _writableState: WritableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        finalCalled: true,
                        needDrain: false,
                        ending: true,
                        ended: true,
                        finished: false,
                        destroyed: false,
                        decodeStrings: false,
                        defaultEncoding: 'utf8',
                        length: 0,
                        writing: false,
                        corked: 0,
                        sync: false,
                        bufferProcessing: false,
                        onwrite: [Function: bound onwrite],
                        writecb: null,
                        writelen: 0,
                        afterWriteTickInfo: null,
                        buffered: [],
                        bufferedIndex: 0,
                        allBuffers: true,
                        allNoop: true,
                        pendingcb: 1,
                        constructed: true,
                        prefinished: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        [Symbol(kOnFinished)]: []
                      },
                      allowHalfOpen: false,
                      _sockname: null,
                      _pendingData: null,
                      _pendingEncoding: '',
                      server: undefined,
                      _server: null,
                      ssl: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _requestCert: true,
                      _rejectUnauthorized: true,
                      parser: null,
                      _httpMessage: [Circular *2],
                      [Symbol(res)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(verified)]: true,
                      [Symbol(pendingSession)]: null,
                      [Symbol(async_id_symbol)]: 535,
                      [Symbol(kHandle)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(lastWriteQueueSize)]: 0,
                      [Symbol(timeout)]: null,
                      [Symbol(kBuffer)]: null,
                      [Symbol(kBufferCb)]: null,
                      [Symbol(kBufferGen)]: null,
                      [Symbol(kCapture)]: false,
                      [Symbol(kSetNoDelay)]: false,
                      [Symbol(kSetKeepAlive)]: true,
                      [Symbol(kSetKeepAliveInitialDelay)]: 60,
                      [Symbol(kBytesRead)]: 0,
                      [Symbol(kBytesWritten)]: 0,
                      [Symbol(connect-options)]: {
                        rejectUnauthorized: true,
                        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                        checkServerIdentity: [Function: checkServerIdentity],
                        minDHSize: 1024,
                        maxRedirects: 21,
                        maxBodyLength: 10485760,
                        protocol: 'https:',
                        path: null,
                        method: 'GET',
                        headers: {
                          Accept: 'application/json, text/plain, */*',
                          Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                          'User-Agent': 'axios/0.27.2'
                        },
                        agent: undefined,
                        agents: { http: undefined, https: undefined },
                        auth: undefined,
                        hostname: 'api.mercadolibre.com',
                        port: 443,
                        nativeProtocols: [Circular *4],
                        pathname: '/shipments/41441506905',
                        _defaultAgent: [Circular *3],
                        host: 'api.mercadolibre.com',
                        servername: 'api.mercadolibre.com',
                        _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
                        encoding: null,
                        singleUse: true
                      },
                      [Symbol(RequestTimeout)]: undefined
                    }
                  ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 2f ae 8f c3 97 44 65 46 e3 34 ea 9b 47 d8 59 47 4d 85 7a fe cc ae a8 fc ed 0c 4a df c8 3e b4 05 04 ... 1937 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/shipments/41441506905'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 0,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *2],
        _currentUrl: 'https://api.mercadolibre.com/shipments/41441506905',
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        authorization: [
          'Authorization',
          'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378'
        ],
        'user-agent': [ 'User-Agent', 'axios/0.27.2' ],
        host: [ 'Host', 'api.mercadolibre.com' ]
      }
    },
    data: {
      message: 'invalid_token',
      error: 'not_found',
      status: 401,
      cause: []
    }
  },
  level: 'error',
  timestamp: '2022-06-13T00:35:08.205Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:35:31.053Z'
}
{
  message: 'Request failed with status code 401',
  name: 'AxiosError',
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [Function: httpAdapter],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] {
        LINE_BREAK: '\r\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      }
    },
    validateStatus: [Function: validateStatus],
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
      'User-Agent': 'axios/0.27.2'
    },
    method: 'get',
    url: 'https://api.mercadolibre.com/shipments/41441506905',
    data: undefined
  },
  request: <ref *2> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      prefinish: [Function: requestOnPrefinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: false,
    socket: <ref *1> TLSSocket {
      _tlsOptions: {
        allowHalfOpen: undefined,
        pipe: false,
        secureContext: SecureContext { context: SecureContext {} },
        isServer: false,
        requestCert: true,
        rejectUnauthorized: true,
        session: undefined,
        ALPNProtocols: undefined,
        requestOCSP: undefined,
        enableTrace: undefined,
        pskCallback: undefined,
        highWaterMark: undefined,
        onread: undefined,
        signal: undefined
      },
      _secureEstablished: true,
      _securePending: false,
      _newSessionPending: false,
      _controlReleased: true,
      secureConnecting: false,
      _SNICallback: null,
      servername: 'api.mercadolibre.com',
      alpnProtocol: false,
      authorized: true,
      authorizationError: null,
      encrypted: true,
      _events: [Object: null prototype] {
        close: [
          [Function: onSocketCloseDestroySSL],
          [Function: bound onceWrapper] {
            listener: [Function (anonymous)]
          },
          [Function: onClose],
          [Function: socketCloseListener]
        ],
        end: [Function: onReadableStreamEnd],
        newListener: [Function: keylogNewListener],
        secure: [Function: onConnectSecure],
        session: [Function (anonymous)],
        free: [Function: onFree],
        timeout: [Function: onTimeout],
        agentRemove: [Function: onRemove],
        error: [Function: socketErrorListener],
        finish: [Function: bound onceWrapper] { listener: [Function: destroy] }
      },
      _eventsCount: 10,
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'api.mercadolibre.com',
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        constructed: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: true,
        needDrain: false,
        ending: true,
        ended: true,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: undefined,
      _server: null,
      ssl: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      _requestCert: true,
      _rejectUnauthorized: true,
      parser: null,
      _httpMessage: [Circular *2],
      [Symbol(res)]: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(verified)]: true,
      [Symbol(pendingSession)]: null,
      [Symbol(async_id_symbol)]: 458,
      [Symbol(kHandle)]: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: false,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 60,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(connect-options)]: {
        rejectUnauthorized: true,
        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
        checkServerIdentity: [Function: checkServerIdentity],
        minDHSize: 1024,
        maxRedirects: 21,
        maxBodyLength: 10485760,
        protocol: 'https:',
        path: null,
        method: 'GET',
        headers: {
          Accept: 'application/json, text/plain, */*',
          Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
          'User-Agent': 'axios/0.27.2'
        },
        agent: undefined,
        agents: { http: undefined, https: undefined },
        auth: undefined,
        hostname: 'api.mercadolibre.com',
        port: 443,
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 d0 6f 82 b0 04 be 49 19 ee 92 aa c6 ae 43 b2 ee af f9 d4 5c 36 27 08 fa 3c 5c 23 98 dd f1 33 11 04 ... 1936 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/shipments/41441506905',
        _defaultAgent: Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] { path: null },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          maxCachedSessions: 100,
          _sessionCache: {
            map: {
              'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 d0 6f 82 b0 04 be 49 19 ee 92 aa c6 ae 43 b2 ee af f9 d4 5c 36 27 08 fa 3c 5c 23 98 dd f1 33 11 04 ... 1936 more bytes>
            },
            list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
          },
          [Symbol(kCapture)]: false
        },
        host: 'api.mercadolibre.com',
        servername: 'api.mercadolibre.com',
        _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
        encoding: null,
        singleUse: true
      },
      [Symbol(RequestTimeout)]: undefined
    },
    _header: 'GET /shipments/41441506905 HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'Authorization: Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378\r\n' +
      'User-Agent: axios/0.27.2\r\n' +
      'Host: api.mercadolibre.com\r\n' +
      'Connection: close\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: <ref *3> Agent {
      _events: [Object: null prototype] {
        free: [Function (anonymous)],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] { path: null },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {
        'api.mercadolibre.com:443:::::::::::::::::::::': [
          <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'api.mercadolibre.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 10,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'api.mercadolibre.com',
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *2],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 458,
            [Symbol(kHandle)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              maxRedirects: 21,
              maxBodyLength: 10485760,
              protocol: 'https:',
              path: null,
              method: 'GET',
              headers: {
                Accept: 'application/json, text/plain, */*',
                Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                'User-Agent': 'axios/0.27.2'
              },
              agent: undefined,
              agents: { http: undefined, https: undefined },
              auth: undefined,
              hostname: 'api.mercadolibre.com',
              port: 443,
              nativeProtocols: {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: [Circular *3],
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/shipments/41441506905',
              _defaultAgent: [Circular *3],
              host: 'api.mercadolibre.com',
              servername: 'api.mercadolibre.com',
              _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            },
            [Symbol(RequestTimeout)]: undefined
          }
        ]
      },
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      maxCachedSessions: 100,
      _sessionCache: {
        map: {
          'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 d0 6f 82 b0 04 be 49 19 ee 92 aa c6 ae 43 b2 ee af f9 d4 5c 36 27 08 fa 3c 5c 23 98 dd f1 33 11 04 ... 1936 more bytes>
        },
        list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
      },
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    path: '/shipments/41441506905',
    _ended: true,
    res: IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        constructed: true,
        sync: false,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        destroyed: true,
        errored: null,
        closed: true,
        closeEmitted: true,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
        data: [Function: handleStreamData],
        aborted: [Function: handlerStreamAborted],
        error: [Function: handleStreamError]
      },
      _eventsCount: 4,
      _maxListeners: undefined,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadolibre.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadolibre.com',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 458,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: null,
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: 443,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 d0 6f 82 b0 04 be 49 19 ee 92 aa c6 ae 43 b2 ee af f9 d4 5c 36 27 08 fa 3c 5c 23 98 dd f1 33 11 04 ... 1936 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/shipments/41441506905',
          _defaultAgent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 d0 6f 82 b0 04 be 49 19 ee 92 aa c6 ae 43 b2 ee af f9 d4 5c 36 27 08 fa 3c 5c 23 98 dd f1 33 11 04 ... 1936 more bytes>
              },
              list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'api.mercadolibre.com',
          servername: 'api.mercadolibre.com',
          _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        },
        [Symbol(RequestTimeout)]: undefined
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [
        'Content-Type',
        'application/json',
        'Transfer-Encoding',
        'chunked',
        'Connection',
        'close',
        'Date',
        'Mon, 13 Jun 2022 00:35:34 GMT',
        'X-Content-Type-Options',
        'nosniff',
        'X-Request-Id',
        '525910d6-2f67-467e-8eb0-c96f6450ecde',
        'X-Frame-Options',
        'DENY',
        'X-XSS-Protection',
        '1; mode=block',
        'Access-Control-Allow-Origin',
        '*',
        'Access-Control-Allow-Headers',
        'Content-Type',
        'Access-Control-Allow-Methods',
        'PUT, GET, POST, DELETE, OPTIONS',
        'Access-Control-Max-Age',
        '86400',
        'X-Cache',
        'Error from cloudfront',
        'Via',
        '1.1 d8d1e90003fb03ebdebc0927366befa6.cloudfront.net (CloudFront)',
        'X-Amz-Cf-Pop',
        'EZE50-P1',
        'X-Amz-Cf-Id',
        'Bmi6-CjiLhe9ywBdA1WKx8G9AJfOXlTpv39RjipKd2U1wrjKGLb2bg=='
      ],
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 401,
      statusMessage: 'Unauthorized',
      client: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadolibre.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadolibre.com',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 458,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: null,
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: 443,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 d0 6f 82 b0 04 be 49 19 ee 92 aa c6 ae 43 b2 ee af f9 d4 5c 36 27 08 fa 3c 5c 23 98 dd f1 33 11 04 ... 1936 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/shipments/41441506905',
          _defaultAgent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 d0 6f 82 b0 04 be 49 19 ee 92 aa c6 ae 43 b2 ee af f9 d4 5c 36 27 08 fa 3c 5c 23 98 dd f1 33 11 04 ... 1936 more bytes>
              },
              list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'api.mercadolibre.com',
          servername: 'api.mercadolibre.com',
          _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        },
        [Symbol(RequestTimeout)]: undefined
      },
      _consuming: true,
      _dumped: false,
      req: [Circular *2],
      responseUrl: 'https://api.mercadolibre.com/shipments/41441506905',
      redirects: [],
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: {
        'content-type': 'application/json',
        'transfer-encoding': 'chunked',
        connection: 'close',
        date: 'Mon, 13 Jun 2022 00:35:34 GMT',
        'x-content-type-options': 'nosniff',
        'x-request-id': '525910d6-2f67-467e-8eb0-c96f6450ecde',
        'x-frame-options': 'DENY',
        'x-xss-protection': '1; mode=block',
        'access-control-allow-origin': '*',
        'access-control-allow-headers': 'Content-Type',
        'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
        'access-control-max-age': '86400',
        'x-cache': 'Error from cloudfront',
        via: '1.1 d8d1e90003fb03ebdebc0927366befa6.cloudfront.net (CloudFront)',
        'x-amz-cf-pop': 'EZE50-P1',
        'x-amz-cf-id': 'Bmi6-CjiLhe9ywBdA1WKx8G9AJfOXlTpv39RjipKd2U1wrjKGLb2bg=='
      },
      [Symbol(kHeadersCount)]: 32,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: false,
    host: 'api.mercadolibre.com',
    protocol: 'https:',
    _redirectable: Writable {
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      _events: [Object: null prototype] {
        response: [Function: handleResponse],
        error: [Function: handleRequestError],
        socket: [Function: handleRequestSocket]
      },
      _eventsCount: 3,
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: 10485760,
        protocol: 'https:',
        path: '/shipments/41441506905',
        method: 'GET',
        headers: {
          Accept: 'application/json, text/plain, */*',
          Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
          'User-Agent': 'axios/0.27.2'
        },
        agent: undefined,
        agents: { http: undefined, https: undefined },
        auth: undefined,
        hostname: 'api.mercadolibre.com',
        port: null,
        nativeProtocols: <ref *4> {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [
                  <ref *1> TLSSocket {
                    _tlsOptions: {
                      allowHalfOpen: undefined,
                      pipe: false,
                      secureContext: SecureContext { context: SecureContext {} },
                      isServer: false,
                      requestCert: true,
                      rejectUnauthorized: true,
                      session: undefined,
                      ALPNProtocols: undefined,
                      requestOCSP: undefined,
                      enableTrace: undefined,
                      pskCallback: undefined,
                      highWaterMark: undefined,
                      onread: undefined,
                      signal: undefined
                    },
                    _secureEstablished: true,
                    _securePending: false,
                    _newSessionPending: false,
                    _controlReleased: true,
                    secureConnecting: false,
                    _SNICallback: null,
                    servername: 'api.mercadolibre.com',
                    alpnProtocol: false,
                    authorized: true,
                    authorizationError: null,
                    encrypted: true,
                    _events: [Object: null prototype] {
                      close: [
                        [Function: onSocketCloseDestroySSL],
                        [Function: bound onceWrapper] {
                          listener: [Function (anonymous)]
                        },
                        [Function: onClose],
                        [Function: socketCloseListener]
                      ],
                      end: [Function: onReadableStreamEnd],
                      newListener: [Function: keylogNewListener],
                      secure: [Function: onConnectSecure],
                      session: [Function (anonymous)],
                      free: [Function: onFree],
                      timeout: [Function: onTimeout],
                      agentRemove: [Function: onRemove],
                      error: [Function: socketErrorListener],
                      finish: [Function: bound onceWrapper] {
                        listener: [Function: destroy]
                      }
                    },
                    _eventsCount: 10,
                    connecting: false,
                    _hadError: false,
                    _parent: null,
                    _host: 'api.mercadolibre.com',
                    _readableState: ReadableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      buffer: BufferList { head: null, tail: null, length: 0 },
                      length: 0,
                      pipes: [],
                      flowing: true,
                      ended: false,
                      endEmitted: false,
                      reading: true,
                      constructed: true,
                      sync: false,
                      needReadable: true,
                      emittedReadable: false,
                      readableListening: false,
                      resumeScheduled: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      destroyed: false,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      defaultEncoding: 'utf8',
                      awaitDrainWriters: null,
                      multiAwaitDrain: false,
                      readingMore: false,
                      dataEmitted: true,
                      decoder: null,
                      encoding: null,
                      [Symbol(kPaused)]: false
                    },
                    _maxListeners: undefined,
                    _writableState: WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      finalCalled: true,
                      needDrain: false,
                      ending: true,
                      ended: true,
                      finished: false,
                      destroyed: false,
                      decodeStrings: false,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: false,
                      bufferProcessing: false,
                      onwrite: [Function: bound onwrite],
                      writecb: null,
                      writelen: 0,
                      afterWriteTickInfo: null,
                      buffered: [],
                      bufferedIndex: 0,
                      allBuffers: true,
                      allNoop: true,
                      pendingcb: 1,
                      constructed: true,
                      prefinished: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      [Symbol(kOnFinished)]: []
                    },
                    allowHalfOpen: false,
                    _sockname: null,
                    _pendingData: null,
                    _pendingEncoding: '',
                    server: undefined,
                    _server: null,
                    ssl: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _requestCert: true,
                    _rejectUnauthorized: true,
                    parser: null,
                    _httpMessage: [Circular *2],
                    [Symbol(res)]: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    [Symbol(verified)]: true,
                    [Symbol(pendingSession)]: null,
                    [Symbol(async_id_symbol)]: 458,
                    [Symbol(kHandle)]: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    [Symbol(lastWriteQueueSize)]: 0,
                    [Symbol(timeout)]: null,
                    [Symbol(kBuffer)]: null,
                    [Symbol(kBufferCb)]: null,
                    [Symbol(kBufferGen)]: null,
                    [Symbol(kCapture)]: false,
                    [Symbol(kSetNoDelay)]: false,
                    [Symbol(kSetKeepAlive)]: true,
                    [Symbol(kSetKeepAliveInitialDelay)]: 60,
                    [Symbol(kBytesRead)]: 0,
                    [Symbol(kBytesWritten)]: 0,
                    [Symbol(connect-options)]: {
                      rejectUnauthorized: true,
                      ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                      checkServerIdentity: [Function: checkServerIdentity],
                      minDHSize: 1024,
                      maxRedirects: 21,
                      maxBodyLength: 10485760,
                      protocol: 'https:',
                      path: null,
                      method: 'GET',
                      headers: {
                        Accept: 'application/json, text/plain, */*',
                        Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                        'User-Agent': 'axios/0.27.2'
                      },
                      agent: undefined,
                      agents: { http: undefined, https: undefined },
                      auth: undefined,
                      hostname: 'api.mercadolibre.com',
                      port: 443,
                      nativeProtocols: [Circular *4],
                      pathname: '/shipments/41441506905',
                      _defaultAgent: [Circular *3],
                      host: 'api.mercadolibre.com',
                      servername: 'api.mercadolibre.com',
                      _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
                      encoding: null,
                      singleUse: true
                    },
                    [Symbol(RequestTimeout)]: undefined
                  }
                ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 d0 6f 82 b0 04 be 49 19 ee 92 aa c6 ae 43 b2 ee af f9 d4 5c 36 27 08 fa 3c 5c 23 98 dd f1 33 11 04 ... 1936 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/shipments/41441506905'
      },
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *2],
      _currentUrl: 'https://api.mercadolibre.com/shipments/41441506905',
      [Symbol(kCapture)]: false
    },
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [ 'Accept', 'application/json, text/plain, */*' ],
      authorization: [
        'Authorization',
        'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378'
      ],
      'user-agent': [ 'User-Agent', 'axios/0.27.2' ],
      host: [ 'Host', 'api.mercadolibre.com' ]
    }
  },
  response: {
    status: 401,
    statusText: 'Unauthorized',
    headers: {
      'content-type': 'application/json',
      'transfer-encoding': 'chunked',
      connection: 'close',
      date: 'Mon, 13 Jun 2022 00:35:34 GMT',
      'x-content-type-options': 'nosniff',
      'x-request-id': '525910d6-2f67-467e-8eb0-c96f6450ecde',
      'x-frame-options': 'DENY',
      'x-xss-protection': '1; mode=block',
      'access-control-allow-origin': '*',
      'access-control-allow-headers': 'Content-Type',
      'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
      'access-control-max-age': '86400',
      'x-cache': 'Error from cloudfront',
      via: '1.1 d8d1e90003fb03ebdebc0927366befa6.cloudfront.net (CloudFront)',
      'x-amz-cf-pop': 'EZE50-P1',
      'x-amz-cf-id': 'Bmi6-CjiLhe9ywBdA1WKx8G9AJfOXlTpv39RjipKd2U1wrjKGLb2bg=='
    },
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [Function: httpAdapter],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        }
      },
      validateStatus: [Function: validateStatus],
      headers: {
        Accept: 'application/json, text/plain, */*',
        Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
        'User-Agent': 'axios/0.27.2'
      },
      method: 'get',
      url: 'https://api.mercadolibre.com/shipments/41441506905',
      data: undefined
    },
    request: <ref *2> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        prefinish: [Function: requestOnPrefinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadolibre.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadolibre.com',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 458,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: null,
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: 443,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 d0 6f 82 b0 04 be 49 19 ee 92 aa c6 ae 43 b2 ee af f9 d4 5c 36 27 08 fa 3c 5c 23 98 dd f1 33 11 04 ... 1936 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/shipments/41441506905',
          _defaultAgent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 d0 6f 82 b0 04 be 49 19 ee 92 aa c6 ae 43 b2 ee af f9 d4 5c 36 27 08 fa 3c 5c 23 98 dd f1 33 11 04 ... 1936 more bytes>
              },
              list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'api.mercadolibre.com',
          servername: 'api.mercadolibre.com',
          _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        },
        [Symbol(RequestTimeout)]: undefined
      },
      _header: 'GET /shipments/41441506905 HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Authorization: Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378\r\n' +
        'User-Agent: axios/0.27.2\r\n' +
        'Host: api.mercadolibre.com\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: <ref *3> Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype] { path: null },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'api.mercadolibre.com:443:::::::::::::::::::::': [
            <ref *1> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: true,
                session: undefined,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'api.mercadolibre.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 10,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'api.mercadolibre.com',
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: false,
                errored: null,
                closed: false,
                closeEmitted: false,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: true,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 1,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular *2],
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 458,
              [Symbol(kHandle)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(connect-options)]: {
                rejectUnauthorized: true,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                maxRedirects: 21,
                maxBodyLength: 10485760,
                protocol: 'https:',
                path: null,
                method: 'GET',
                headers: {
                  Accept: 'application/json, text/plain, */*',
                  Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                  'User-Agent': 'axios/0.27.2'
                },
                agent: undefined,
                agents: { http: undefined, https: undefined },
                auth: undefined,
                hostname: 'api.mercadolibre.com',
                port: 443,
                nativeProtocols: <ref *4> {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: [Circular *3],
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/shipments/41441506905',
                _defaultAgent: [Circular *3],
                host: 'api.mercadolibre.com',
                servername: 'api.mercadolibre.com',
                _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
                encoding: null,
                singleUse: true
              },
              [Symbol(RequestTimeout)]: undefined
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        maxCachedSessions: 100,
        _sessionCache: {
          map: {
            'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 d0 6f 82 b0 04 be 49 19 ee 92 aa c6 ae 43 b2 ee af f9 d4 5c 36 27 08 fa 3c 5c 23 98 dd f1 33 11 04 ... 1936 more bytes>
          },
          list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
        },
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      path: '/shipments/41441506905',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          constructed: true,
          sync: false,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          destroyed: true,
          errored: null,
          closed: true,
          closeEmitted: true,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          data: [Function: handleStreamData],
          aborted: [Function: handlerStreamAborted],
          error: [Function: handleStreamError]
        },
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'api.mercadolibre.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'api.mercadolibre.com',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 458,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: 10485760,
            protocol: 'https:',
            path: null,
            method: 'GET',
            headers: {
              Accept: 'application/json, text/plain, */*',
              Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
              'User-Agent': 'axios/0.27.2'
            },
            agent: undefined,
            agents: { http: undefined, https: undefined },
            auth: undefined,
            hostname: 'api.mercadolibre.com',
            port: 443,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] { path: null },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 d0 6f 82 b0 04 be 49 19 ee 92 aa c6 ae 43 b2 ee af f9 d4 5c 36 27 08 fa 3c 5c 23 98 dd f1 33 11 04 ... 1936 more bytes>
                    },
                    list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/shipments/41441506905',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 d0 6f 82 b0 04 be 49 19 ee 92 aa c6 ae 43 b2 ee af f9 d4 5c 36 27 08 fa 3c 5c 23 98 dd f1 33 11 04 ... 1936 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'api.mercadolibre.com',
            servername: 'api.mercadolibre.com',
            _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          },
          [Symbol(RequestTimeout)]: undefined
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
          'Content-Type',
          'application/json',
          'Transfer-Encoding',
          'chunked',
          'Connection',
          'close',
          'Date',
          'Mon, 13 Jun 2022 00:35:34 GMT',
          'X-Content-Type-Options',
          'nosniff',
          'X-Request-Id',
          '525910d6-2f67-467e-8eb0-c96f6450ecde',
          'X-Frame-Options',
          'DENY',
          'X-XSS-Protection',
          '1; mode=block',
          'Access-Control-Allow-Origin',
          '*',
          'Access-Control-Allow-Headers',
          'Content-Type',
          'Access-Control-Allow-Methods',
          'PUT, GET, POST, DELETE, OPTIONS',
          'Access-Control-Max-Age',
          '86400',
          'X-Cache',
          'Error from cloudfront',
          'Via',
          '1.1 d8d1e90003fb03ebdebc0927366befa6.cloudfront.net (CloudFront)',
          'X-Amz-Cf-Pop',
          'EZE50-P1',
          'X-Amz-Cf-Id',
          'Bmi6-CjiLhe9ywBdA1WKx8G9AJfOXlTpv39RjipKd2U1wrjKGLb2bg=='
        ],
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 401,
        statusMessage: 'Unauthorized',
        client: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'api.mercadolibre.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'api.mercadolibre.com',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 458,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: 10485760,
            protocol: 'https:',
            path: null,
            method: 'GET',
            headers: {
              Accept: 'application/json, text/plain, */*',
              Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
              'User-Agent': 'axios/0.27.2'
            },
            agent: undefined,
            agents: { http: undefined, https: undefined },
            auth: undefined,
            hostname: 'api.mercadolibre.com',
            port: 443,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] { path: null },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 d0 6f 82 b0 04 be 49 19 ee 92 aa c6 ae 43 b2 ee af f9 d4 5c 36 27 08 fa 3c 5c 23 98 dd f1 33 11 04 ... 1936 more bytes>
                    },
                    list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/shipments/41441506905',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 d0 6f 82 b0 04 be 49 19 ee 92 aa c6 ae 43 b2 ee af f9 d4 5c 36 27 08 fa 3c 5c 23 98 dd f1 33 11 04 ... 1936 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'api.mercadolibre.com',
            servername: 'api.mercadolibre.com',
            _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          },
          [Symbol(RequestTimeout)]: undefined
        },
        _consuming: true,
        _dumped: false,
        req: [Circular *2],
        responseUrl: 'https://api.mercadolibre.com/shipments/41441506905',
        redirects: [],
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
          'content-type': 'application/json',
          'transfer-encoding': 'chunked',
          connection: 'close',
          date: 'Mon, 13 Jun 2022 00:35:34 GMT',
          'x-content-type-options': 'nosniff',
          'x-request-id': '525910d6-2f67-467e-8eb0-c96f6450ecde',
          'x-frame-options': 'DENY',
          'x-xss-protection': '1; mode=block',
          'access-control-allow-origin': '*',
          'access-control-allow-headers': 'Content-Type',
          'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
          'access-control-max-age': '86400',
          'x-cache': 'Error from cloudfront',
          via: '1.1 d8d1e90003fb03ebdebc0927366befa6.cloudfront.net (CloudFront)',
          'x-amz-cf-pop': 'EZE50-P1',
          'x-amz-cf-id': 'Bmi6-CjiLhe9ywBdA1WKx8G9AJfOXlTpv39RjipKd2U1wrjKGLb2bg=='
        },
        [Symbol(kHeadersCount)]: 32,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'api.mercadolibre.com',
      protocol: 'https:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError],
          socket: [Function: handleRequestSocket]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: '/shipments/41441506905',
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: null,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [
                    <ref *1> TLSSocket {
                      _tlsOptions: {
                        allowHalfOpen: undefined,
                        pipe: false,
                        secureContext: SecureContext { context: SecureContext {} },
                        isServer: false,
                        requestCert: true,
                        rejectUnauthorized: true,
                        session: undefined,
                        ALPNProtocols: undefined,
                        requestOCSP: undefined,
                        enableTrace: undefined,
                        pskCallback: undefined,
                        highWaterMark: undefined,
                        onread: undefined,
                        signal: undefined
                      },
                      _secureEstablished: true,
                      _securePending: false,
                      _newSessionPending: false,
                      _controlReleased: true,
                      secureConnecting: false,
                      _SNICallback: null,
                      servername: 'api.mercadolibre.com',
                      alpnProtocol: false,
                      authorized: true,
                      authorizationError: null,
                      encrypted: true,
                      _events: [Object: null prototype] {
                        close: [
                          [Function: onSocketCloseDestroySSL],
                          [Function: bound onceWrapper] {
                            listener: [Function (anonymous)]
                          },
                          [Function: onClose],
                          [Function: socketCloseListener]
                        ],
                        end: [Function: onReadableStreamEnd],
                        newListener: [Function: keylogNewListener],
                        secure: [Function: onConnectSecure],
                        session: [Function (anonymous)],
                        free: [Function: onFree],
                        timeout: [Function: onTimeout],
                        agentRemove: [Function: onRemove],
                        error: [Function: socketErrorListener],
                        finish: [Function: bound onceWrapper] {
                          listener: [Function: destroy]
                        }
                      },
                      _eventsCount: 10,
                      connecting: false,
                      _hadError: false,
                      _parent: null,
                      _host: 'api.mercadolibre.com',
                      _readableState: ReadableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        buffer: BufferList { head: null, tail: null, length: 0 },
                        length: 0,
                        pipes: [],
                        flowing: true,
                        ended: false,
                        endEmitted: false,
                        reading: true,
                        constructed: true,
                        sync: false,
                        needReadable: true,
                        emittedReadable: false,
                        readableListening: false,
                        resumeScheduled: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        destroyed: false,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        defaultEncoding: 'utf8',
                        awaitDrainWriters: null,
                        multiAwaitDrain: false,
                        readingMore: false,
                        dataEmitted: true,
                        decoder: null,
                        encoding: null,
                        [Symbol(kPaused)]: false
                      },
                      _maxListeners: undefined,
                      _writableState: WritableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        finalCalled: true,
                        needDrain: false,
                        ending: true,
                        ended: true,
                        finished: false,
                        destroyed: false,
                        decodeStrings: false,
                        defaultEncoding: 'utf8',
                        length: 0,
                        writing: false,
                        corked: 0,
                        sync: false,
                        bufferProcessing: false,
                        onwrite: [Function: bound onwrite],
                        writecb: null,
                        writelen: 0,
                        afterWriteTickInfo: null,
                        buffered: [],
                        bufferedIndex: 0,
                        allBuffers: true,
                        allNoop: true,
                        pendingcb: 1,
                        constructed: true,
                        prefinished: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        [Symbol(kOnFinished)]: []
                      },
                      allowHalfOpen: false,
                      _sockname: null,
                      _pendingData: null,
                      _pendingEncoding: '',
                      server: undefined,
                      _server: null,
                      ssl: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _requestCert: true,
                      _rejectUnauthorized: true,
                      parser: null,
                      _httpMessage: [Circular *2],
                      [Symbol(res)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(verified)]: true,
                      [Symbol(pendingSession)]: null,
                      [Symbol(async_id_symbol)]: 458,
                      [Symbol(kHandle)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(lastWriteQueueSize)]: 0,
                      [Symbol(timeout)]: null,
                      [Symbol(kBuffer)]: null,
                      [Symbol(kBufferCb)]: null,
                      [Symbol(kBufferGen)]: null,
                      [Symbol(kCapture)]: false,
                      [Symbol(kSetNoDelay)]: false,
                      [Symbol(kSetKeepAlive)]: true,
                      [Symbol(kSetKeepAliveInitialDelay)]: 60,
                      [Symbol(kBytesRead)]: 0,
                      [Symbol(kBytesWritten)]: 0,
                      [Symbol(connect-options)]: {
                        rejectUnauthorized: true,
                        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                        checkServerIdentity: [Function: checkServerIdentity],
                        minDHSize: 1024,
                        maxRedirects: 21,
                        maxBodyLength: 10485760,
                        protocol: 'https:',
                        path: null,
                        method: 'GET',
                        headers: {
                          Accept: 'application/json, text/plain, */*',
                          Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                          'User-Agent': 'axios/0.27.2'
                        },
                        agent: undefined,
                        agents: { http: undefined, https: undefined },
                        auth: undefined,
                        hostname: 'api.mercadolibre.com',
                        port: 443,
                        nativeProtocols: [Circular *4],
                        pathname: '/shipments/41441506905',
                        _defaultAgent: [Circular *3],
                        host: 'api.mercadolibre.com',
                        servername: 'api.mercadolibre.com',
                        _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
                        encoding: null,
                        singleUse: true
                      },
                      [Symbol(RequestTimeout)]: undefined
                    }
                  ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 d0 6f 82 b0 04 be 49 19 ee 92 aa c6 ae 43 b2 ee af f9 d4 5c 36 27 08 fa 3c 5c 23 98 dd f1 33 11 04 ... 1936 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/shipments/41441506905'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 0,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *2],
        _currentUrl: 'https://api.mercadolibre.com/shipments/41441506905',
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        authorization: [
          'Authorization',
          'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378'
        ],
        'user-agent': [ 'User-Agent', 'axios/0.27.2' ],
        host: [ 'Host', 'api.mercadolibre.com' ]
      }
    },
    data: {
      message: 'invalid_token',
      error: 'not_found',
      status: 401,
      cause: []
    }
  },
  level: 'error',
  timestamp: '2022-06-13T00:35:35.760Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:36:35.634Z'
}
{
  message: 'Request failed with status code 401',
  name: 'AxiosError',
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [Function: httpAdapter],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] {
        LINE_BREAK: '\r\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      }
    },
    validateStatus: [Function: validateStatus],
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
      'User-Agent': 'axios/0.27.2'
    },
    method: 'get',
    url: 'https://api.mercadolibre.com/shipments/41441506905',
    data: undefined
  },
  request: <ref *2> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      prefinish: [Function: requestOnPrefinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: false,
    socket: <ref *1> TLSSocket {
      _tlsOptions: {
        allowHalfOpen: undefined,
        pipe: false,
        secureContext: SecureContext { context: SecureContext {} },
        isServer: false,
        requestCert: true,
        rejectUnauthorized: true,
        session: undefined,
        ALPNProtocols: undefined,
        requestOCSP: undefined,
        enableTrace: undefined,
        pskCallback: undefined,
        highWaterMark: undefined,
        onread: undefined,
        signal: undefined
      },
      _secureEstablished: true,
      _securePending: false,
      _newSessionPending: false,
      _controlReleased: true,
      secureConnecting: false,
      _SNICallback: null,
      servername: 'api.mercadolibre.com',
      alpnProtocol: false,
      authorized: true,
      authorizationError: null,
      encrypted: true,
      _events: [Object: null prototype] {
        close: [
          [Function: onSocketCloseDestroySSL],
          [Function: bound onceWrapper] {
            listener: [Function (anonymous)]
          },
          [Function: onClose],
          [Function: socketCloseListener]
        ],
        end: [Function: onReadableStreamEnd],
        newListener: [Function: keylogNewListener],
        secure: [Function: onConnectSecure],
        session: [Function (anonymous)],
        free: [Function: onFree],
        timeout: [Function: onTimeout],
        agentRemove: [Function: onRemove],
        error: [Function: socketErrorListener],
        finish: [Function: bound onceWrapper] { listener: [Function: destroy] }
      },
      _eventsCount: 10,
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'api.mercadolibre.com',
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        constructed: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: true,
        needDrain: false,
        ending: true,
        ended: true,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: undefined,
      _server: null,
      ssl: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      _requestCert: true,
      _rejectUnauthorized: true,
      parser: null,
      _httpMessage: [Circular *2],
      [Symbol(res)]: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(verified)]: true,
      [Symbol(pendingSession)]: null,
      [Symbol(async_id_symbol)]: 458,
      [Symbol(kHandle)]: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: false,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 60,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(connect-options)]: {
        rejectUnauthorized: true,
        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
        checkServerIdentity: [Function: checkServerIdentity],
        minDHSize: 1024,
        maxRedirects: 21,
        maxBodyLength: 10485760,
        protocol: 'https:',
        path: null,
        method: 'GET',
        headers: {
          Accept: 'application/json, text/plain, */*',
          Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
          'User-Agent': 'axios/0.27.2'
        },
        agent: undefined,
        agents: { http: undefined, https: undefined },
        auth: undefined,
        hostname: 'api.mercadolibre.com',
        port: 443,
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 ad c2 fa 97 39 11 c2 ff 3f eb aa ce 48 e2 6d b8 1a 78 63 93 d3 4d 23 40 da f5 1c 22 eb bd 5a 07 04 ... 1936 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/shipments/41441506905',
        _defaultAgent: Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] { path: null },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          maxCachedSessions: 100,
          _sessionCache: {
            map: {
              'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 ad c2 fa 97 39 11 c2 ff 3f eb aa ce 48 e2 6d b8 1a 78 63 93 d3 4d 23 40 da f5 1c 22 eb bd 5a 07 04 ... 1936 more bytes>
            },
            list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
          },
          [Symbol(kCapture)]: false
        },
        host: 'api.mercadolibre.com',
        servername: 'api.mercadolibre.com',
        _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
        encoding: null,
        singleUse: true
      },
      [Symbol(RequestTimeout)]: undefined
    },
    _header: 'GET /shipments/41441506905 HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'Authorization: Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378\r\n' +
      'User-Agent: axios/0.27.2\r\n' +
      'Host: api.mercadolibre.com\r\n' +
      'Connection: close\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: <ref *3> Agent {
      _events: [Object: null prototype] {
        free: [Function (anonymous)],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] { path: null },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {
        'api.mercadolibre.com:443:::::::::::::::::::::': [
          <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'api.mercadolibre.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 10,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'api.mercadolibre.com',
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *2],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 458,
            [Symbol(kHandle)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              maxRedirects: 21,
              maxBodyLength: 10485760,
              protocol: 'https:',
              path: null,
              method: 'GET',
              headers: {
                Accept: 'application/json, text/plain, */*',
                Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                'User-Agent': 'axios/0.27.2'
              },
              agent: undefined,
              agents: { http: undefined, https: undefined },
              auth: undefined,
              hostname: 'api.mercadolibre.com',
              port: 443,
              nativeProtocols: {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: [Circular *3],
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/shipments/41441506905',
              _defaultAgent: [Circular *3],
              host: 'api.mercadolibre.com',
              servername: 'api.mercadolibre.com',
              _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            },
            [Symbol(RequestTimeout)]: undefined
          }
        ]
      },
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      maxCachedSessions: 100,
      _sessionCache: {
        map: {
          'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 ad c2 fa 97 39 11 c2 ff 3f eb aa ce 48 e2 6d b8 1a 78 63 93 d3 4d 23 40 da f5 1c 22 eb bd 5a 07 04 ... 1936 more bytes>
        },
        list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
      },
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    path: '/shipments/41441506905',
    _ended: true,
    res: IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        constructed: true,
        sync: false,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        destroyed: true,
        errored: null,
        closed: true,
        closeEmitted: true,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
        data: [Function: handleStreamData],
        aborted: [Function: handlerStreamAborted],
        error: [Function: handleStreamError]
      },
      _eventsCount: 4,
      _maxListeners: undefined,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadolibre.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadolibre.com',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 458,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: null,
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: 443,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 ad c2 fa 97 39 11 c2 ff 3f eb aa ce 48 e2 6d b8 1a 78 63 93 d3 4d 23 40 da f5 1c 22 eb bd 5a 07 04 ... 1936 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/shipments/41441506905',
          _defaultAgent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 ad c2 fa 97 39 11 c2 ff 3f eb aa ce 48 e2 6d b8 1a 78 63 93 d3 4d 23 40 da f5 1c 22 eb bd 5a 07 04 ... 1936 more bytes>
              },
              list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'api.mercadolibre.com',
          servername: 'api.mercadolibre.com',
          _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        },
        [Symbol(RequestTimeout)]: undefined
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [
        'Content-Type',
        'application/json',
        'Transfer-Encoding',
        'chunked',
        'Connection',
        'close',
        'Date',
        'Mon, 13 Jun 2022 00:37:00 GMT',
        'X-Content-Type-Options',
        'nosniff',
        'X-Request-Id',
        '995e63ac-2e32-4652-b9c4-0b7d115168ce',
        'X-Frame-Options',
        'DENY',
        'X-XSS-Protection',
        '1; mode=block',
        'Access-Control-Allow-Origin',
        '*',
        'Access-Control-Allow-Headers',
        'Content-Type',
        'Access-Control-Allow-Methods',
        'PUT, GET, POST, DELETE, OPTIONS',
        'Access-Control-Max-Age',
        '86400',
        'X-Cache',
        'Error from cloudfront',
        'Via',
        '1.1 1f60c66f5a68e4f3bcea1b8427b33b12.cloudfront.net (CloudFront)',
        'X-Amz-Cf-Pop',
        'EZE50-P1',
        'X-Amz-Cf-Id',
        'WQOdyPiol09-ZVgj-Q758-xQTJUCaPVJIvbrho69Jhjy-_7GkJUXrg=='
      ],
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 401,
      statusMessage: 'Unauthorized',
      client: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadolibre.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadolibre.com',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 458,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: null,
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: 443,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 ad c2 fa 97 39 11 c2 ff 3f eb aa ce 48 e2 6d b8 1a 78 63 93 d3 4d 23 40 da f5 1c 22 eb bd 5a 07 04 ... 1936 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/shipments/41441506905',
          _defaultAgent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 ad c2 fa 97 39 11 c2 ff 3f eb aa ce 48 e2 6d b8 1a 78 63 93 d3 4d 23 40 da f5 1c 22 eb bd 5a 07 04 ... 1936 more bytes>
              },
              list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'api.mercadolibre.com',
          servername: 'api.mercadolibre.com',
          _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        },
        [Symbol(RequestTimeout)]: undefined
      },
      _consuming: true,
      _dumped: false,
      req: [Circular *2],
      responseUrl: 'https://api.mercadolibre.com/shipments/41441506905',
      redirects: [],
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: {
        'content-type': 'application/json',
        'transfer-encoding': 'chunked',
        connection: 'close',
        date: 'Mon, 13 Jun 2022 00:37:00 GMT',
        'x-content-type-options': 'nosniff',
        'x-request-id': '995e63ac-2e32-4652-b9c4-0b7d115168ce',
        'x-frame-options': 'DENY',
        'x-xss-protection': '1; mode=block',
        'access-control-allow-origin': '*',
        'access-control-allow-headers': 'Content-Type',
        'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
        'access-control-max-age': '86400',
        'x-cache': 'Error from cloudfront',
        via: '1.1 1f60c66f5a68e4f3bcea1b8427b33b12.cloudfront.net (CloudFront)',
        'x-amz-cf-pop': 'EZE50-P1',
        'x-amz-cf-id': 'WQOdyPiol09-ZVgj-Q758-xQTJUCaPVJIvbrho69Jhjy-_7GkJUXrg=='
      },
      [Symbol(kHeadersCount)]: 32,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: false,
    host: 'api.mercadolibre.com',
    protocol: 'https:',
    _redirectable: Writable {
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      _events: [Object: null prototype] {
        response: [Function: handleResponse],
        error: [Function: handleRequestError],
        socket: [Function: handleRequestSocket]
      },
      _eventsCount: 3,
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: 10485760,
        protocol: 'https:',
        path: '/shipments/41441506905',
        method: 'GET',
        headers: {
          Accept: 'application/json, text/plain, */*',
          Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
          'User-Agent': 'axios/0.27.2'
        },
        agent: undefined,
        agents: { http: undefined, https: undefined },
        auth: undefined,
        hostname: 'api.mercadolibre.com',
        port: null,
        nativeProtocols: <ref *4> {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [
                  <ref *1> TLSSocket {
                    _tlsOptions: {
                      allowHalfOpen: undefined,
                      pipe: false,
                      secureContext: SecureContext { context: SecureContext {} },
                      isServer: false,
                      requestCert: true,
                      rejectUnauthorized: true,
                      session: undefined,
                      ALPNProtocols: undefined,
                      requestOCSP: undefined,
                      enableTrace: undefined,
                      pskCallback: undefined,
                      highWaterMark: undefined,
                      onread: undefined,
                      signal: undefined
                    },
                    _secureEstablished: true,
                    _securePending: false,
                    _newSessionPending: false,
                    _controlReleased: true,
                    secureConnecting: false,
                    _SNICallback: null,
                    servername: 'api.mercadolibre.com',
                    alpnProtocol: false,
                    authorized: true,
                    authorizationError: null,
                    encrypted: true,
                    _events: [Object: null prototype] {
                      close: [
                        [Function: onSocketCloseDestroySSL],
                        [Function: bound onceWrapper] {
                          listener: [Function (anonymous)]
                        },
                        [Function: onClose],
                        [Function: socketCloseListener]
                      ],
                      end: [Function: onReadableStreamEnd],
                      newListener: [Function: keylogNewListener],
                      secure: [Function: onConnectSecure],
                      session: [Function (anonymous)],
                      free: [Function: onFree],
                      timeout: [Function: onTimeout],
                      agentRemove: [Function: onRemove],
                      error: [Function: socketErrorListener],
                      finish: [Function: bound onceWrapper] {
                        listener: [Function: destroy]
                      }
                    },
                    _eventsCount: 10,
                    connecting: false,
                    _hadError: false,
                    _parent: null,
                    _host: 'api.mercadolibre.com',
                    _readableState: ReadableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      buffer: BufferList { head: null, tail: null, length: 0 },
                      length: 0,
                      pipes: [],
                      flowing: true,
                      ended: false,
                      endEmitted: false,
                      reading: true,
                      constructed: true,
                      sync: false,
                      needReadable: true,
                      emittedReadable: false,
                      readableListening: false,
                      resumeScheduled: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      destroyed: false,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      defaultEncoding: 'utf8',
                      awaitDrainWriters: null,
                      multiAwaitDrain: false,
                      readingMore: false,
                      dataEmitted: true,
                      decoder: null,
                      encoding: null,
                      [Symbol(kPaused)]: false
                    },
                    _maxListeners: undefined,
                    _writableState: WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      finalCalled: true,
                      needDrain: false,
                      ending: true,
                      ended: true,
                      finished: false,
                      destroyed: false,
                      decodeStrings: false,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: false,
                      bufferProcessing: false,
                      onwrite: [Function: bound onwrite],
                      writecb: null,
                      writelen: 0,
                      afterWriteTickInfo: null,
                      buffered: [],
                      bufferedIndex: 0,
                      allBuffers: true,
                      allNoop: true,
                      pendingcb: 1,
                      constructed: true,
                      prefinished: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      [Symbol(kOnFinished)]: []
                    },
                    allowHalfOpen: false,
                    _sockname: null,
                    _pendingData: null,
                    _pendingEncoding: '',
                    server: undefined,
                    _server: null,
                    ssl: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _requestCert: true,
                    _rejectUnauthorized: true,
                    parser: null,
                    _httpMessage: [Circular *2],
                    [Symbol(res)]: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    [Symbol(verified)]: true,
                    [Symbol(pendingSession)]: null,
                    [Symbol(async_id_symbol)]: 458,
                    [Symbol(kHandle)]: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    [Symbol(lastWriteQueueSize)]: 0,
                    [Symbol(timeout)]: null,
                    [Symbol(kBuffer)]: null,
                    [Symbol(kBufferCb)]: null,
                    [Symbol(kBufferGen)]: null,
                    [Symbol(kCapture)]: false,
                    [Symbol(kSetNoDelay)]: false,
                    [Symbol(kSetKeepAlive)]: true,
                    [Symbol(kSetKeepAliveInitialDelay)]: 60,
                    [Symbol(kBytesRead)]: 0,
                    [Symbol(kBytesWritten)]: 0,
                    [Symbol(connect-options)]: {
                      rejectUnauthorized: true,
                      ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                      checkServerIdentity: [Function: checkServerIdentity],
                      minDHSize: 1024,
                      maxRedirects: 21,
                      maxBodyLength: 10485760,
                      protocol: 'https:',
                      path: null,
                      method: 'GET',
                      headers: {
                        Accept: 'application/json, text/plain, */*',
                        Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                        'User-Agent': 'axios/0.27.2'
                      },
                      agent: undefined,
                      agents: { http: undefined, https: undefined },
                      auth: undefined,
                      hostname: 'api.mercadolibre.com',
                      port: 443,
                      nativeProtocols: [Circular *4],
                      pathname: '/shipments/41441506905',
                      _defaultAgent: [Circular *3],
                      host: 'api.mercadolibre.com',
                      servername: 'api.mercadolibre.com',
                      _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
                      encoding: null,
                      singleUse: true
                    },
                    [Symbol(RequestTimeout)]: undefined
                  }
                ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 ad c2 fa 97 39 11 c2 ff 3f eb aa ce 48 e2 6d b8 1a 78 63 93 d3 4d 23 40 da f5 1c 22 eb bd 5a 07 04 ... 1936 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/shipments/41441506905'
      },
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *2],
      _currentUrl: 'https://api.mercadolibre.com/shipments/41441506905',
      [Symbol(kCapture)]: false
    },
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [ 'Accept', 'application/json, text/plain, */*' ],
      authorization: [
        'Authorization',
        'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378'
      ],
      'user-agent': [ 'User-Agent', 'axios/0.27.2' ],
      host: [ 'Host', 'api.mercadolibre.com' ]
    }
  },
  response: {
    status: 401,
    statusText: 'Unauthorized',
    headers: {
      'content-type': 'application/json',
      'transfer-encoding': 'chunked',
      connection: 'close',
      date: 'Mon, 13 Jun 2022 00:37:00 GMT',
      'x-content-type-options': 'nosniff',
      'x-request-id': '995e63ac-2e32-4652-b9c4-0b7d115168ce',
      'x-frame-options': 'DENY',
      'x-xss-protection': '1; mode=block',
      'access-control-allow-origin': '*',
      'access-control-allow-headers': 'Content-Type',
      'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
      'access-control-max-age': '86400',
      'x-cache': 'Error from cloudfront',
      via: '1.1 1f60c66f5a68e4f3bcea1b8427b33b12.cloudfront.net (CloudFront)',
      'x-amz-cf-pop': 'EZE50-P1',
      'x-amz-cf-id': 'WQOdyPiol09-ZVgj-Q758-xQTJUCaPVJIvbrho69Jhjy-_7GkJUXrg=='
    },
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [Function: httpAdapter],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        }
      },
      validateStatus: [Function: validateStatus],
      headers: {
        Accept: 'application/json, text/plain, */*',
        Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
        'User-Agent': 'axios/0.27.2'
      },
      method: 'get',
      url: 'https://api.mercadolibre.com/shipments/41441506905',
      data: undefined
    },
    request: <ref *2> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        prefinish: [Function: requestOnPrefinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadolibre.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadolibre.com',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 458,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: null,
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: 443,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 ad c2 fa 97 39 11 c2 ff 3f eb aa ce 48 e2 6d b8 1a 78 63 93 d3 4d 23 40 da f5 1c 22 eb bd 5a 07 04 ... 1936 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/shipments/41441506905',
          _defaultAgent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 ad c2 fa 97 39 11 c2 ff 3f eb aa ce 48 e2 6d b8 1a 78 63 93 d3 4d 23 40 da f5 1c 22 eb bd 5a 07 04 ... 1936 more bytes>
              },
              list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'api.mercadolibre.com',
          servername: 'api.mercadolibre.com',
          _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        },
        [Symbol(RequestTimeout)]: undefined
      },
      _header: 'GET /shipments/41441506905 HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Authorization: Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378\r\n' +
        'User-Agent: axios/0.27.2\r\n' +
        'Host: api.mercadolibre.com\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: <ref *3> Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype] { path: null },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'api.mercadolibre.com:443:::::::::::::::::::::': [
            <ref *1> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: true,
                session: undefined,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'api.mercadolibre.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 10,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'api.mercadolibre.com',
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: false,
                errored: null,
                closed: false,
                closeEmitted: false,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: true,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 1,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular *2],
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 458,
              [Symbol(kHandle)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(connect-options)]: {
                rejectUnauthorized: true,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                maxRedirects: 21,
                maxBodyLength: 10485760,
                protocol: 'https:',
                path: null,
                method: 'GET',
                headers: {
                  Accept: 'application/json, text/plain, */*',
                  Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                  'User-Agent': 'axios/0.27.2'
                },
                agent: undefined,
                agents: { http: undefined, https: undefined },
                auth: undefined,
                hostname: 'api.mercadolibre.com',
                port: 443,
                nativeProtocols: <ref *4> {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: [Circular *3],
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/shipments/41441506905',
                _defaultAgent: [Circular *3],
                host: 'api.mercadolibre.com',
                servername: 'api.mercadolibre.com',
                _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
                encoding: null,
                singleUse: true
              },
              [Symbol(RequestTimeout)]: undefined
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        maxCachedSessions: 100,
        _sessionCache: {
          map: {
            'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 ad c2 fa 97 39 11 c2 ff 3f eb aa ce 48 e2 6d b8 1a 78 63 93 d3 4d 23 40 da f5 1c 22 eb bd 5a 07 04 ... 1936 more bytes>
          },
          list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
        },
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      path: '/shipments/41441506905',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          constructed: true,
          sync: false,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          destroyed: true,
          errored: null,
          closed: true,
          closeEmitted: true,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          data: [Function: handleStreamData],
          aborted: [Function: handlerStreamAborted],
          error: [Function: handleStreamError]
        },
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'api.mercadolibre.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'api.mercadolibre.com',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 458,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: 10485760,
            protocol: 'https:',
            path: null,
            method: 'GET',
            headers: {
              Accept: 'application/json, text/plain, */*',
              Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
              'User-Agent': 'axios/0.27.2'
            },
            agent: undefined,
            agents: { http: undefined, https: undefined },
            auth: undefined,
            hostname: 'api.mercadolibre.com',
            port: 443,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] { path: null },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 ad c2 fa 97 39 11 c2 ff 3f eb aa ce 48 e2 6d b8 1a 78 63 93 d3 4d 23 40 da f5 1c 22 eb bd 5a 07 04 ... 1936 more bytes>
                    },
                    list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/shipments/41441506905',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 ad c2 fa 97 39 11 c2 ff 3f eb aa ce 48 e2 6d b8 1a 78 63 93 d3 4d 23 40 da f5 1c 22 eb bd 5a 07 04 ... 1936 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'api.mercadolibre.com',
            servername: 'api.mercadolibre.com',
            _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          },
          [Symbol(RequestTimeout)]: undefined
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
          'Content-Type',
          'application/json',
          'Transfer-Encoding',
          'chunked',
          'Connection',
          'close',
          'Date',
          'Mon, 13 Jun 2022 00:37:00 GMT',
          'X-Content-Type-Options',
          'nosniff',
          'X-Request-Id',
          '995e63ac-2e32-4652-b9c4-0b7d115168ce',
          'X-Frame-Options',
          'DENY',
          'X-XSS-Protection',
          '1; mode=block',
          'Access-Control-Allow-Origin',
          '*',
          'Access-Control-Allow-Headers',
          'Content-Type',
          'Access-Control-Allow-Methods',
          'PUT, GET, POST, DELETE, OPTIONS',
          'Access-Control-Max-Age',
          '86400',
          'X-Cache',
          'Error from cloudfront',
          'Via',
          '1.1 1f60c66f5a68e4f3bcea1b8427b33b12.cloudfront.net (CloudFront)',
          'X-Amz-Cf-Pop',
          'EZE50-P1',
          'X-Amz-Cf-Id',
          'WQOdyPiol09-ZVgj-Q758-xQTJUCaPVJIvbrho69Jhjy-_7GkJUXrg=='
        ],
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 401,
        statusMessage: 'Unauthorized',
        client: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'api.mercadolibre.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'api.mercadolibre.com',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 458,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: 10485760,
            protocol: 'https:',
            path: null,
            method: 'GET',
            headers: {
              Accept: 'application/json, text/plain, */*',
              Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
              'User-Agent': 'axios/0.27.2'
            },
            agent: undefined,
            agents: { http: undefined, https: undefined },
            auth: undefined,
            hostname: 'api.mercadolibre.com',
            port: 443,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] { path: null },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 ad c2 fa 97 39 11 c2 ff 3f eb aa ce 48 e2 6d b8 1a 78 63 93 d3 4d 23 40 da f5 1c 22 eb bd 5a 07 04 ... 1936 more bytes>
                    },
                    list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/shipments/41441506905',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 ad c2 fa 97 39 11 c2 ff 3f eb aa ce 48 e2 6d b8 1a 78 63 93 d3 4d 23 40 da f5 1c 22 eb bd 5a 07 04 ... 1936 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'api.mercadolibre.com',
            servername: 'api.mercadolibre.com',
            _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          },
          [Symbol(RequestTimeout)]: undefined
        },
        _consuming: true,
        _dumped: false,
        req: [Circular *2],
        responseUrl: 'https://api.mercadolibre.com/shipments/41441506905',
        redirects: [],
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
          'content-type': 'application/json',
          'transfer-encoding': 'chunked',
          connection: 'close',
          date: 'Mon, 13 Jun 2022 00:37:00 GMT',
          'x-content-type-options': 'nosniff',
          'x-request-id': '995e63ac-2e32-4652-b9c4-0b7d115168ce',
          'x-frame-options': 'DENY',
          'x-xss-protection': '1; mode=block',
          'access-control-allow-origin': '*',
          'access-control-allow-headers': 'Content-Type',
          'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
          'access-control-max-age': '86400',
          'x-cache': 'Error from cloudfront',
          via: '1.1 1f60c66f5a68e4f3bcea1b8427b33b12.cloudfront.net (CloudFront)',
          'x-amz-cf-pop': 'EZE50-P1',
          'x-amz-cf-id': 'WQOdyPiol09-ZVgj-Q758-xQTJUCaPVJIvbrho69Jhjy-_7GkJUXrg=='
        },
        [Symbol(kHeadersCount)]: 32,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'api.mercadolibre.com',
      protocol: 'https:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError],
          socket: [Function: handleRequestSocket]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: '/shipments/41441506905',
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: null,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [
                    <ref *1> TLSSocket {
                      _tlsOptions: {
                        allowHalfOpen: undefined,
                        pipe: false,
                        secureContext: SecureContext { context: SecureContext {} },
                        isServer: false,
                        requestCert: true,
                        rejectUnauthorized: true,
                        session: undefined,
                        ALPNProtocols: undefined,
                        requestOCSP: undefined,
                        enableTrace: undefined,
                        pskCallback: undefined,
                        highWaterMark: undefined,
                        onread: undefined,
                        signal: undefined
                      },
                      _secureEstablished: true,
                      _securePending: false,
                      _newSessionPending: false,
                      _controlReleased: true,
                      secureConnecting: false,
                      _SNICallback: null,
                      servername: 'api.mercadolibre.com',
                      alpnProtocol: false,
                      authorized: true,
                      authorizationError: null,
                      encrypted: true,
                      _events: [Object: null prototype] {
                        close: [
                          [Function: onSocketCloseDestroySSL],
                          [Function: bound onceWrapper] {
                            listener: [Function (anonymous)]
                          },
                          [Function: onClose],
                          [Function: socketCloseListener]
                        ],
                        end: [Function: onReadableStreamEnd],
                        newListener: [Function: keylogNewListener],
                        secure: [Function: onConnectSecure],
                        session: [Function (anonymous)],
                        free: [Function: onFree],
                        timeout: [Function: onTimeout],
                        agentRemove: [Function: onRemove],
                        error: [Function: socketErrorListener],
                        finish: [Function: bound onceWrapper] {
                          listener: [Function: destroy]
                        }
                      },
                      _eventsCount: 10,
                      connecting: false,
                      _hadError: false,
                      _parent: null,
                      _host: 'api.mercadolibre.com',
                      _readableState: ReadableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        buffer: BufferList { head: null, tail: null, length: 0 },
                        length: 0,
                        pipes: [],
                        flowing: true,
                        ended: false,
                        endEmitted: false,
                        reading: true,
                        constructed: true,
                        sync: false,
                        needReadable: true,
                        emittedReadable: false,
                        readableListening: false,
                        resumeScheduled: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        destroyed: false,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        defaultEncoding: 'utf8',
                        awaitDrainWriters: null,
                        multiAwaitDrain: false,
                        readingMore: false,
                        dataEmitted: true,
                        decoder: null,
                        encoding: null,
                        [Symbol(kPaused)]: false
                      },
                      _maxListeners: undefined,
                      _writableState: WritableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        finalCalled: true,
                        needDrain: false,
                        ending: true,
                        ended: true,
                        finished: false,
                        destroyed: false,
                        decodeStrings: false,
                        defaultEncoding: 'utf8',
                        length: 0,
                        writing: false,
                        corked: 0,
                        sync: false,
                        bufferProcessing: false,
                        onwrite: [Function: bound onwrite],
                        writecb: null,
                        writelen: 0,
                        afterWriteTickInfo: null,
                        buffered: [],
                        bufferedIndex: 0,
                        allBuffers: true,
                        allNoop: true,
                        pendingcb: 1,
                        constructed: true,
                        prefinished: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        [Symbol(kOnFinished)]: []
                      },
                      allowHalfOpen: false,
                      _sockname: null,
                      _pendingData: null,
                      _pendingEncoding: '',
                      server: undefined,
                      _server: null,
                      ssl: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _requestCert: true,
                      _rejectUnauthorized: true,
                      parser: null,
                      _httpMessage: [Circular *2],
                      [Symbol(res)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(verified)]: true,
                      [Symbol(pendingSession)]: null,
                      [Symbol(async_id_symbol)]: 458,
                      [Symbol(kHandle)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(lastWriteQueueSize)]: 0,
                      [Symbol(timeout)]: null,
                      [Symbol(kBuffer)]: null,
                      [Symbol(kBufferCb)]: null,
                      [Symbol(kBufferGen)]: null,
                      [Symbol(kCapture)]: false,
                      [Symbol(kSetNoDelay)]: false,
                      [Symbol(kSetKeepAlive)]: true,
                      [Symbol(kSetKeepAliveInitialDelay)]: 60,
                      [Symbol(kBytesRead)]: 0,
                      [Symbol(kBytesWritten)]: 0,
                      [Symbol(connect-options)]: {
                        rejectUnauthorized: true,
                        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                        checkServerIdentity: [Function: checkServerIdentity],
                        minDHSize: 1024,
                        maxRedirects: 21,
                        maxBodyLength: 10485760,
                        protocol: 'https:',
                        path: null,
                        method: 'GET',
                        headers: {
                          Accept: 'application/json, text/plain, */*',
                          Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                          'User-Agent': 'axios/0.27.2'
                        },
                        agent: undefined,
                        agents: { http: undefined, https: undefined },
                        auth: undefined,
                        hostname: 'api.mercadolibre.com',
                        port: 443,
                        nativeProtocols: [Circular *4],
                        pathname: '/shipments/41441506905',
                        _defaultAgent: [Circular *3],
                        host: 'api.mercadolibre.com',
                        servername: 'api.mercadolibre.com',
                        _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
                        encoding: null,
                        singleUse: true
                      },
                      [Symbol(RequestTimeout)]: undefined
                    }
                  ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 be 02 01 01 02 02 03 04 04 02 13 01 04 20 ad c2 fa 97 39 11 c2 ff 3f eb aa ce 48 e2 6d b8 1a 78 63 93 d3 4d 23 40 da f5 1c 22 eb bd 5a 07 04 ... 1936 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/shipments/41441506905'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 0,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *2],
        _currentUrl: 'https://api.mercadolibre.com/shipments/41441506905',
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        authorization: [
          'Authorization',
          'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378'
        ],
        'user-agent': [ 'User-Agent', 'axios/0.27.2' ],
        host: [ 'Host', 'api.mercadolibre.com' ]
      }
    },
    data: {
      message: 'invalid_token',
      error: 'not_found',
      status: 401,
      cause: []
    }
  },
  level: 'error',
  timestamp: '2022-06-13T00:37:01.142Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:40:43.445Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:41:04.190Z'
}
{
  message: undefined,
  level: 'error',
  timestamp: '2022-06-13T00:41:08.675Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:42:56.849Z'
}
{
  message: {
    status: 401,
    statusText: 'Unauthorized',
    headers: {
      'content-type': 'application/json',
      'transfer-encoding': 'chunked',
      connection: 'close',
      date: 'Mon, 13 Jun 2022 00:43:00 GMT',
      'x-content-type-options': 'nosniff',
      'x-request-id': '66bbbe32-eef4-459d-8ff9-b558e8736431',
      'x-frame-options': 'DENY',
      'x-xss-protection': '1; mode=block',
      'access-control-allow-origin': '*',
      'access-control-allow-headers': 'Content-Type',
      'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
      'access-control-max-age': '86400',
      'x-cache': 'Error from cloudfront',
      via: '1.1 d404deded0486922d3f3f9e242fa9960.cloudfront.net (CloudFront)',
      'x-amz-cf-pop': 'EZE51-C1',
      'x-amz-cf-id': 'ZLx9pykJ2YHoQpsgJOVRuQvWGEYp2a-RoijvAkPWR0U2a4L9Hzocvg=='
    },
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [Function: httpAdapter],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        }
      },
      validateStatus: [Function: validateStatus],
      headers: {
        Accept: 'application/json, text/plain, */*',
        Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
        'User-Agent': 'axios/0.27.2'
      },
      method: 'get',
      url: 'https://api.mercadolibre.com/shipments/41441506905',
      data: undefined
    },
    request: <ref *2> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        prefinish: [Function: requestOnPrefinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadolibre.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadolibre.com',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 458,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: null,
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: 443,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 fa 26 90 e9 f2 23 0f 2f 09 e9 73 97 f4 23 e1 2c e2 64 97 dc 98 97 4c aa 33 a1 2e df 6a 88 4e 1f 04 ... 1937 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/shipments/41441506905',
          _defaultAgent: Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 fa 26 90 e9 f2 23 0f 2f 09 e9 73 97 f4 23 e1 2c e2 64 97 dc 98 97 4c aa 33 a1 2e df 6a 88 4e 1f 04 ... 1937 more bytes>
              },
              list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'api.mercadolibre.com',
          servername: 'api.mercadolibre.com',
          _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        },
        [Symbol(RequestTimeout)]: undefined
      },
      _header: 'GET /shipments/41441506905 HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Authorization: Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378\r\n' +
        'User-Agent: axios/0.27.2\r\n' +
        'Host: api.mercadolibre.com\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: <ref *3> Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype] { path: null },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'api.mercadolibre.com:443:::::::::::::::::::::': [
            <ref *1> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: true,
                session: undefined,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'api.mercadolibre.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 10,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'api.mercadolibre.com',
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: false,
                errored: null,
                closed: false,
                closeEmitted: false,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: true,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 1,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular *2],
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 458,
              [Symbol(kHandle)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(connect-options)]: {
                rejectUnauthorized: true,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                maxRedirects: 21,
                maxBodyLength: 10485760,
                protocol: 'https:',
                path: null,
                method: 'GET',
                headers: {
                  Accept: 'application/json, text/plain, */*',
                  Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                  'User-Agent': 'axios/0.27.2'
                },
                agent: undefined,
                agents: { http: undefined, https: undefined },
                auth: undefined,
                hostname: 'api.mercadolibre.com',
                port: 443,
                nativeProtocols: {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: [Circular *3],
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/shipments/41441506905',
                _defaultAgent: [Circular *3],
                host: 'api.mercadolibre.com',
                servername: 'api.mercadolibre.com',
                _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
                encoding: null,
                singleUse: true
              },
              [Symbol(RequestTimeout)]: undefined
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        maxCachedSessions: 100,
        _sessionCache: {
          map: {
            'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 fa 26 90 e9 f2 23 0f 2f 09 e9 73 97 f4 23 e1 2c e2 64 97 dc 98 97 4c aa 33 a1 2e df 6a 88 4e 1f 04 ... 1937 more bytes>
          },
          list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
        },
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      path: '/shipments/41441506905',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          constructed: true,
          sync: false,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          destroyed: true,
          errored: null,
          closed: true,
          closeEmitted: true,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          data: [Function: handleStreamData],
          aborted: [Function: handlerStreamAborted],
          error: [Function: handleStreamError]
        },
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'api.mercadolibre.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'api.mercadolibre.com',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 458,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: 10485760,
            protocol: 'https:',
            path: null,
            method: 'GET',
            headers: {
              Accept: 'application/json, text/plain, */*',
              Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
              'User-Agent': 'axios/0.27.2'
            },
            agent: undefined,
            agents: { http: undefined, https: undefined },
            auth: undefined,
            hostname: 'api.mercadolibre.com',
            port: 443,
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] { path: null },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 fa 26 90 e9 f2 23 0f 2f 09 e9 73 97 f4 23 e1 2c e2 64 97 dc 98 97 4c aa 33 a1 2e df 6a 88 4e 1f 04 ... 1937 more bytes>
                    },
                    list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/shipments/41441506905',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 fa 26 90 e9 f2 23 0f 2f 09 e9 73 97 f4 23 e1 2c e2 64 97 dc 98 97 4c aa 33 a1 2e df 6a 88 4e 1f 04 ... 1937 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'api.mercadolibre.com',
            servername: 'api.mercadolibre.com',
            _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          },
          [Symbol(RequestTimeout)]: undefined
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
          'Content-Type',
          'application/json',
          'Transfer-Encoding',
          'chunked',
          'Connection',
          'close',
          'Date',
          'Mon, 13 Jun 2022 00:43:00 GMT',
          'X-Content-Type-Options',
          'nosniff',
          'X-Request-Id',
          '66bbbe32-eef4-459d-8ff9-b558e8736431',
          'X-Frame-Options',
          'DENY',
          'X-XSS-Protection',
          '1; mode=block',
          'Access-Control-Allow-Origin',
          '*',
          'Access-Control-Allow-Headers',
          'Content-Type',
          'Access-Control-Allow-Methods',
          'PUT, GET, POST, DELETE, OPTIONS',
          'Access-Control-Max-Age',
          '86400',
          'X-Cache',
          'Error from cloudfront',
          'Via',
          '1.1 d404deded0486922d3f3f9e242fa9960.cloudfront.net (CloudFront)',
          'X-Amz-Cf-Pop',
          'EZE51-C1',
          'X-Amz-Cf-Id',
          'ZLx9pykJ2YHoQpsgJOVRuQvWGEYp2a-RoijvAkPWR0U2a4L9Hzocvg=='
        ],
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 401,
        statusMessage: 'Unauthorized',
        client: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'api.mercadolibre.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'api.mercadolibre.com',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 458,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: 10485760,
            protocol: 'https:',
            path: null,
            method: 'GET',
            headers: {
              Accept: 'application/json, text/plain, */*',
              Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
              'User-Agent': 'axios/0.27.2'
            },
            agent: undefined,
            agents: { http: undefined, https: undefined },
            auth: undefined,
            hostname: 'api.mercadolibre.com',
            port: 443,
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] { path: null },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 fa 26 90 e9 f2 23 0f 2f 09 e9 73 97 f4 23 e1 2c e2 64 97 dc 98 97 4c aa 33 a1 2e df 6a 88 4e 1f 04 ... 1937 more bytes>
                    },
                    list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/shipments/41441506905',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 fa 26 90 e9 f2 23 0f 2f 09 e9 73 97 f4 23 e1 2c e2 64 97 dc 98 97 4c aa 33 a1 2e df 6a 88 4e 1f 04 ... 1937 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'api.mercadolibre.com',
            servername: 'api.mercadolibre.com',
            _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          },
          [Symbol(RequestTimeout)]: undefined
        },
        _consuming: true,
        _dumped: false,
        req: [Circular *2],
        responseUrl: 'https://api.mercadolibre.com/shipments/41441506905',
        redirects: [],
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
          'content-type': 'application/json',
          'transfer-encoding': 'chunked',
          connection: 'close',
          date: 'Mon, 13 Jun 2022 00:43:00 GMT',
          'x-content-type-options': 'nosniff',
          'x-request-id': '66bbbe32-eef4-459d-8ff9-b558e8736431',
          'x-frame-options': 'DENY',
          'x-xss-protection': '1; mode=block',
          'access-control-allow-origin': '*',
          'access-control-allow-headers': 'Content-Type',
          'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
          'access-control-max-age': '86400',
          'x-cache': 'Error from cloudfront',
          via: '1.1 d404deded0486922d3f3f9e242fa9960.cloudfront.net (CloudFront)',
          'x-amz-cf-pop': 'EZE51-C1',
          'x-amz-cf-id': 'ZLx9pykJ2YHoQpsgJOVRuQvWGEYp2a-RoijvAkPWR0U2a4L9Hzocvg=='
        },
        [Symbol(kHeadersCount)]: 32,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'api.mercadolibre.com',
      protocol: 'https:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError],
          socket: [Function: handleRequestSocket]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: '/shipments/41441506905',
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: null,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [
                    <ref *1> TLSSocket {
                      _tlsOptions: {
                        allowHalfOpen: undefined,
                        pipe: false,
                        secureContext: SecureContext { context: SecureContext {} },
                        isServer: false,
                        requestCert: true,
                        rejectUnauthorized: true,
                        session: undefined,
                        ALPNProtocols: undefined,
                        requestOCSP: undefined,
                        enableTrace: undefined,
                        pskCallback: undefined,
                        highWaterMark: undefined,
                        onread: undefined,
                        signal: undefined
                      },
                      _secureEstablished: true,
                      _securePending: false,
                      _newSessionPending: false,
                      _controlReleased: true,
                      secureConnecting: false,
                      _SNICallback: null,
                      servername: 'api.mercadolibre.com',
                      alpnProtocol: false,
                      authorized: true,
                      authorizationError: null,
                      encrypted: true,
                      _events: [Object: null prototype] {
                        close: [
                          [Function: onSocketCloseDestroySSL],
                          [Function: bound onceWrapper] {
                            listener: [Function (anonymous)]
                          },
                          [Function: onClose],
                          [Function: socketCloseListener]
                        ],
                        end: [Function: onReadableStreamEnd],
                        newListener: [Function: keylogNewListener],
                        secure: [Function: onConnectSecure],
                        session: [Function (anonymous)],
                        free: [Function: onFree],
                        timeout: [Function: onTimeout],
                        agentRemove: [Function: onRemove],
                        error: [Function: socketErrorListener],
                        finish: [Function: bound onceWrapper] {
                          listener: [Function: destroy]
                        }
                      },
                      _eventsCount: 10,
                      connecting: false,
                      _hadError: false,
                      _parent: null,
                      _host: 'api.mercadolibre.com',
                      _readableState: ReadableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        buffer: BufferList { head: null, tail: null, length: 0 },
                        length: 0,
                        pipes: [],
                        flowing: true,
                        ended: false,
                        endEmitted: false,
                        reading: true,
                        constructed: true,
                        sync: false,
                        needReadable: true,
                        emittedReadable: false,
                        readableListening: false,
                        resumeScheduled: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        destroyed: false,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        defaultEncoding: 'utf8',
                        awaitDrainWriters: null,
                        multiAwaitDrain: false,
                        readingMore: false,
                        dataEmitted: true,
                        decoder: null,
                        encoding: null,
                        [Symbol(kPaused)]: false
                      },
                      _maxListeners: undefined,
                      _writableState: WritableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        finalCalled: true,
                        needDrain: false,
                        ending: true,
                        ended: true,
                        finished: false,
                        destroyed: false,
                        decodeStrings: false,
                        defaultEncoding: 'utf8',
                        length: 0,
                        writing: false,
                        corked: 0,
                        sync: false,
                        bufferProcessing: false,
                        onwrite: [Function: bound onwrite],
                        writecb: null,
                        writelen: 0,
                        afterWriteTickInfo: null,
                        buffered: [],
                        bufferedIndex: 0,
                        allBuffers: true,
                        allNoop: true,
                        pendingcb: 1,
                        constructed: true,
                        prefinished: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        [Symbol(kOnFinished)]: []
                      },
                      allowHalfOpen: false,
                      _sockname: null,
                      _pendingData: null,
                      _pendingEncoding: '',
                      server: undefined,
                      _server: null,
                      ssl: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _requestCert: true,
                      _rejectUnauthorized: true,
                      parser: null,
                      _httpMessage: [Circular *2],
                      [Symbol(res)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(verified)]: true,
                      [Symbol(pendingSession)]: null,
                      [Symbol(async_id_symbol)]: 458,
                      [Symbol(kHandle)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(lastWriteQueueSize)]: 0,
                      [Symbol(timeout)]: null,
                      [Symbol(kBuffer)]: null,
                      [Symbol(kBufferCb)]: null,
                      [Symbol(kBufferGen)]: null,
                      [Symbol(kCapture)]: false,
                      [Symbol(kSetNoDelay)]: false,
                      [Symbol(kSetKeepAlive)]: true,
                      [Symbol(kSetKeepAliveInitialDelay)]: 60,
                      [Symbol(kBytesRead)]: 0,
                      [Symbol(kBytesWritten)]: 0,
                      [Symbol(connect-options)]: {
                        rejectUnauthorized: true,
                        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                        checkServerIdentity: [Function: checkServerIdentity],
                        minDHSize: 1024,
                        maxRedirects: 21,
                        maxBodyLength: 10485760,
                        protocol: 'https:',
                        path: null,
                        method: 'GET',
                        headers: {
                          Accept: 'application/json, text/plain, */*',
                          Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                          'User-Agent': 'axios/0.27.2'
                        },
                        agent: undefined,
                        agents: { http: undefined, https: undefined },
                        auth: undefined,
                        hostname: 'api.mercadolibre.com',
                        port: 443,
                        nativeProtocols: [Circular *4],
                        pathname: '/shipments/41441506905',
                        _defaultAgent: [Circular *3],
                        host: 'api.mercadolibre.com',
                        servername: 'api.mercadolibre.com',
                        _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
                        encoding: null,
                        singleUse: true
                      },
                      [Symbol(RequestTimeout)]: undefined
                    }
                  ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 fa 26 90 e9 f2 23 0f 2f 09 e9 73 97 f4 23 e1 2c e2 64 97 dc 98 97 4c aa 33 a1 2e df 6a 88 4e 1f 04 ... 1937 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/shipments/41441506905'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 0,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *2],
        _currentUrl: 'https://api.mercadolibre.com/shipments/41441506905',
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        authorization: [
          'Authorization',
          'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378'
        ],
        'user-agent': [ 'User-Agent', 'axios/0.27.2' ],
        host: [ 'Host', 'api.mercadolibre.com' ]
      }
    },
    data: {
      message: 'invalid_token',
      error: 'not_found',
      status: 401,
      cause: []
    }
  },
  level: 'error',
  timestamp: '2022-06-13T00:43:01.311Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:44:49.278Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:44:53.004Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:44:59.811Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:45:01.659Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:45:05.141Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:45:25.038Z'
}
{
  message: 'invalid_token',
  error: 'not_found',
  status: 401,
  cause: [],
  level: 'error',
  timestamp: '2022-06-13T00:45:29.091Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:47:12.176Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:47:26.657Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:47:48.724Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:47:51.578Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:49:22.033Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:51:06.483Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:51:07.597Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:51:21.863Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:51:26.654Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:51:37.695Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:51:38.844Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:51:43.661Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:51:52.749Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:51:53.842Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:52:02.105Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:52:03.327Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:52:08.452Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:53:02.274Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:53:11.999Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:53:16.163Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:53:22.826Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:53:33.080Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:53:53.666Z'
}
{
  message: 'invalid_token',
  error: 'not_found',
  status: 401,
  cause: [],
  level: 'error',
  timestamp: '2022-06-13T00:54:03.358Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T00:55:41.994Z'
}
{
  message: 'invalid_token',
  error: 'not_found',
  status: 401,
  cause: [],
  level: 'error',
  timestamp: '2022-06-13T01:00:11.278Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:02:40.287Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:02:47.763Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:02:59.940Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:03:16.106Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:03:24.164Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:03:32.005Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:03:37.577Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:03:41.097Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:04:19.879Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:05:06.409Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:05:30.587Z'
}
{
  message: 'Request failed with status code 401',
  name: 'AxiosError',
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [Function: httpAdapter],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] {
        LINE_BREAK: '\r\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      }
    },
    validateStatus: [Function: validateStatus],
    headers: {
      Accept: 'application/json, text/plain, */*',
      Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
      'User-Agent': 'axios/0.27.2'
    },
    method: 'get',
    url: 'https://api.mercadolibre.com/shipments/41441506905',
    data: undefined
  },
  request: <ref *2> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      prefinish: [Function: requestOnPrefinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: false,
    socket: <ref *1> TLSSocket {
      _tlsOptions: {
        allowHalfOpen: undefined,
        pipe: false,
        secureContext: SecureContext { context: SecureContext {} },
        isServer: false,
        requestCert: true,
        rejectUnauthorized: true,
        session: undefined,
        ALPNProtocols: undefined,
        requestOCSP: undefined,
        enableTrace: undefined,
        pskCallback: undefined,
        highWaterMark: undefined,
        onread: undefined,
        signal: undefined
      },
      _secureEstablished: true,
      _securePending: false,
      _newSessionPending: false,
      _controlReleased: true,
      secureConnecting: false,
      _SNICallback: null,
      servername: 'api.mercadolibre.com',
      alpnProtocol: false,
      authorized: true,
      authorizationError: null,
      encrypted: true,
      _events: [Object: null prototype] {
        close: [
          [Function: onSocketCloseDestroySSL],
          [Function: bound onceWrapper] {
            listener: [Function (anonymous)]
          },
          [Function: onClose],
          [Function: socketCloseListener]
        ],
        end: [Function: onReadableStreamEnd],
        newListener: [Function: keylogNewListener],
        secure: [Function: onConnectSecure],
        session: [Function (anonymous)],
        free: [Function: onFree],
        timeout: [Function: onTimeout],
        agentRemove: [Function: onRemove],
        error: [Function: socketErrorListener],
        finish: [Function: bound onceWrapper] { listener: [Function: destroy] }
      },
      _eventsCount: 10,
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'api.mercadolibre.com',
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        constructed: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: true,
        needDrain: false,
        ending: true,
        ended: true,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: undefined,
      _server: null,
      ssl: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      _requestCert: true,
      _rejectUnauthorized: true,
      parser: null,
      _httpMessage: [Circular *2],
      [Symbol(res)]: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(verified)]: true,
      [Symbol(pendingSession)]: null,
      [Symbol(async_id_symbol)]: 538,
      [Symbol(kHandle)]: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: undefined,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: false,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 60,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(connect-options)]: {
        rejectUnauthorized: true,
        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
        checkServerIdentity: [Function: checkServerIdentity],
        minDHSize: 1024,
        maxRedirects: 21,
        maxBodyLength: 10485760,
        protocol: 'https:',
        path: null,
        method: 'GET',
        headers: {
          Accept: 'application/json, text/plain, */*',
          Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
          'User-Agent': 'axios/0.27.2'
        },
        agent: undefined,
        agents: { http: undefined, https: undefined },
        auth: undefined,
        hostname: 'api.mercadolibre.com',
        port: 443,
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 84 90 d4 f8 38 7e 31 e2 c5 4a 1b 88 da d8 77 c0 7f ec 5c c8 a6 63 d6 96 1e 72 42 25 a0 06 22 74 04 ... 1937 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/shipments/41441506905',
        _defaultAgent: Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] { path: null },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          maxCachedSessions: 100,
          _sessionCache: {
            map: {
              'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 84 90 d4 f8 38 7e 31 e2 c5 4a 1b 88 da d8 77 c0 7f ec 5c c8 a6 63 d6 96 1e 72 42 25 a0 06 22 74 04 ... 1937 more bytes>
            },
            list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
          },
          [Symbol(kCapture)]: false
        },
        host: 'api.mercadolibre.com',
        servername: 'api.mercadolibre.com',
        _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
        encoding: null,
        singleUse: true
      },
      [Symbol(RequestTimeout)]: undefined
    },
    _header: 'GET /shipments/41441506905 HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'Authorization: Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378\r\n' +
      'User-Agent: axios/0.27.2\r\n' +
      'Host: api.mercadolibre.com\r\n' +
      'Connection: close\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: <ref *3> Agent {
      _events: [Object: null prototype] {
        free: [Function (anonymous)],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] { path: null },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {
        'api.mercadolibre.com:443:::::::::::::::::::::': [
          <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'api.mercadolibre.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 10,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'api.mercadolibre.com',
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: false,
              errored: null,
              closed: false,
              closeEmitted: false,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *2],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 538,
            [Symbol(kHandle)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              maxRedirects: 21,
              maxBodyLength: 10485760,
              protocol: 'https:',
              path: null,
              method: 'GET',
              headers: {
                Accept: 'application/json, text/plain, */*',
                Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                'User-Agent': 'axios/0.27.2'
              },
              agent: undefined,
              agents: { http: undefined, https: undefined },
              auth: undefined,
              hostname: 'api.mercadolibre.com',
              port: 443,
              nativeProtocols: {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: [Circular *3],
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/shipments/41441506905',
              _defaultAgent: [Circular *3],
              host: 'api.mercadolibre.com',
              servername: 'api.mercadolibre.com',
              _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            },
            [Symbol(RequestTimeout)]: undefined
          }
        ]
      },
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      maxCachedSessions: 100,
      _sessionCache: {
        map: {
          'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 84 90 d4 f8 38 7e 31 e2 c5 4a 1b 88 da d8 77 c0 7f ec 5c c8 a6 63 d6 96 1e 72 42 25 a0 06 22 74 04 ... 1937 more bytes>
        },
        list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
      },
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    path: '/shipments/41441506905',
    _ended: true,
    res: IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        constructed: true,
        sync: false,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        destroyed: true,
        errored: null,
        closed: true,
        closeEmitted: true,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
        data: [Function: handleStreamData],
        aborted: [Function: handlerStreamAborted],
        error: [Function: handleStreamError]
      },
      _eventsCount: 4,
      _maxListeners: undefined,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadolibre.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadolibre.com',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 538,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: null,
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: 443,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 84 90 d4 f8 38 7e 31 e2 c5 4a 1b 88 da d8 77 c0 7f ec 5c c8 a6 63 d6 96 1e 72 42 25 a0 06 22 74 04 ... 1937 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/shipments/41441506905',
          _defaultAgent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 84 90 d4 f8 38 7e 31 e2 c5 4a 1b 88 da d8 77 c0 7f ec 5c c8 a6 63 d6 96 1e 72 42 25 a0 06 22 74 04 ... 1937 more bytes>
              },
              list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'api.mercadolibre.com',
          servername: 'api.mercadolibre.com',
          _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        },
        [Symbol(RequestTimeout)]: undefined
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [
        'Content-Type',
        'application/json',
        'Transfer-Encoding',
        'chunked',
        'Connection',
        'close',
        'Date',
        'Mon, 13 Jun 2022 01:06:00 GMT',
        'X-Content-Type-Options',
        'nosniff',
        'X-Request-Id',
        '3165adea-50a5-42ab-b729-eea7446ba205',
        'X-Frame-Options',
        'DENY',
        'X-XSS-Protection',
        '1; mode=block',
        'Access-Control-Allow-Origin',
        '*',
        'Access-Control-Allow-Headers',
        'Content-Type',
        'Access-Control-Allow-Methods',
        'PUT, GET, POST, DELETE, OPTIONS',
        'Access-Control-Max-Age',
        '86400',
        'X-Cache',
        'Error from cloudfront',
        'Via',
        '1.1 3dd14007a7d5280087c2835af1d4631e.cloudfront.net (CloudFront)',
        'X-Amz-Cf-Pop',
        'EZE50-P1',
        'X-Amz-Cf-Id',
        'KyKHfqBLU_evD7eP7bX-pYV-ZM9_5k1mAMZvFT01WC8iSBwPL5EW8g=='
      ],
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 401,
      statusMessage: 'Unauthorized',
      client: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadolibre.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadolibre.com',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 538,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: null,
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: 443,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 84 90 d4 f8 38 7e 31 e2 c5 4a 1b 88 da d8 77 c0 7f ec 5c c8 a6 63 d6 96 1e 72 42 25 a0 06 22 74 04 ... 1937 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/shipments/41441506905',
          _defaultAgent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 84 90 d4 f8 38 7e 31 e2 c5 4a 1b 88 da d8 77 c0 7f ec 5c c8 a6 63 d6 96 1e 72 42 25 a0 06 22 74 04 ... 1937 more bytes>
              },
              list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'api.mercadolibre.com',
          servername: 'api.mercadolibre.com',
          _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        },
        [Symbol(RequestTimeout)]: undefined
      },
      _consuming: true,
      _dumped: false,
      req: [Circular *2],
      responseUrl: 'https://api.mercadolibre.com/shipments/41441506905',
      redirects: [],
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: {
        'content-type': 'application/json',
        'transfer-encoding': 'chunked',
        connection: 'close',
        date: 'Mon, 13 Jun 2022 01:06:00 GMT',
        'x-content-type-options': 'nosniff',
        'x-request-id': '3165adea-50a5-42ab-b729-eea7446ba205',
        'x-frame-options': 'DENY',
        'x-xss-protection': '1; mode=block',
        'access-control-allow-origin': '*',
        'access-control-allow-headers': 'Content-Type',
        'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
        'access-control-max-age': '86400',
        'x-cache': 'Error from cloudfront',
        via: '1.1 3dd14007a7d5280087c2835af1d4631e.cloudfront.net (CloudFront)',
        'x-amz-cf-pop': 'EZE50-P1',
        'x-amz-cf-id': 'KyKHfqBLU_evD7eP7bX-pYV-ZM9_5k1mAMZvFT01WC8iSBwPL5EW8g=='
      },
      [Symbol(kHeadersCount)]: 32,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: false,
    host: 'api.mercadolibre.com',
    protocol: 'https:',
    _redirectable: Writable {
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      _events: [Object: null prototype] {
        response: [Function: handleResponse],
        error: [Function: handleRequestError],
        socket: [Function: handleRequestSocket]
      },
      _eventsCount: 3,
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: 10485760,
        protocol: 'https:',
        path: '/shipments/41441506905',
        method: 'GET',
        headers: {
          Accept: 'application/json, text/plain, */*',
          Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
          'User-Agent': 'axios/0.27.2'
        },
        agent: undefined,
        agents: { http: undefined, https: undefined },
        auth: undefined,
        hostname: 'api.mercadolibre.com',
        port: null,
        nativeProtocols: <ref *4> {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [
                  <ref *1> TLSSocket {
                    _tlsOptions: {
                      allowHalfOpen: undefined,
                      pipe: false,
                      secureContext: SecureContext { context: SecureContext {} },
                      isServer: false,
                      requestCert: true,
                      rejectUnauthorized: true,
                      session: undefined,
                      ALPNProtocols: undefined,
                      requestOCSP: undefined,
                      enableTrace: undefined,
                      pskCallback: undefined,
                      highWaterMark: undefined,
                      onread: undefined,
                      signal: undefined
                    },
                    _secureEstablished: true,
                    _securePending: false,
                    _newSessionPending: false,
                    _controlReleased: true,
                    secureConnecting: false,
                    _SNICallback: null,
                    servername: 'api.mercadolibre.com',
                    alpnProtocol: false,
                    authorized: true,
                    authorizationError: null,
                    encrypted: true,
                    _events: [Object: null prototype] {
                      close: [
                        [Function: onSocketCloseDestroySSL],
                        [Function: bound onceWrapper] {
                          listener: [Function (anonymous)]
                        },
                        [Function: onClose],
                        [Function: socketCloseListener]
                      ],
                      end: [Function: onReadableStreamEnd],
                      newListener: [Function: keylogNewListener],
                      secure: [Function: onConnectSecure],
                      session: [Function (anonymous)],
                      free: [Function: onFree],
                      timeout: [Function: onTimeout],
                      agentRemove: [Function: onRemove],
                      error: [Function: socketErrorListener],
                      finish: [Function: bound onceWrapper] {
                        listener: [Function: destroy]
                      }
                    },
                    _eventsCount: 10,
                    connecting: false,
                    _hadError: false,
                    _parent: null,
                    _host: 'api.mercadolibre.com',
                    _readableState: ReadableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      buffer: BufferList { head: null, tail: null, length: 0 },
                      length: 0,
                      pipes: [],
                      flowing: true,
                      ended: false,
                      endEmitted: false,
                      reading: true,
                      constructed: true,
                      sync: false,
                      needReadable: true,
                      emittedReadable: false,
                      readableListening: false,
                      resumeScheduled: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      destroyed: false,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      defaultEncoding: 'utf8',
                      awaitDrainWriters: null,
                      multiAwaitDrain: false,
                      readingMore: false,
                      dataEmitted: true,
                      decoder: null,
                      encoding: null,
                      [Symbol(kPaused)]: false
                    },
                    _maxListeners: undefined,
                    _writableState: WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      finalCalled: true,
                      needDrain: false,
                      ending: true,
                      ended: true,
                      finished: false,
                      destroyed: false,
                      decodeStrings: false,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: false,
                      bufferProcessing: false,
                      onwrite: [Function: bound onwrite],
                      writecb: null,
                      writelen: 0,
                      afterWriteTickInfo: null,
                      buffered: [],
                      bufferedIndex: 0,
                      allBuffers: true,
                      allNoop: true,
                      pendingcb: 1,
                      constructed: true,
                      prefinished: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      [Symbol(kOnFinished)]: []
                    },
                    allowHalfOpen: false,
                    _sockname: null,
                    _pendingData: null,
                    _pendingEncoding: '',
                    server: undefined,
                    _server: null,
                    ssl: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _requestCert: true,
                    _rejectUnauthorized: true,
                    parser: null,
                    _httpMessage: [Circular *2],
                    [Symbol(res)]: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    [Symbol(verified)]: true,
                    [Symbol(pendingSession)]: null,
                    [Symbol(async_id_symbol)]: 538,
                    [Symbol(kHandle)]: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: undefined,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    [Symbol(lastWriteQueueSize)]: 0,
                    [Symbol(timeout)]: null,
                    [Symbol(kBuffer)]: null,
                    [Symbol(kBufferCb)]: null,
                    [Symbol(kBufferGen)]: null,
                    [Symbol(kCapture)]: false,
                    [Symbol(kSetNoDelay)]: false,
                    [Symbol(kSetKeepAlive)]: true,
                    [Symbol(kSetKeepAliveInitialDelay)]: 60,
                    [Symbol(kBytesRead)]: 0,
                    [Symbol(kBytesWritten)]: 0,
                    [Symbol(connect-options)]: {
                      rejectUnauthorized: true,
                      ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                      checkServerIdentity: [Function: checkServerIdentity],
                      minDHSize: 1024,
                      maxRedirects: 21,
                      maxBodyLength: 10485760,
                      protocol: 'https:',
                      path: null,
                      method: 'GET',
                      headers: {
                        Accept: 'application/json, text/plain, */*',
                        Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                        'User-Agent': 'axios/0.27.2'
                      },
                      agent: undefined,
                      agents: { http: undefined, https: undefined },
                      auth: undefined,
                      hostname: 'api.mercadolibre.com',
                      port: 443,
                      nativeProtocols: [Circular *4],
                      pathname: '/shipments/41441506905',
                      _defaultAgent: [Circular *3],
                      host: 'api.mercadolibre.com',
                      servername: 'api.mercadolibre.com',
                      _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
                      encoding: null,
                      singleUse: true
                    },
                    [Symbol(RequestTimeout)]: undefined
                  }
                ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 84 90 d4 f8 38 7e 31 e2 c5 4a 1b 88 da d8 77 c0 7f ec 5c c8 a6 63 d6 96 1e 72 42 25 a0 06 22 74 04 ... 1937 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/shipments/41441506905'
      },
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *2],
      _currentUrl: 'https://api.mercadolibre.com/shipments/41441506905',
      [Symbol(kCapture)]: false
    },
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [ 'Accept', 'application/json, text/plain, */*' ],
      authorization: [
        'Authorization',
        'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378'
      ],
      'user-agent': [ 'User-Agent', 'axios/0.27.2' ],
      host: [ 'Host', 'api.mercadolibre.com' ]
    }
  },
  response: {
    status: 401,
    statusText: 'Unauthorized',
    headers: {
      'content-type': 'application/json',
      'transfer-encoding': 'chunked',
      connection: 'close',
      date: 'Mon, 13 Jun 2022 01:06:00 GMT',
      'x-content-type-options': 'nosniff',
      'x-request-id': '3165adea-50a5-42ab-b729-eea7446ba205',
      'x-frame-options': 'DENY',
      'x-xss-protection': '1; mode=block',
      'access-control-allow-origin': '*',
      'access-control-allow-headers': 'Content-Type',
      'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
      'access-control-max-age': '86400',
      'x-cache': 'Error from cloudfront',
      via: '1.1 3dd14007a7d5280087c2835af1d4631e.cloudfront.net (CloudFront)',
      'x-amz-cf-pop': 'EZE50-P1',
      'x-amz-cf-id': 'KyKHfqBLU_evD7eP7bX-pYV-ZM9_5k1mAMZvFT01WC8iSBwPL5EW8g=='
    },
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [Function: httpAdapter],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        }
      },
      validateStatus: [Function: validateStatus],
      headers: {
        Accept: 'application/json, text/plain, */*',
        Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
        'User-Agent': 'axios/0.27.2'
      },
      method: 'get',
      url: 'https://api.mercadolibre.com/shipments/41441506905',
      data: undefined
    },
    request: <ref *2> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        prefinish: [Function: requestOnPrefinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadolibre.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadolibre.com',
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *2],
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 538,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: undefined,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: null,
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: 443,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 84 90 d4 f8 38 7e 31 e2 c5 4a 1b 88 da d8 77 c0 7f ec 5c c8 a6 63 d6 96 1e 72 42 25 a0 06 22 74 04 ... 1937 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/shipments/41441506905',
          _defaultAgent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 84 90 d4 f8 38 7e 31 e2 c5 4a 1b 88 da d8 77 c0 7f ec 5c c8 a6 63 d6 96 1e 72 42 25 a0 06 22 74 04 ... 1937 more bytes>
              },
              list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'api.mercadolibre.com',
          servername: 'api.mercadolibre.com',
          _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        },
        [Symbol(RequestTimeout)]: undefined
      },
      _header: 'GET /shipments/41441506905 HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Authorization: Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378\r\n' +
        'User-Agent: axios/0.27.2\r\n' +
        'Host: api.mercadolibre.com\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: <ref *3> Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype] { path: null },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'api.mercadolibre.com:443:::::::::::::::::::::': [
            <ref *1> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: true,
                session: undefined,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'api.mercadolibre.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 10,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'api.mercadolibre.com',
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: false,
                errored: null,
                closed: false,
                closeEmitted: false,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: true,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 1,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular *2],
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 538,
              [Symbol(kHandle)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(connect-options)]: {
                rejectUnauthorized: true,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                maxRedirects: 21,
                maxBodyLength: 10485760,
                protocol: 'https:',
                path: null,
                method: 'GET',
                headers: {
                  Accept: 'application/json, text/plain, */*',
                  Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                  'User-Agent': 'axios/0.27.2'
                },
                agent: undefined,
                agents: { http: undefined, https: undefined },
                auth: undefined,
                hostname: 'api.mercadolibre.com',
                port: 443,
                nativeProtocols: <ref *4> {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: [Circular *3],
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/shipments/41441506905',
                _defaultAgent: [Circular *3],
                host: 'api.mercadolibre.com',
                servername: 'api.mercadolibre.com',
                _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
                encoding: null,
                singleUse: true
              },
              [Symbol(RequestTimeout)]: undefined
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        maxCachedSessions: 100,
        _sessionCache: {
          map: {
            'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 84 90 d4 f8 38 7e 31 e2 c5 4a 1b 88 da d8 77 c0 7f ec 5c c8 a6 63 d6 96 1e 72 42 25 a0 06 22 74 04 ... 1937 more bytes>
          },
          list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
        },
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      path: '/shipments/41441506905',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: true,
          endEmitted: true,
          reading: false,
          constructed: true,
          sync: false,
          needReadable: false,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          destroyed: true,
          errored: null,
          closed: true,
          closeEmitted: true,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: true,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          data: [Function: handleStreamData],
          aborted: [Function: handlerStreamAborted],
          error: [Function: handleStreamError]
        },
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'api.mercadolibre.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'api.mercadolibre.com',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 538,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: 10485760,
            protocol: 'https:',
            path: null,
            method: 'GET',
            headers: {
              Accept: 'application/json, text/plain, */*',
              Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
              'User-Agent': 'axios/0.27.2'
            },
            agent: undefined,
            agents: { http: undefined, https: undefined },
            auth: undefined,
            hostname: 'api.mercadolibre.com',
            port: 443,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] { path: null },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 84 90 d4 f8 38 7e 31 e2 c5 4a 1b 88 da d8 77 c0 7f ec 5c c8 a6 63 d6 96 1e 72 42 25 a0 06 22 74 04 ... 1937 more bytes>
                    },
                    list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/shipments/41441506905',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 84 90 d4 f8 38 7e 31 e2 c5 4a 1b 88 da d8 77 c0 7f ec 5c c8 a6 63 d6 96 1e 72 42 25 a0 06 22 74 04 ... 1937 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'api.mercadolibre.com',
            servername: 'api.mercadolibre.com',
            _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          },
          [Symbol(RequestTimeout)]: undefined
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
          'Content-Type',
          'application/json',
          'Transfer-Encoding',
          'chunked',
          'Connection',
          'close',
          'Date',
          'Mon, 13 Jun 2022 01:06:00 GMT',
          'X-Content-Type-Options',
          'nosniff',
          'X-Request-Id',
          '3165adea-50a5-42ab-b729-eea7446ba205',
          'X-Frame-Options',
          'DENY',
          'X-XSS-Protection',
          '1; mode=block',
          'Access-Control-Allow-Origin',
          '*',
          'Access-Control-Allow-Headers',
          'Content-Type',
          'Access-Control-Allow-Methods',
          'PUT, GET, POST, DELETE, OPTIONS',
          'Access-Control-Max-Age',
          '86400',
          'X-Cache',
          'Error from cloudfront',
          'Via',
          '1.1 3dd14007a7d5280087c2835af1d4631e.cloudfront.net (CloudFront)',
          'X-Amz-Cf-Pop',
          'EZE50-P1',
          'X-Amz-Cf-Id',
          'KyKHfqBLU_evD7eP7bX-pYV-ZM9_5k1mAMZvFT01WC8iSBwPL5EW8g=='
        ],
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 401,
        statusMessage: 'Unauthorized',
        client: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'api.mercadolibre.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'api.mercadolibre.com',
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *2],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 538,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: 10485760,
            protocol: 'https:',
            path: null,
            method: 'GET',
            headers: {
              Accept: 'application/json, text/plain, */*',
              Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
              'User-Agent': 'axios/0.27.2'
            },
            agent: undefined,
            agents: { http: undefined, https: undefined },
            auth: undefined,
            hostname: 'api.mercadolibre.com',
            port: 443,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] { path: null },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 84 90 d4 f8 38 7e 31 e2 c5 4a 1b 88 da d8 77 c0 7f ec 5c c8 a6 63 d6 96 1e 72 42 25 a0 06 22 74 04 ... 1937 more bytes>
                    },
                    list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/shipments/41441506905',
            _defaultAgent: <ref *3> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'api.mercadolibre.com:443:::::::::::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 84 90 d4 f8 38 7e 31 e2 c5 4a 1b 88 da d8 77 c0 7f ec 5c c8 a6 63 d6 96 1e 72 42 25 a0 06 22 74 04 ... 1937 more bytes>
                },
                list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'api.mercadolibre.com',
            servername: 'api.mercadolibre.com',
            _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          },
          [Symbol(RequestTimeout)]: undefined
        },
        _consuming: true,
        _dumped: false,
        req: [Circular *2],
        responseUrl: 'https://api.mercadolibre.com/shipments/41441506905',
        redirects: [],
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
          'content-type': 'application/json',
          'transfer-encoding': 'chunked',
          connection: 'close',
          date: 'Mon, 13 Jun 2022 01:06:00 GMT',
          'x-content-type-options': 'nosniff',
          'x-request-id': '3165adea-50a5-42ab-b729-eea7446ba205',
          'x-frame-options': 'DENY',
          'x-xss-protection': '1; mode=block',
          'access-control-allow-origin': '*',
          'access-control-allow-headers': 'Content-Type',
          'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
          'access-control-max-age': '86400',
          'x-cache': 'Error from cloudfront',
          via: '1.1 3dd14007a7d5280087c2835af1d4631e.cloudfront.net (CloudFront)',
          'x-amz-cf-pop': 'EZE50-P1',
          'x-amz-cf-id': 'KyKHfqBLU_evD7eP7bX-pYV-ZM9_5k1mAMZvFT01WC8iSBwPL5EW8g=='
        },
        [Symbol(kHeadersCount)]: 32,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'api.mercadolibre.com',
      protocol: 'https:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError],
          socket: [Function: handleRequestSocket]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: 10485760,
          protocol: 'https:',
          path: '/shipments/41441506905',
          method: 'GET',
          headers: {
            Accept: 'application/json, text/plain, */*',
            Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
            'User-Agent': 'axios/0.27.2'
          },
          agent: undefined,
          agents: { http: undefined, https: undefined },
          auth: undefined,
          hostname: 'api.mercadolibre.com',
          port: null,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'api.mercadolibre.com:443:::::::::::::::::::::': [
                    <ref *1> TLSSocket {
                      _tlsOptions: {
                        allowHalfOpen: undefined,
                        pipe: false,
                        secureContext: SecureContext { context: SecureContext {} },
                        isServer: false,
                        requestCert: true,
                        rejectUnauthorized: true,
                        session: undefined,
                        ALPNProtocols: undefined,
                        requestOCSP: undefined,
                        enableTrace: undefined,
                        pskCallback: undefined,
                        highWaterMark: undefined,
                        onread: undefined,
                        signal: undefined
                      },
                      _secureEstablished: true,
                      _securePending: false,
                      _newSessionPending: false,
                      _controlReleased: true,
                      secureConnecting: false,
                      _SNICallback: null,
                      servername: 'api.mercadolibre.com',
                      alpnProtocol: false,
                      authorized: true,
                      authorizationError: null,
                      encrypted: true,
                      _events: [Object: null prototype] {
                        close: [
                          [Function: onSocketCloseDestroySSL],
                          [Function: bound onceWrapper] {
                            listener: [Function (anonymous)]
                          },
                          [Function: onClose],
                          [Function: socketCloseListener]
                        ],
                        end: [Function: onReadableStreamEnd],
                        newListener: [Function: keylogNewListener],
                        secure: [Function: onConnectSecure],
                        session: [Function (anonymous)],
                        free: [Function: onFree],
                        timeout: [Function: onTimeout],
                        agentRemove: [Function: onRemove],
                        error: [Function: socketErrorListener],
                        finish: [Function: bound onceWrapper] {
                          listener: [Function: destroy]
                        }
                      },
                      _eventsCount: 10,
                      connecting: false,
                      _hadError: false,
                      _parent: null,
                      _host: 'api.mercadolibre.com',
                      _readableState: ReadableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        buffer: BufferList { head: null, tail: null, length: 0 },
                        length: 0,
                        pipes: [],
                        flowing: true,
                        ended: false,
                        endEmitted: false,
                        reading: true,
                        constructed: true,
                        sync: false,
                        needReadable: true,
                        emittedReadable: false,
                        readableListening: false,
                        resumeScheduled: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        destroyed: false,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        defaultEncoding: 'utf8',
                        awaitDrainWriters: null,
                        multiAwaitDrain: false,
                        readingMore: false,
                        dataEmitted: true,
                        decoder: null,
                        encoding: null,
                        [Symbol(kPaused)]: false
                      },
                      _maxListeners: undefined,
                      _writableState: WritableState {
                        objectMode: false,
                        highWaterMark: 16384,
                        finalCalled: true,
                        needDrain: false,
                        ending: true,
                        ended: true,
                        finished: false,
                        destroyed: false,
                        decodeStrings: false,
                        defaultEncoding: 'utf8',
                        length: 0,
                        writing: false,
                        corked: 0,
                        sync: false,
                        bufferProcessing: false,
                        onwrite: [Function: bound onwrite],
                        writecb: null,
                        writelen: 0,
                        afterWriteTickInfo: null,
                        buffered: [],
                        bufferedIndex: 0,
                        allBuffers: true,
                        allNoop: true,
                        pendingcb: 1,
                        constructed: true,
                        prefinished: false,
                        errorEmitted: false,
                        emitClose: false,
                        autoDestroy: true,
                        errored: null,
                        closed: false,
                        closeEmitted: false,
                        [Symbol(kOnFinished)]: []
                      },
                      allowHalfOpen: false,
                      _sockname: null,
                      _pendingData: null,
                      _pendingEncoding: '',
                      server: undefined,
                      _server: null,
                      ssl: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _requestCert: true,
                      _rejectUnauthorized: true,
                      parser: null,
                      _httpMessage: [Circular *2],
                      [Symbol(res)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(verified)]: true,
                      [Symbol(pendingSession)]: null,
                      [Symbol(async_id_symbol)]: 538,
                      [Symbol(kHandle)]: TLSWrap {
                        _parent: TCP {
                          reading: [Getter/Setter],
                          onconnection: null,
                          [Symbol(owner_symbol)]: [Circular *1]
                        },
                        _parentWrap: undefined,
                        _secureContext: SecureContext { context: SecureContext {} },
                        reading: true,
                        onkeylog: [Function: onkeylog],
                        onhandshakestart: {},
                        onhandshakedone: [Function (anonymous)],
                        onocspresponse: [Function: onocspresponse],
                        onnewsession: [Function: onnewsessionclient],
                        onerror: [Function: onerror],
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      [Symbol(lastWriteQueueSize)]: 0,
                      [Symbol(timeout)]: null,
                      [Symbol(kBuffer)]: null,
                      [Symbol(kBufferCb)]: null,
                      [Symbol(kBufferGen)]: null,
                      [Symbol(kCapture)]: false,
                      [Symbol(kSetNoDelay)]: false,
                      [Symbol(kSetKeepAlive)]: true,
                      [Symbol(kSetKeepAliveInitialDelay)]: 60,
                      [Symbol(kBytesRead)]: 0,
                      [Symbol(kBytesWritten)]: 0,
                      [Symbol(connect-options)]: {
                        rejectUnauthorized: true,
                        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                        checkServerIdentity: [Function: checkServerIdentity],
                        minDHSize: 1024,
                        maxRedirects: 21,
                        maxBodyLength: 10485760,
                        protocol: 'https:',
                        path: null,
                        method: 'GET',
                        headers: {
                          Accept: 'application/json, text/plain, */*',
                          Authorization: 'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378',
                          'User-Agent': 'axios/0.27.2'
                        },
                        agent: undefined,
                        agents: { http: undefined, https: undefined },
                        auth: undefined,
                        hostname: 'api.mercadolibre.com',
                        port: 443,
                        nativeProtocols: [Circular *4],
                        pathname: '/shipments/41441506905',
                        _defaultAgent: [Circular *3],
                        host: 'api.mercadolibre.com',
                        servername: 'api.mercadolibre.com',
                        _agentKey: 'api.mercadolibre.com:443:::::::::::::::::::::',
                        encoding: null,
                        singleUse: true
                      },
                      [Symbol(RequestTimeout)]: undefined
                    }
                  ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'api.mercadolibre.com:443:::::::::::::::::::::': <Buffer 30 82 07 bf 02 01 01 02 02 03 04 04 02 13 01 04 20 84 90 d4 f8 38 7e 31 e2 c5 4a 1b 88 da d8 77 c0 7f ec 5c c8 a6 63 d6 96 1e 72 42 25 a0 06 22 74 04 ... 1937 more bytes>
                  },
                  list: [ 'api.mercadolibre.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/shipments/41441506905'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 0,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *2],
        _currentUrl: 'https://api.mercadolibre.com/shipments/41441506905',
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        authorization: [
          'Authorization',
          'Bearer APP_USR-3857644831898191-061214-e471e37d26bbd590cd42ecc64f679cb5-309239378'
        ],
        'user-agent': [ 'User-Agent', 'axios/0.27.2' ],
        host: [ 'Host', 'api.mercadolibre.com' ]
      }
    },
    data: {
      message: 'invalid_token',
      error: 'not_found',
      status: 401,
      cause: []
    }
  },
  level: 'error',
  timestamp: '2022-06-13T01:06:01.900Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:09:08.808Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:09:17.261Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:09:27.575Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:09:28.701Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:09:32.810Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:09:37.442Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:09:41.890Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:09:43.453Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:09:57.467Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:10:24.738Z'
}
{
  message: 'invalid_token',
  error: 'not_found',
  status: 401,
  cause: [],
  level: 'error',
  timestamp: '2022-06-13T01:10:34.421Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:11:39.468Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:12:30.007Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:13:28.021Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:13:45.639Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:13:51.346Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:14:18.271Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:14:24.013Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:14:28.670Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:14:32.333Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:14:52.937Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:14:53.808Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:14:56.076Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:15:02.441Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:15:03.659Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:15:07.009Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:15:12.983Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:15:16.225Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:15:22.227Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:15:23.626Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:15:34.759Z'
}
{
  message: 'invalid_token',
  error: 'not_found',
  status: 401,
  cause: [],
  level: 'error',
  timestamp: '2022-06-13T01:15:58.197Z'
}
{
  message: 'invalid_token',
  error: 'not_found',
  status: 401,
  cause: [],
  level: 'error',
  timestamp: '2022-06-13T01:17:13.939Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:23:24.282Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:24:05.087Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:24:52.197Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:24:53.387Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:24:56.421Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:24:57.711Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:25:43.256Z'
}
{
  message: 'invalid_token',
  error: 'not_found',
  status: 401,
  cause: [],
  level: 'error',
  timestamp: '2022-06-13T01:26:12.984Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:27:51.042Z'
}
{
  code: 'EREQUEST',
  originalError: Error: The conversion of a varchar data type to a datetime data type resulted in an out-of-range value.
      at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:382:19)
      at Connection.emit (node:events:527:28)
      at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
      at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
      at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
      at Readable.emit (node:events:527:28)
      at addChunk (node:internal/streams/readable:315:12)
      at readableAddChunk (node:internal/streams/readable:289:9)
      at Readable.push (node:internal/streams/readable:228:10)
      at next (node:internal/streams/from:98:31) {
    info: ErrorMessageToken {
      name: 'ERROR',
      handlerName: 'onErrorMessage',
      number: 242,
      state: 3,
      class: 16,
      message: 'The conversion of a varchar data type to a datetime data type resulted in an out-of-range value.',
      serverName: 'NBJMAUAS\\NEWMANAG',
      procName: '',
      lineNumber: 1
    }
  },
  name: 'RequestError',
  number: 242,
  lineNumber: 1,
  state: 3,
  class: 16,
  serverName: 'NBJMAUAS\\NEWMANAG',
  procName: '',
  precedingErrors: [],
  level: 'error',
  timestamp: '2022-06-13T01:28:27.392Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:30:28.343Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:35:03.654Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:35:06.042Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:35:07.068Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:35:08.951Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:35:14.516Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:39:44.964Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:39:53.273Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:44:17.139Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:44:19.752Z'
}
{
  code: 'EREQUEST',
  originalError: Error: The conversion of a varchar data type to a datetime data type resulted in an out-of-range value.
      at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:382:19)
      at Connection.emit (node:events:527:28)
      at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
      at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
      at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
      at Readable.emit (node:events:527:28)
      at addChunk (node:internal/streams/readable:315:12)
      at readableAddChunk (node:internal/streams/readable:289:9)
      at Readable.push (node:internal/streams/readable:228:10)
      at next (node:internal/streams/from:98:31) {
    info: ErrorMessageToken {
      name: 'ERROR',
      handlerName: 'onErrorMessage',
      number: 242,
      state: 3,
      class: 16,
      message: 'The conversion of a varchar data type to a datetime data type resulted in an out-of-range value.',
      serverName: 'NBJMAUAS\\NEWMANAG',
      procName: '',
      lineNumber: 1
    }
  },
  name: 'RequestError',
  number: 242,
  lineNumber: 1,
  state: 3,
  class: 16,
  serverName: 'NBJMAUAS\\NEWMANAG',
  procName: '',
  precedingErrors: [],
  level: 'error',
  timestamp: '2022-06-13T01:45:19.793Z'
}
{
  code: 'EREQUEST',
  originalError: Error: The conversion of a varchar data type to a datetime data type resulted in an out-of-range value.
      at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:382:19)
      at Connection.emit (node:events:527:28)
      at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
      at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
      at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
      at Readable.emit (node:events:527:28)
      at addChunk (node:internal/streams/readable:315:12)
      at readableAddChunk (node:internal/streams/readable:289:9)
      at Readable.push (node:internal/streams/readable:228:10)
      at next (node:internal/streams/from:98:31) {
    info: ErrorMessageToken {
      name: 'ERROR',
      handlerName: 'onErrorMessage',
      number: 242,
      state: 3,
      class: 16,
      message: 'The conversion of a varchar data type to a datetime data type resulted in an out-of-range value.',
      serverName: 'NBJMAUAS\\NEWMANAG',
      procName: '',
      lineNumber: 1
    }
  },
  name: 'RequestError',
  number: 242,
  lineNumber: 1,
  state: 3,
  class: 16,
  serverName: 'NBJMAUAS\\NEWMANAG',
  procName: '',
  precedingErrors: [],
  level: 'error',
  timestamp: '2022-06-13T01:47:19.821Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:50:59.668Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:51:02.175Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:51:22.583Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:51:28.257Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:51:30.250Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:51:56.438Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:51:58.689Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:53:09.829Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:53:10.955Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:53:12.634Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:53:29.845Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:54:03.652Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:54:05.526Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:54:07.946Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:54:36.954Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:54:40.270Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:54:51.378Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:55:06.145Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:55:07.063Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:55:18.933Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:55:28.501Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:55:51.065Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:56:20.842Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:56:33.956Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:56:36.031Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:57:05.516Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:57:34.380Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:57:49.931Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:57:53.102Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T01:57:56.787Z'
}
{
  code: 'EREQUEST',
  originalError: Error: The conversion of a varchar data type to a datetime data type resulted in an out-of-range value.
      at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:382:19)
      at Connection.emit (node:events:527:28)
      at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
      at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
      at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
      at Readable.emit (node:events:527:28)
      at addChunk (node:internal/streams/readable:315:12)
      at readableAddChunk (node:internal/streams/readable:289:9)
      at Readable.push (node:internal/streams/readable:228:10)
      at next (node:internal/streams/from:98:31) {
    info: ErrorMessageToken {
      name: 'ERROR',
      handlerName: 'onErrorMessage',
      number: 242,
      state: 3,
      class: 16,
      message: 'The conversion of a varchar data type to a datetime data type resulted in an out-of-range value.',
      serverName: 'NBJMAUAS\\NEWMANAG',
      procName: '',
      lineNumber: 1
    }
  },
  name: 'RequestError',
  number: 242,
  lineNumber: 1,
  state: 3,
  class: 16,
  serverName: 'NBJMAUAS\\NEWMANAG',
  procName: '',
  precedingErrors: [],
  level: 'error',
  timestamp: '2022-06-13T01:58:13.889Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:02:10.005Z'
}
{
  code: 'EREQUEST',
  originalError: Error: The conversion of a varchar data type to a datetime data type resulted in an out-of-range value.
      at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:382:19)
      at Connection.emit (node:events:527:28)
      at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
      at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
      at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
      at Readable.emit (node:events:527:28)
      at addChunk (node:internal/streams/readable:315:12)
      at readableAddChunk (node:internal/streams/readable:289:9)
      at Readable.push (node:internal/streams/readable:228:10)
      at next (node:internal/streams/from:98:31) {
    info: ErrorMessageToken {
      name: 'ERROR',
      handlerName: 'onErrorMessage',
      number: 242,
      state: 3,
      class: 16,
      message: 'The conversion of a varchar data type to a datetime data type resulted in an out-of-range value.',
      serverName: 'NBJMAUAS\\NEWMANAG',
      procName: '',
      lineNumber: 1
    }
  },
  name: 'RequestError',
  number: 242,
  lineNumber: 1,
  state: 3,
  class: 16,
  serverName: 'NBJMAUAS\\NEWMANAG',
  procName: '',
  precedingErrors: [],
  level: 'error',
  timestamp: '2022-06-13T02:02:15.008Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:10:34.857Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:10:38.080Z'
}
{
  code: 'EREQUEST',
  originalError: Error: The conversion of a varchar data type to a datetime data type resulted in an out-of-range value.
      at handleError (D:\Proyectos\MeliFlex\node_modules\mssql\lib\tedious\request.js:382:19)
      at Connection.emit (node:events:527:28)
      at Connection.emit (D:\Proyectos\MeliFlex\node_modules\tedious\lib\connection.js:1079:18)
      at RequestTokenHandler.onErrorMessage (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\handler.js:365:21)
      at Readable.<anonymous> (D:\Proyectos\MeliFlex\node_modules\tedious\lib\token\token-stream-parser.js:26:33)
      at Readable.emit (node:events:527:28)
      at addChunk (node:internal/streams/readable:315:12)
      at readableAddChunk (node:internal/streams/readable:289:9)
      at Readable.push (node:internal/streams/readable:228:10)
      at next (node:internal/streams/from:98:31) {
    info: ErrorMessageToken {
      name: 'ERROR',
      handlerName: 'onErrorMessage',
      number: 242,
      state: 3,
      class: 16,
      message: 'The conversion of a varchar data type to a datetime data type resulted in an out-of-range value.',
      serverName: 'NBJMAUAS\\NEWMANAG',
      procName: '',
      lineNumber: 1
    }
  },
  name: 'RequestError',
  number: 242,
  lineNumber: 1,
  state: 3,
  class: 16,
  serverName: 'NBJMAUAS\\NEWMANAG',
  procName: '',
  precedingErrors: [],
  level: 'error',
  timestamp: '2022-06-13T02:11:08.201Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:11:59.694Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:12:12.276Z'
}
{
  info: ErrorMessageToken {
    name: 'ERROR',
    handlerName: 'onErrorMessage',
    number: 242,
    state: 3,
    class: 16,
    message: 'The conversion of a varchar data type to a datetime data type resulted in an out-of-range value.',
    serverName: 'NBJMAUAS\\NEWMANAG',
    procName: '',
    lineNumber: 1
  },
  level: 'error',
  timestamp: '2022-06-13T02:12:30.660Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:13:41.894Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:14:09.411Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:14:13.871Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:14:25.162Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:14:40.484Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:14:56.051Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:15:05.303Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:15:09.784Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:15:13.911Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:15:17.730Z'
}
{ level: 'error', timestamp: '2022-06-13T02:15:36.438Z' }
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:20:34.809Z'
}
{
  message: undefined,
  level: 'error',
  timestamp: '2022-06-13T02:20:46.526Z'
}
{ level: 'error', timestamp: '2022-06-13T02:20:46.527Z' }
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:21:55.131Z'
}
{
  name: 'ERROR',
  handlerName: 'onErrorMessage',
  number: 242,
  state: 3,
  class: 16,
  message: 'The conversion of a varchar data type to a datetime data type resulted in an out-of-range value.',
  serverName: 'NBJMAUAS\\NEWMANAG',
  procName: '',
  lineNumber: 1,
  level: 'error',
  timestamp: '2022-06-13T02:24:28.003Z'
}
{ level: 'error', timestamp: '2022-06-13T02:24:28.004Z' }
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:24:47.018Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:24:56.157Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:25:01.110Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:25:05.372Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:25:12.033Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:25:17.256Z'
}
{
  message: 'The conversion of a varchar data type to a datetime data type resulted in an out-of-range value.',
  level: 'error',
  timestamp: '2022-06-13T02:25:30.710Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:26:22.387Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:26:24.814Z'
}
{
  message: 'Conversion failed when converting date and/or time from character string.',
  level: 'error',
  timestamp: '2022-06-13T02:26:30.671Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:27:38.867Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:27:41.821Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:27:44.901Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:27:52.531Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:43:40.744Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:43:42.261Z'
}
{
  message: 'The conversion of a varchar data type to a datetime data type resulted in an out-of-range value.',
  level: 'error',
  timestamp: '2022-06-13T02:43:57.557Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:44:40.952Z'
}
{
  message: 'The conversion of a varchar data type to a datetime data type resulted in an out-of-range value.',
  level: 'error',
  timestamp: '2022-06-13T02:44:46.805Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:47:01.852Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:47:05.673Z'
}
{
  message: 'The conversion of a varchar data type to a datetime data type resulted in an out-of-range value.',
  level: 'error',
  timestamp: '2022-06-13T02:47:11.674Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:50:01.338Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:50:08.063Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:50:14.391Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:50:34.191Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:57:26.357Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:57:45.146Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:57:46.632Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:57:53.577Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:57:55.073Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:58:06.928Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:58:09.806Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:58:11.983Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:58:14.315Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:58:23.067Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:59:20.602Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:59:21.504Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:59:25.315Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:59:28.880Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T02:59:37.993Z'
}
{
  message: 'The conversion of a varchar data type to a datetime data type resulted in an out-of-range value.',
  level: 'error',
  timestamp: '2022-06-13T02:59:52.879Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T03:04:30.452Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T03:04:32.300Z'
}
{
  message: 'The conversion of a varchar data type to a datetime data type resulted in an out-of-range value.',
  level: 'error',
  timestamp: '2022-06-13T03:04:42.589Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T03:05:27.347Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T03:06:28.087Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T03:06:46.248Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T03:06:48.990Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T03:06:54.375Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T03:08:49.637Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T03:09:13.158Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T03:09:36.147Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T03:09:37.343Z'
}
{
  message: 'The conversion of a varchar data type to a datetime data type resulted in an out-of-range value.',
  level: 'error',
  timestamp: '2022-06-13T03:09:55.145Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T03:11:24.128Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T03:11:26.856Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T03:11:28.978Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T03:11:30.331Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T03:11:32.154Z'
}
{
  message: 'The conversion of a varchar data type to a datetime data type resulted in an out-of-range value.',
  level: 'error',
  timestamp: '2022-06-13T03:12:15.217Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T03:12:39.987Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T03:12:48.648Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T03:12:50.548Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T03:13:06.332Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T03:13:20.489Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T12:35:32.135Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T12:36:40.763Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T12:38:22.759Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T12:38:37.013Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T12:39:05.949Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T12:39:15.277Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T12:40:13.025Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T12:42:22.990Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T12:42:37.965Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T12:42:50.608Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T12:43:28.605Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T12:43:35.662Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T12:43:43.120Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T12:43:46.543Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T12:43:49.970Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T12:44:06.968Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T12:45:29.631Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T12:45:34.978Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T12:46:07.816Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T12:46:18.473Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T12:46:20.191Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T12:46:23.646Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T12:46:26.125Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T12:46:29.052Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T12:46:34.299Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T12:46:56.582Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T12:47:01.538Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T12:54:10.964Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T13:02:43.082Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T13:02:58.062Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T13:10:43.629Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T13:11:12.412Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T13:11:13.480Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T13:11:14.802Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T13:11:19.117Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T13:12:41.641Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T13:12:54.941Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T13:12:57.315Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T13:13:51.627Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T13:14:01.687Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T13:16:36.941Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T13:17:29.032Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T13:18:12.587Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T13:18:21.391Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T13:18:30.047Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T13:18:43.746Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:06:29.820Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:10:57.226Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:10:59.553Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:11:30.951Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:11:34.318Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:11:37.162Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:11:58.426Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:11:58.430Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:12:06.593Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:12:06.598Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:12:09.690Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:12:09.704Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:12:17.438Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:12:17.445Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:13:26.262Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:13:26.270Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:13:37.962Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:13:37.970Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:20:25.002Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:20:25.007Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:20:27.727Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:20:27.733Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:24:58.839Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:24:58.877Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:25:49.717Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:25:49.723Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:27:30.771Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:27:30.778Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:31:42.685Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:31:42.699Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:31:44.368Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:31:44.375Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:31:45.690Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:31:45.700Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:32:11.994Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:32:12.003Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:32:14.485Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:32:14.491Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:32:17.106Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:32:17.116Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:32:18.554Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:32:18.562Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:32:21.812Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:32:21.821Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:32:25.536Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:32:25.545Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:32:28.167Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:32:28.172Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:32:53.601Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:32:53.609Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:33:08.340Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:33:08.352Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:33:11.711Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:33:11.726Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:33:51.210Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:33:51.254Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:34:16.939Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:34:16.950Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:34:20.264Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:34:20.269Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:34:25.445Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:34:25.451Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:34:31.398Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:34:31.404Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:34:36.086Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:34:36.092Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:34:45.818Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:34:45.827Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:34:49.308Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:34:49.318Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:34:55.747Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:34:55.755Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:34:58.158Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:34:58.165Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:35:02.281Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:35:02.286Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:38:24.655Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:38:24.687Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:38:26.482Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:38:26.487Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:38:46.126Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:38:46.139Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:38:48.474Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:38:48.481Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:38:51.486Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:38:51.492Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:38:53.159Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:38:53.170Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:38:56.848Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:38:56.854Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:39:04.654Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:39:04.661Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:39:09.754Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:39:09.760Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:39:30.143Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:39:30.148Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:39:35.834Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:39:35.842Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:41:49.937Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:41:49.948Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:41:51.535Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:41:51.542Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:57:09.868Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:57:09.874Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:57:14.674Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:57:14.684Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:57:26.225Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:57:26.232Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:57:52.969Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:57:52.976Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:58:09.530Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:58:09.543Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:58:16.717Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:58:16.726Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:58:24.178Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:58:24.186Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:58:26.285Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:58:26.294Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T14:58:28.150Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T14:58:28.155Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T15:13:05.140Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T15:13:05.145Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T15:14:05.476Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T15:14:05.482Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T15:49:05.919Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T15:49:05.926Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T15:49:07.482Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T15:49:07.487Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T15:49:09.260Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T15:49:09.265Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T15:53:29.451Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T15:53:29.457Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T15:53:34.264Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T15:53:34.270Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T15:53:37.319Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T15:53:37.328Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T15:53:40.678Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T15:53:40.683Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T15:53:43.665Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T15:53:43.670Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T15:53:46.148Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T15:53:46.154Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T15:53:48.317Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T15:53:48.324Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T15:58:10.841Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T15:58:10.847Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T15:58:12.718Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T15:58:12.725Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T15:58:15.003Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T15:58:15.011Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T16:00:41.917Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T16:00:41.923Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T16:00:43.679Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T16:00:43.692Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T16:14:05.397Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T16:14:05.408Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T16:34:11.196Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T16:34:11.203Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T16:34:25.313Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T16:34:25.378Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T16:34:26.450Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T16:34:26.457Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T16:35:02.896Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T16:35:02.907Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T16:35:06.207Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T16:35:06.214Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T16:35:13.692Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T16:35:13.700Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T16:35:27.859Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T16:35:27.869Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T16:35:30.029Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T16:35:30.037Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T16:35:30.917Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T16:35:30.923Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T16:35:34.052Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T16:35:34.061Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T16:35:36.562Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T16:35:36.569Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T16:35:40.557Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T16:35:40.567Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T16:35:42.202Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T16:35:42.210Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T16:35:44.073Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T16:35:44.079Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T16:35:45.357Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T16:35:45.366Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T16:35:46.695Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T16:35:46.702Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T16:35:50.113Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T16:35:50.120Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T16:35:54.614Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T16:35:54.621Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T16:35:56.266Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T16:35:56.273Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T16:36:01.859Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T16:36:01.866Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T16:36:03.206Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T16:36:03.213Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T20:39:49.952Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T20:39:49.957Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T20:39:52.024Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T20:39:52.030Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T20:40:08.433Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T20:40:08.442Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T20:40:10.069Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T20:40:10.075Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T20:40:14.042Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T20:40:14.048Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T20:40:16.843Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T20:40:16.848Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-13T20:40:22.008Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-13T20:40:22.016Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:23:18.229Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:23:18.234Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:27:05.487Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:27:05.495Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:27:33.845Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:27:33.851Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:27:36.446Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:27:36.470Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:27:40.217Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:27:40.229Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:30:12.045Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:30:12.054Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:30:16.924Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:30:16.931Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:30:19.993Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:30:20.005Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:30:23.021Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:30:23.031Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:31:42.571Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:31:42.582Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:32:21.905Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:32:21.914Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:32:46.265Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:32:46.271Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:33:28.079Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:33:28.099Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:34:25.831Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:34:25.842Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:37:06.201Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:37:06.231Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:37:11.475Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:37:11.547Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:37:14.939Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:37:14.991Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:37:16.705Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:37:16.725Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:42:11.175Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:42:11.182Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:42:15.117Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:42:15.126Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:42:17.069Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:42:17.074Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:42:19.356Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:42:19.363Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:42:22.416Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:42:22.424Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:42:23.623Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:42:23.633Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:42:24.896Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:42:24.905Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:42:26.322Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:42:26.329Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:45:20.208Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:45:20.216Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:45:27.799Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:45:27.811Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:49:26.005Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:49:26.011Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:49:31.461Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:49:31.468Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:49:35.748Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:49:35.755Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:49:42.127Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:49:42.152Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:49:43.369Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:49:43.377Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:49:44.299Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:49:44.307Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:49:48.565Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:49:48.578Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:49:50.677Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:49:50.684Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:49:52.489Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:49:52.495Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:49:55.574Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:49:55.585Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:50:02.823Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:50:02.830Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:50:05.235Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:50:05.287Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:50:07.013Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:50:07.020Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:50:19.322Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:50:19.331Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:50:20.872Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:50:20.877Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:50:26.969Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:50:26.977Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:50:36.943Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:50:36.949Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:50:39.154Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:50:39.160Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:50:41.187Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:50:41.193Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:50:44.339Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:50:44.346Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:50:53.068Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:50:53.074Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:51:02.325Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:51:02.332Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:51:07.841Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:51:07.847Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:51:10.133Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:51:10.139Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:51:11.480Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:51:11.485Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:51:12.867Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:51:12.874Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:51:32.044Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:51:32.051Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:51:39.309Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:51:39.315Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:51:40.577Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:51:40.582Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:51:44.336Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:51:44.352Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:51:45.287Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:51:45.303Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:51:48.667Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:51:48.673Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:51:49.978Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:51:49.984Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:51:58.044Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:51:58.055Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:52:01.581Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:52:01.586Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:52:02.744Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:52:02.750Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:52:07.971Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:52:07.985Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:53:04.046Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:53:04.058Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:53:07.730Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:53:07.764Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:53:08.841Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:53:08.849Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:53:12.305Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:53:12.316Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:53:13.529Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:53:13.536Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:53:19.811Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:53:19.818Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:53:53.536Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:53:53.550Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:54:16.008Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:54:16.023Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T22:54:21.800Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T22:54:21.838Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T23:01:26.834Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T23:01:26.843Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T23:01:29.855Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T23:01:29.863Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T23:01:31.927Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T23:01:31.937Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T23:01:33.913Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T23:01:33.927Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T23:01:36.162Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T23:01:36.171Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T23:01:38.701Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T23:01:38.718Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T23:02:15.802Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T23:02:15.814Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T23:54:59.283Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T23:54:59.297Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T23:55:23.499Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T23:55:23.509Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T23:55:27.910Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T23:55:27.916Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T23:55:30.815Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T23:55:30.820Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T23:55:32.853Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T23:55:32.866Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T23:55:35.015Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T23:55:35.024Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T23:55:37.282Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T23:55:37.292Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T23:55:39.069Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T23:55:39.075Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T23:55:55.952Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T23:55:55.967Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T23:56:22.509Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T23:56:22.514Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T23:56:27.761Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T23:56:27.766Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T23:56:42.272Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T23:56:42.277Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T23:56:49.641Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T23:56:49.645Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T23:56:52.492Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T23:56:52.502Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-15T23:57:04.977Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-15T23:57:04.982Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T00:02:07.320Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T00:02:07.357Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T00:45:22.047Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T00:45:22.061Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T00:46:45.701Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T00:46:45.706Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T00:46:48.965Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T00:46:48.971Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T00:46:58.486Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T00:46:58.499Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T00:46:59.737Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T00:46:59.748Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T00:47:51.367Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T00:47:51.375Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T00:47:59.394Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T00:47:59.401Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T00:48:03.208Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T00:48:03.237Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T00:48:07.920Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T00:48:07.925Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T00:48:10.625Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T00:48:10.632Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T00:48:14.773Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T00:48:14.785Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T00:48:45.827Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T00:48:45.832Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T00:48:48.771Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T00:48:48.777Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T00:48:50.508Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T00:48:50.516Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T00:49:32.650Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T00:49:32.658Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T00:49:58.497Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T00:49:58.504Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T00:50:10.526Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T00:50:10.539Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T00:52:48.559Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T00:52:48.565Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T00:52:51.527Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T00:52:51.536Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T01:24:17.444Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T01:24:17.484Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T01:24:23.121Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T01:24:23.126Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T12:45:55.302Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T12:45:55.308Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T12:51:22.009Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T12:51:22.017Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T12:51:25.941Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T12:51:25.946Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T12:58:29.121Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T12:58:29.127Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T12:58:32.908Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T12:58:32.914Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T12:58:42.472Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T12:58:42.479Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T12:58:44.448Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T12:58:44.453Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T12:58:47.620Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T12:58:47.624Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T12:59:53.177Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T12:59:53.182Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T12:59:58.204Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T12:59:58.213Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:00:02.358Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:00:02.364Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:01:00.018Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:01:00.050Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:01:01.847Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:01:01.853Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:06:14.522Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:06:14.527Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:06:17.281Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:06:17.285Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:06:21.564Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:06:21.569Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:06:31.783Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:06:31.790Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:06:32.890Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:06:32.895Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:06:34.606Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:06:34.611Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:06:40.691Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:06:40.699Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:06:45.515Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:06:45.522Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:06:47.360Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:06:47.365Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:06:49.921Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:06:49.927Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:06:55.324Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:06:55.329Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:07:26.411Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:07:26.420Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:07:31.102Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:07:31.111Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:07:34.273Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:07:34.280Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:07:39.114Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:07:39.124Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:07:41.445Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:07:41.450Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:07:44.862Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:07:44.868Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:07:45.998Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:07:46.004Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:07:49.182Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:07:49.188Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:07:50.357Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:07:50.364Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:07:53.333Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:07:53.339Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:07:59.521Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:07:59.531Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:08:02.749Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:08:02.755Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:08:07.877Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:08:07.886Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:08:12.590Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:08:12.596Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:08:18.566Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:08:18.571Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:08:23.455Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:08:23.460Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:19:26.607Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:19:26.614Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:19:28.635Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:19:28.641Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:22:45.767Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:22:45.773Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:22:52.508Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:22:52.515Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:23:56.083Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:23:56.106Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:24:17.501Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:24:17.516Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:24:50.524Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:24:50.533Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:24:52.235Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:24:52.243Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:25:32.853Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:25:32.880Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:26:22.351Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:26:22.399Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:26:23.704Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:26:23.711Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:27:55.725Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:27:55.732Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:28:58.418Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:28:58.425Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:32:03.407Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:32:03.413Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:32:08.268Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:32:08.278Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:32:19.669Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:32:19.676Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:33:39.950Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:33:39.955Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:35:29.615Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:35:29.620Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:35:41.856Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:35:41.862Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:35:46.342Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:35:46.364Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T13:36:49.757Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T13:36:49.772Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T14:07:08.597Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T14:07:08.607Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T14:07:18.471Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T14:07:18.478Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T14:23:52.580Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T14:23:52.591Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T14:23:56.026Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T14:23:56.033Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T14:23:59.344Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T14:23:59.350Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T14:24:17.451Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T14:24:17.458Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T14:29:38.786Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T14:29:38.792Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T14:29:43.586Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T14:29:43.591Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T14:31:49.031Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T14:31:49.038Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T14:31:52.353Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T14:31:52.359Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T14:32:04.267Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T14:32:04.274Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T14:32:06.162Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T14:32:06.168Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T14:32:11.874Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T14:32:11.881Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T14:32:18.181Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T14:32:18.193Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T14:32:36.508Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T14:32:36.517Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T14:32:39.263Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T14:32:39.268Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T14:32:41.772Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T14:32:41.778Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T14:32:51.162Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T14:32:51.178Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T14:32:52.965Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T14:32:52.971Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T14:32:54.459Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T14:32:54.465Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T14:33:00.760Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T14:33:00.774Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T14:33:03.932Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T14:33:03.938Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T14:33:11.162Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T14:33:11.173Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T14:36:14.866Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T14:36:14.872Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T14:38:02.335Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T14:38:02.341Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:05:56.433Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:05:56.449Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:06:22.228Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:06:22.241Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:06:26.183Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:06:26.211Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:07:07.640Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:07:07.646Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:07:22.193Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:07:22.198Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:07:33.733Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:07:33.749Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:07:35.899Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:07:35.912Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:07:37.766Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:07:37.781Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:07:42.348Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:07:42.354Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:08:34.588Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:08:34.594Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:08:42.859Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:08:42.865Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:08:52.520Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:08:52.528Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:08:53.897Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:08:53.903Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:08:56.644Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:08:56.652Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:10:21.173Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:10:21.191Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:10:25.487Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:10:25.494Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:10:26.591Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:10:26.598Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:10:43.547Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:10:43.552Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:11:24.275Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:11:24.281Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:11:31.131Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:11:31.139Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:12:07.438Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:12:07.444Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:12:26.380Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:12:26.386Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:15:24.703Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:15:24.709Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:16:46.615Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:16:46.624Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:21:36.867Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:21:36.874Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:23:14.723Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:23:14.731Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:23:22.088Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:23:22.095Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:23:24.511Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:23:24.526Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:26:33.682Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:26:33.692Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:26:40.087Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:26:40.094Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:26:44.313Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:26:44.326Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:26:48.331Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:26:48.343Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:26:50.128Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:26:50.136Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:28:17.980Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:28:17.985Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:28:27.424Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:28:27.432Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:28:29.047Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:28:29.054Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:28:30.480Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:28:30.488Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:28:55.105Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:28:55.115Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-16T15:29:01.424Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-16T15:29:01.430Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T13:20:02.360Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T13:20:02.365Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T13:20:05.642Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T13:20:05.683Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T13:20:06.715Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T13:20:06.723Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T13:20:12.670Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T13:20:12.676Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T13:24:17.168Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T13:24:17.175Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T13:24:19.687Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T13:24:19.692Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T13:24:28.738Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T13:24:28.743Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T13:24:40.346Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T13:24:40.351Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T13:32:12.382Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T13:32:12.388Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T13:32:15.063Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T13:32:15.070Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T13:32:22.113Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T13:32:22.118Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T13:32:23.419Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T13:32:23.424Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T13:32:26.776Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T13:32:26.783Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T13:32:29.478Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T13:32:29.482Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T13:32:33.148Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T13:32:33.155Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T13:32:35.918Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T13:32:35.924Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T13:32:37.686Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T13:32:37.691Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T13:32:39.567Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T13:32:39.572Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T13:32:41.227Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T13:32:41.233Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T13:33:05.772Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T13:33:05.778Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T13:33:08.340Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T13:33:08.346Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T13:33:28.936Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T13:33:28.942Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T13:33:32.804Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T13:33:32.810Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T13:33:34.206Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T13:33:34.212Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T13:33:35.706Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T13:33:35.710Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T13:33:36.677Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T13:33:36.683Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T13:34:22.199Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T13:34:22.208Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T13:34:23.419Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T13:34:23.427Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T13:34:26.615Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T13:34:26.620Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T13:34:28.233Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T13:34:28.239Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T14:11:50.309Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T14:11:50.317Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T14:11:51.798Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T14:11:51.805Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T14:11:52.981Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T14:11:52.987Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T14:32:44.139Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T14:32:44.148Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T14:32:50.632Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T14:32:50.641Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T14:37:17.381Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T14:37:17.387Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T14:40:59.332Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T14:40:59.337Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T14:42:47.843Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T14:42:47.850Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T14:42:53.003Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T14:42:53.009Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T14:42:54.844Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T14:42:54.923Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T14:44:42.911Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T14:44:42.919Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T14:45:01.653Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T14:45:01.662Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T14:45:25.508Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T14:45:25.516Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T14:45:45.126Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T14:45:45.132Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T14:45:50.467Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T14:45:50.473Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T14:48:00.403Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T14:48:00.440Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T14:48:37.077Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T14:48:37.086Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T14:48:43.191Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T14:48:43.240Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T14:48:47.245Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T14:48:47.253Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T14:49:11.580Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T14:49:11.589Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T14:49:13.910Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T14:49:13.917Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T14:50:10.833Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T14:50:10.839Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T14:50:12.717Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T14:50:12.723Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T14:50:18.820Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T14:50:18.828Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T14:50:28.707Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T14:50:28.715Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T14:50:32.475Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T14:50:32.485Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T14:56:03.045Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T14:56:03.053Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T14:58:36.411Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T14:58:36.419Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T15:37:12.864Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T15:37:12.870Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T15:37:25.766Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T15:37:25.779Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T15:38:06.940Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T15:38:06.946Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T15:38:10.326Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T15:38:10.331Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T15:40:57.913Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T15:40:57.918Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T15:41:34.824Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T15:41:34.833Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T15:53:52.713Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T15:53:52.718Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:10:20.011Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:10:20.019Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:15:31.621Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:15:31.627Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:15:37.048Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:15:37.055Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:16:06.978Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:16:06.984Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:16:35.170Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:16:35.181Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:16:44.723Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:16:44.730Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:16:51.600Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:16:51.610Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:16:53.355Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:16:53.361Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:16:55.164Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:16:55.170Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:17:02.901Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:17:02.909Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:17:08.213Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:17:08.220Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:17:27.445Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:17:27.456Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:17:31.474Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:17:31.480Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:17:36.579Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:17:36.584Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:18:01.311Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:18:01.325Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:18:41.820Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:18:41.827Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:18:43.396Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:18:43.405Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:43:08.030Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:43:08.048Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:43:13.260Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:43:13.276Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:43:24.112Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:43:24.122Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:43:27.343Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:43:27.356Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:43:29.790Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:43:29.805Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:44:04.017Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:44:04.033Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:44:06.165Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:44:06.179Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:44:13.680Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:44:13.692Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:44:20.716Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:44:20.764Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:44:23.000Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:44:23.011Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:44:47.220Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:44:47.230Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:45:26.575Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:45:26.609Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:45:30.122Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:45:30.140Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:45:36.385Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:45:36.403Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:45:41.218Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:45:41.231Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:45:43.007Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:45:43.023Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:45:49.939Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:45:49.951Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:45:55.896Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:45:55.916Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:46:01.733Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:46:01.743Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:46:13.589Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:46:13.609Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:46:15.871Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:46:15.927Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:46:49.072Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:46:49.089Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:46:55.383Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:46:55.394Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:46:58.839Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:46:58.854Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:47:06.151Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:47:06.164Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:47:17.940Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:47:17.975Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:47:23.599Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:47:23.612Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:47:30.184Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:47:30.194Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:47:33.170Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:47:33.196Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:47:37.512Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:47:37.528Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:47:52.409Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:47:52.419Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:47:58.271Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:47:58.335Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:48:05.527Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:48:05.534Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:48:12.965Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:48:12.982Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:48:15.412Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:48:15.435Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:48:26.401Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:48:26.429Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:48:31.347Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:48:31.369Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:48:34.662Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:48:34.672Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:48:37.142Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:48:37.182Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:48:43.202Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:48:43.215Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:48:51.593Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:48:51.601Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:49:13.963Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:49:13.974Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:49:16.127Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:49:16.137Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:49:22.639Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:49:22.648Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:49:27.655Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:49:27.670Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:49:50.819Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:49:50.839Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:49:56.551Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:49:56.567Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:50:00.525Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:50:00.539Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:50:03.015Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:50:03.027Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:50:05.642Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:50:05.658Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:50:10.545Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:50:10.553Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:50:14.383Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:50:14.402Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:52:33.577Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:52:33.585Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:54:10.912Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:54:10.925Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:54:26.568Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:54:26.585Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:55:06.024Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:55:06.056Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:55:22.256Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:55:22.263Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:55:31.773Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:55:31.794Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:55:40.324Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:55:40.333Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:55:48.789Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:55:48.797Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:56:38.572Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:56:38.581Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:56:47.052Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:56:47.096Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:57:03.300Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:57:03.308Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:57:06.004Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:57:06.012Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:57:12.754Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:57:12.763Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:57:16.486Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:57:16.494Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:57:49.384Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:57:49.397Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:58:28.278Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:58:28.284Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:58:30.220Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:58:30.228Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:59:29.752Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:59:29.759Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:59:35.634Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:59:35.641Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:59:45.130Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:59:45.135Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:59:49.972Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:59:49.981Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T16:59:59.631Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T16:59:59.637Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:00:11.329Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:00:11.337Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:01:01.697Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:01:01.704Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:01:03.666Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:01:03.671Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:01:05.440Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:01:05.447Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:01:08.858Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:01:08.864Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:01:16.600Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:01:16.605Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:01:27.558Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:01:27.565Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:01:28.977Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:01:28.982Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:02:17.776Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:02:17.782Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:02:26.482Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:02:26.494Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:02:31.118Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:02:31.125Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:02:50.104Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:02:50.112Z'
}
{
  message: "Invalid column name 'undefined'.",
  level: 'error',
  timestamp: '2022-06-17T17:03:06.922Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:03:59.504Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:03:59.510Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:04:00.701Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:04:00.708Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:04:19.678Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:04:19.685Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:04:21.150Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:04:21.155Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:04:39.409Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:04:39.419Z'
}
{
  message: 'Error converting data type varchar to numeric.',
  level: 'error',
  timestamp: '2022-06-17T17:04:49.550Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:05:32.110Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:05:32.115Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:05:36.314Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:05:36.320Z'
}
{
  message: 'Error converting data type varchar to numeric.',
  level: 'error',
  timestamp: '2022-06-17T17:05:37.940Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:06:29.947Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:06:29.951Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:06:35.160Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:06:35.166Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:07:01.571Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:07:01.576Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:07:10.606Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:07:10.615Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:07:14.224Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:07:14.230Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:10:35.181Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:10:35.194Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:10:37.540Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:10:37.557Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:13:57.566Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:13:57.575Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:14:01.143Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:14:01.148Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:14:02.604Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:14:02.609Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:14:06.653Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:14:06.660Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:14:13.757Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:14:13.763Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:14:16.817Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:14:16.822Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:14:51.166Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:14:51.174Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:17:19.830Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:17:19.839Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:20:08.272Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:20:08.280Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:36:59.968Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:36:59.975Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:37:31.140Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:37:31.156Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:37:37.212Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:37:37.218Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:37:42.638Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:37:42.662Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:38:13.567Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:38:13.592Z'
}
{
  message: 'Error converting data type varchar to numeric.',
  level: 'error',
  timestamp: '2022-06-17T17:38:22.705Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:41:28.006Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:41:28.015Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:42:28.033Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:42:28.056Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:42:30.190Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:42:30.199Z'
}
{
  message: 'Error converting data type varchar to numeric.',
  level: 'error',
  timestamp: '2022-06-17T17:43:04.365Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:43:48.288Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:43:48.300Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:45:09.176Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:45:09.184Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:45:11.760Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:45:11.766Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:45:14.753Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:45:14.763Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:45:17.237Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:45:17.244Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:45:19.629Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:45:19.636Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:45:21.940Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:45:21.945Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:45:24.280Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:45:24.292Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:45:30.416Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:45:30.424Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:45:33.927Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:45:33.934Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:45:35.780Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:45:35.785Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:45:38.682Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:45:38.689Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:45:40.909Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:45:40.915Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:45:42.778Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:45:42.783Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:45:55.485Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:45:55.491Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:46:29.414Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:46:29.429Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:46:32.920Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:46:32.929Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:46:36.773Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:46:36.804Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:46:38.784Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:46:38.791Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:46:41.791Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:46:41.798Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:46:43.897Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:46:43.905Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:47:11.193Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:47:11.200Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:47:17.955Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:47:17.968Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:47:32.773Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:47:32.799Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:47:58.852Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:47:58.870Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:48:08.467Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:48:08.475Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:48:13.236Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:48:13.245Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:48:14.886Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:48:14.899Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:48:16.231Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:48:16.241Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:48:20.939Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:48:20.947Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:48:26.523Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:48:26.536Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:48:29.518Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:48:29.528Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:48:34.354Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:48:34.364Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:48:36.373Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:48:36.381Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:48:38.521Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:48:38.530Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:48:41.329Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:48:41.338Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:48:43.787Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:48:43.794Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:48:46.525Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:48:46.533Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:48:56.496Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:48:56.507Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:49:01.738Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:49:01.751Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:50:05.033Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:50:05.043Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:50:10.880Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:50:10.894Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:50:21.019Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:50:21.034Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:50:34.833Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:50:34.840Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:50:36.506Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:50:36.525Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:50:38.496Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:50:38.505Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:50:40.655Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:50:40.666Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:50:44.487Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:50:44.495Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:51:03.521Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:51:03.533Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:51:05.171Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:51:05.180Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:51:23.062Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:51:23.075Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:51:25.419Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:51:25.435Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:51:36.539Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:51:36.549Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:51:46.894Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:51:46.905Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:51:55.216Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:51:55.228Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:51:57.888Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:51:57.898Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:52:07.546Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:52:07.553Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:52:19.379Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:52:19.388Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:52:20.797Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:52:20.804Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:52:25.700Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:52:25.778Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:52:28.976Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:52:29.001Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:52:31.345Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:52:31.362Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:52:39.759Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:52:39.769Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:52:48.265Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:52:48.273Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:52:55.967Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:52:56.017Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:52:58.569Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:52:58.578Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:53:03.676Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:53:03.685Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:53:07.212Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:53:07.223Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:53:30.486Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:53:30.509Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:53:51.397Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:53:51.405Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:53:55.819Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:53:55.862Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:54:04.721Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:54:04.728Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:54:14.296Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:54:14.308Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:54:16.829Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:54:16.844Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:54:44.150Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:54:44.161Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:55:07.800Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:55:07.808Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:55:23.124Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:55:23.138Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:55:32.683Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:55:32.696Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:55:47.003Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:55:47.011Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:55:52.505Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:55:52.513Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:55:54.879Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:55:54.889Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:56:02.384Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:56:02.392Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:56:07.665Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:56:07.680Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:56:17.117Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:56:17.130Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:56:23.046Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:56:23.061Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:56:32.713Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:56:32.728Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:57:06.446Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:57:06.455Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:57:09.300Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:57:09.318Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:57:21.400Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:57:21.410Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:57:26.765Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:57:26.774Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:57:30.107Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:57:30.176Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:57:31.704Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:57:31.712Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:58:32.594Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:58:32.600Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:58:33.914Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:58:33.920Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:59:08.633Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:59:08.643Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:59:10.354Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:59:10.361Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:59:17.725Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:59:17.730Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:59:26.515Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:59:26.522Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:59:35.566Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:59:35.573Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:59:36.684Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:59:36.691Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:59:37.986Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:59:37.993Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:59:39.805Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:59:39.811Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:59:53.876Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:59:53.882Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T17:59:59.762Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T17:59:59.772Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:00:08.021Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:00:08.027Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:00:09.422Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:00:09.429Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:00:11.698Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:00:11.709Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:00:13.187Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:00:13.193Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:00:15.169Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:00:15.177Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:01:02.435Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:01:02.440Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:01:15.039Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:01:15.044Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:01:21.465Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:01:21.472Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:01:25.999Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:01:26.019Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:01:38.309Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:01:38.315Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:01:42.834Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:01:42.847Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:01:47.127Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:01:47.166Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:01:49.679Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:01:49.685Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:01:51.682Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:01:51.687Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:01:53.431Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:01:53.438Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:01:55.842Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:01:55.847Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:01:59.301Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:01:59.307Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:02:02.119Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:02:02.127Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:02:10.823Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:02:10.830Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:02:14.483Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:02:14.488Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:02:24.283Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:02:24.288Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:02:27.031Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:02:27.036Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:02:28.117Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:02:28.122Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:02:44.115Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:02:44.121Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:02:47.216Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:02:47.221Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:02:49.947Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:02:49.954Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:02:53.134Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:02:53.144Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:02:55.422Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:02:55.427Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:02:56.837Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:02:56.843Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:02:59.094Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:02:59.101Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:03:01.648Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:03:01.654Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:03:05.205Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:03:05.211Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:03:09.451Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:03:09.457Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:03:15.270Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:03:15.275Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:03:16.878Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:03:16.885Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:03:19.933Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:03:19.944Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:03:21.253Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:03:21.260Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:03:25.860Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:03:25.867Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:03:27.893Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:03:27.905Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:03:31.634Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:03:31.640Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:03:44.747Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:03:44.754Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:03:57.607Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:03:57.617Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:03:59.354Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:03:59.360Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:04:01.683Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:04:01.688Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:04:04.291Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:04:04.298Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:04:05.961Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:04:05.976Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:04:06.918Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:04:06.927Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:04:14.390Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:04:14.395Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:04:16.502Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:04:16.507Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:04:24.830Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:04:24.835Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:04:30.538Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:04:30.543Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:04:37.867Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:04:37.874Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:04:42.150Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:04:42.155Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:04:49.376Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:04:49.381Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:04:55.721Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:04:55.727Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:04:58.874Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:04:58.885Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:05:00.942Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:05:00.947Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:05:03.708Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:05:03.736Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:05:04.637Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:05:04.642Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:05:05.902Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:05:05.908Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:05:09.861Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:05:09.867Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:05:24.429Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:05:24.439Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:10:16.141Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:10:16.148Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:10:39.771Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:10:39.892Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:10:43.367Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:10:43.432Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:10:56.987Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:10:57.002Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:11:41.208Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:11:41.221Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:11:54.802Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:11:54.809Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:12:10.688Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:12:10.741Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:12:12.858Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:12:12.875Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:12:20.803Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:12:20.813Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:12:36.677Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:12:36.686Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:12:42.224Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:12:42.239Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:12:51.593Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:12:51.618Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:12:56.113Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:12:56.154Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:13:02.095Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:13:02.103Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:13:24.000Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:13:24.056Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:13:27.300Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:13:27.318Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:13:32.392Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:13:32.414Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:13:35.894Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:13:35.908Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:13:41.994Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:13:42.003Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:13:46.463Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:13:46.472Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:13:49.381Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:13:49.389Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:14:02.001Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:14:02.040Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:14:05.483Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:14:05.493Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:14:08.216Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:14:08.225Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:14:18.350Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:14:18.359Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:14:20.717Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:14:20.728Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:14:23.588Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:14:23.597Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:14:26.931Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:14:26.939Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:14:43.284Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:14:43.301Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:14:46.762Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:14:46.770Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:15:29.955Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:15:29.962Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:17:46.462Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:17:46.475Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:17:53.211Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:17:53.219Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:18:58.373Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:18:58.380Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:19:06.308Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:19:06.316Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:19:48.403Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:19:48.437Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:19:53.901Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:19:53.911Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:20:04.461Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:20:04.471Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:20:11.102Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:20:11.112Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:21:36.556Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:21:36.563Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:21:40.271Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:21:40.280Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:21:42.726Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:21:42.734Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:22:23.188Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:22:23.193Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:22:24.859Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:22:24.864Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:22:28.011Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:22:28.019Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:22:30.872Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:22:30.881Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:22:33.033Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:22:33.041Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:22:34.289Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:22:34.296Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:22:38.129Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:22:38.141Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:22:41.385Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:22:41.394Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:24:18.987Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:24:18.994Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:24:33.809Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:24:33.822Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:24:42.448Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:24:42.461Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:24:44.499Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:24:44.507Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:24:58.976Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:24:58.984Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:25:19.277Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:25:19.284Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T18:25:21.121Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T18:25:21.127Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:24:31.249Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:24:31.256Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:24:32.429Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:24:32.436Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:29:19.292Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:29:19.297Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:29:42.459Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:29:42.466Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:29:48.399Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:29:48.408Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:29:53.197Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:29:53.203Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:36:01.838Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:36:01.844Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:36:04.071Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:36:04.077Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:36:26.945Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:36:26.950Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:38:09.968Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:38:09.973Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:46:22.512Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:46:22.517Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:46:38.855Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:46:38.860Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:46:43.594Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:46:43.599Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:49:47.615Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:49:47.627Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:50:58.929Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:50:58.939Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:51:02.079Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:51:02.084Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:51:04.910Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:51:04.915Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:51:10.618Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:51:10.624Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:51:22.437Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:51:22.444Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:51:39.088Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:51:39.093Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:51:43.824Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:51:43.829Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:51:55.439Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:51:55.444Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:52:02.178Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:52:02.182Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:52:09.292Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:52:09.297Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:52:13.202Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:52:13.207Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:52:14.541Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:52:14.556Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:52:15.555Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:52:15.562Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:52:18.219Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:52:18.226Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:52:22.737Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:52:22.742Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:52:26.584Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:52:26.588Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:52:33.800Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:52:33.810Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:52:35.789Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:52:35.796Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:52:45.881Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:52:45.886Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:52:47.518Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:52:47.525Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:52:49.267Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:52:49.277Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:52:55.733Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:52:55.741Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:52:58.359Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:52:58.368Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:53:00.757Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:53:00.767Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:53:04.943Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:53:04.949Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:53:14.843Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:53:14.849Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:53:20.422Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:53:20.427Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:53:22.684Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:53:22.689Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:53:27.993Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:53:27.999Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:54:20.209Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:54:20.218Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:54:24.387Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:54:24.398Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:54:27.417Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:54:27.423Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:54:30.716Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:54:30.722Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:54:31.978Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:54:31.983Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:54:36.534Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:54:36.540Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:54:39.148Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:54:39.155Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:54:41.872Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:54:41.878Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:54:46.226Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:54:46.232Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:55:14.112Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:55:14.120Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:55:18.434Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:55:18.440Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:55:23.457Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:55:23.465Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:55:24.757Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:55:24.763Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:55:30.837Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:55:30.842Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:55:33.581Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:55:33.590Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:57:04.448Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:57:04.456Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T19:58:43.215Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T19:58:43.253Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:00:10.424Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:00:10.490Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:00:11.584Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:00:11.591Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:00:14.924Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:00:14.929Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:00:16.380Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:00:16.391Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:00:18.604Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:00:18.615Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:00:19.618Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:00:19.630Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:01:30.865Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:01:30.874Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:01:38.294Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:01:38.303Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:01:42.655Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:01:42.667Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:01:48.392Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:01:48.399Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:02:06.000Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:02:06.010Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:02:15.972Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:02:15.985Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:02:25.934Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:02:25.943Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:02:30.816Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:02:30.823Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:03:36.150Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:03:36.158Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:05:51.945Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:05:51.964Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:06:22.809Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:06:22.822Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:06:25.734Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:06:25.743Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:06:31.273Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:06:31.282Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:06:33.331Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:06:33.342Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:06:36.554Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:06:36.564Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:07:09.317Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:07:09.345Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:08:33.393Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:08:33.399Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:12:37.105Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:12:37.118Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:12:40.440Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:12:40.447Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:12:42.266Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:12:42.272Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:12:47.692Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:12:47.697Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:12:51.853Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:12:51.860Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:13:01.965Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:13:01.980Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:13:03.390Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:13:03.397Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:13:11.162Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:13:11.169Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:13:18.751Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:13:18.758Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:13:25.088Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:13:25.093Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:13:27.504Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:13:27.512Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:13:36.100Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:13:36.105Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:13:39.554Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:13:39.596Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:14:03.034Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:14:03.039Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:14:10.255Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:14:10.262Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:14:13.067Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:14:13.074Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:14:20.508Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:14:20.514Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:14:22.538Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:14:22.556Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:14:25.747Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:14:25.752Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:18:28.020Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:18:28.025Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:18:30.447Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:18:30.461Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:18:33.743Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:18:33.750Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:19:18.518Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:19:18.526Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:19:35.106Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:19:35.116Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:19:44.433Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:19:44.440Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:19:53.139Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:19:53.152Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:20:03.731Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:20:03.736Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:20:14.170Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:20:14.175Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:23:49.029Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:23:49.042Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:23:58.289Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:23:58.298Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:25:40.279Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:25:40.289Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:25:42.855Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:25:42.865Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:25:45.301Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:25:45.310Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:26:18.382Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:26:18.393Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:26:35.631Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:26:35.646Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:26:43.635Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:26:43.659Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:26:47.179Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:26:47.188Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:26:52.171Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:26:52.180Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:27:21.543Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:27:21.552Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:28:00.465Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:28:00.474Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:28:08.944Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:28:08.957Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:28:26.299Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:28:26.316Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:28:38.090Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:28:38.098Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:29:35.829Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:29:35.841Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:29:44.525Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:29:44.532Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:29:50.403Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:29:50.410Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:29:52.465Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:29:52.483Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:31:25.564Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:31:25.596Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:31:27.975Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:31:27.982Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:33:30.755Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:33:30.764Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:35:33.924Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:35:33.935Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:35:37.594Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:35:37.607Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:36:35.645Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:36:35.656Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:36:48.650Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:36:48.667Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:51:18.069Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:51:18.078Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:51:25.876Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:51:25.886Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:51:40.023Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:51:40.037Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:51:43.774Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:51:43.783Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:51:55.968Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:51:55.976Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:51:59.123Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:51:59.135Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:52:01.934Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:52:01.962Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:52:05.102Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:52:05.110Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:52:07.799Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:52:07.809Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:52:11.924Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:52:11.938Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:52:16.166Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:52:16.175Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:52:21.274Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:52:21.282Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:52:23.369Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:52:23.378Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:52:27.633Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:52:27.641Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:52:53.364Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:52:53.378Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:53:02.190Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:53:02.197Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T20:53:06.774Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T20:53:06.787Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T21:03:23.246Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T21:03:23.254Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-17T21:03:30.416Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-17T21:03:30.441Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:32:50.980Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:32:50.987Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:35:06.972Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:35:06.983Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:35:22.945Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:35:22.952Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:36:39.337Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:36:39.343Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:38:36.516Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:38:36.522Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:38:39.446Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:38:39.453Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:40:31.224Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:40:31.230Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:40:32.691Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:40:32.710Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:41:29.099Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:41:29.106Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:41:40.600Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:41:40.605Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:41:57.465Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:41:57.472Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:42:12.591Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:42:12.597Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:43:54.458Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:43:54.464Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:43:58.770Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:43:58.775Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:44:40.285Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:44:40.294Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:45:05.381Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:45:05.399Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:45:08.563Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:45:08.571Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:45:10.427Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:45:10.433Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:45:22.383Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:45:22.390Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:45:48.292Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:45:48.298Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:45:50.655Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:45:50.660Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:45:54.943Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:45:54.948Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:46:45.933Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:46:45.939Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:47:25.307Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:47:25.314Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:48:22.897Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:48:22.903Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:50:21.706Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:50:21.715Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:51:03.930Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:51:03.939Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:51:06.684Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:51:06.691Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:51:14.248Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:51:14.254Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:51:18.672Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:51:18.683Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:51:53.907Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:51:53.913Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:51:57.506Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:51:57.514Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:53:12.228Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:53:12.234Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:53:15.347Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:53:15.353Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:53:22.201Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:53:22.216Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:53:24.667Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:53:24.672Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:53:27.799Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:53:27.806Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:53:50.251Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:53:50.269Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:54:55.673Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:54:55.685Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:55:01.707Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:55:01.714Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:56:30.203Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:56:30.210Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T01:57:07.854Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T01:57:07.859Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T02:00:35.899Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T02:00:35.907Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T02:01:11.547Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T02:01:11.552Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T02:01:14.004Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T02:01:14.010Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T02:01:28.792Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T02:01:28.797Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T02:01:29.919Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T02:01:29.927Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T02:01:56.616Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T02:01:56.622Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T02:02:01.008Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T02:02:01.015Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T02:02:03.807Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T02:02:03.814Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T02:02:05.467Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T02:02:05.474Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T02:02:45.437Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T02:02:45.442Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T02:02:49.257Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T02:02:49.263Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T02:02:55.027Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T02:02:55.032Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T02:03:06.109Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T02:03:06.115Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T02:03:09.170Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T02:03:09.181Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T02:03:13.333Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T02:03:13.341Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T02:07:03.816Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T02:07:03.822Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T02:07:10.983Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T02:07:10.992Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T02:07:14.394Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T02:07:14.400Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T02:08:30.789Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T02:08:30.797Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T02:10:35.727Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T02:10:35.734Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T02:10:47.688Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T02:10:47.703Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T02:13:57.394Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T02:13:57.399Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T02:14:23.528Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T02:14:23.534Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T02:14:28.452Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T02:14:28.501Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T02:14:46.339Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T02:14:46.355Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T02:19:22.894Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T02:19:22.902Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T02:24:22.103Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T02:24:22.108Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T02:24:26.877Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T02:24:26.883Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T02:24:31.433Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T02:24:31.440Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T02:25:31.352Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T02:25:31.357Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T02:26:11.225Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T02:26:11.231Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T02:31:48.232Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T02:31:48.241Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T02:31:55.079Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T02:31:55.085Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:06:52.367Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:06:52.375Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:14:21.396Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:14:21.403Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:20:44.143Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:20:44.190Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:20:47.537Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:20:47.546Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:20:52.597Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:20:52.603Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:20:53.700Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:20:53.710Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:20:56.035Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:20:56.041Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:21:24.030Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:21:24.036Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:21:26.144Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:21:26.150Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:21:30.553Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:21:30.573Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:21:36.603Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:21:36.610Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:21:38.905Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:21:38.916Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:21:41.858Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:21:41.865Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:21:48.663Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:21:48.670Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:21:51.476Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:21:51.482Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:22:03.513Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:22:03.519Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:22:34.777Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:22:34.785Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:22:46.239Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:22:46.245Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:22:53.813Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:22:53.822Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:24:36.381Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:24:36.390Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:24:39.058Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:24:39.077Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:24:40.815Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:24:40.822Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:24:45.001Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:24:45.006Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:25:15.482Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:25:15.487Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:27:38.407Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:27:38.427Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:27:49.663Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:27:49.670Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:27:55.339Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:27:55.356Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:27:58.428Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:27:58.438Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:28:02.927Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:28:02.935Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:28:30.653Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:28:30.658Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:28:32.559Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:28:32.569Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:28:34.344Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:28:34.350Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:28:40.302Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:28:40.308Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:28:44.190Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:28:44.196Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:28:46.646Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:28:46.653Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:28:48.904Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:28:48.911Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:28:50.466Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:28:50.472Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:28:59.106Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:28:59.117Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:29:03.284Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:29:03.291Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:29:07.676Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:29:07.683Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:29:10.192Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:29:10.198Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:29:33.388Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:29:33.394Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:29:35.578Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:29:35.586Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:29:40.378Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:29:40.384Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:29:52.462Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:29:52.470Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:29:54.772Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:29:54.777Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:31:11.518Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:31:11.526Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:31:24.744Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:31:24.750Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:35:51.627Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:35:51.640Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:39:31.458Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:39:31.464Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:44:45.228Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:44:45.233Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:59:53.367Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:59:53.375Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:59:55.372Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:59:55.378Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:59:58.058Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:59:58.064Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T03:59:59.425Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T03:59:59.432Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:00:02.808Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:00:02.816Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:00:09.642Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:00:09.651Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:00:18.065Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:00:18.094Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:00:19.419Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:00:19.425Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:00:43.426Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:00:43.433Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:00:46.262Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:00:46.270Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:00:47.798Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:00:47.805Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:00:51.836Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:00:51.843Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:00:53.244Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:00:53.251Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:00:59.065Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:00:59.072Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:01:03.951Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:01:03.960Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:03:31.389Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:03:31.395Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:03:33.971Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:03:33.980Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:04:17.777Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:04:17.782Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:04:19.779Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:04:19.785Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:04:30.965Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:04:30.970Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:04:56.269Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:04:56.286Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:04:59.599Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:04:59.607Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:05:04.190Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:05:04.197Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:05:10.156Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:05:10.162Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:05:12.494Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:05:12.499Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:05:14.750Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:05:14.756Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:05:18.281Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:05:18.288Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:05:19.528Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:05:19.533Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:05:21.687Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:05:21.695Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:05:25.303Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:05:25.309Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:07:08.399Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:07:08.404Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:07:09.890Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:07:09.896Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:07:11.024Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:07:11.029Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:07:17.713Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:07:17.721Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:08:09.284Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:08:09.290Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:08:43.345Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:08:43.350Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:08:47.484Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:08:47.493Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:09:13.003Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:09:13.023Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:09:15.393Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:09:15.399Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:09:18.814Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:09:18.829Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:09:22.520Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:09:22.525Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:09:30.810Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:09:30.823Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:10:01.429Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:10:01.443Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:10:06.106Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:10:06.111Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:10:08.631Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:10:08.638Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:10:23.600Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:10:23.606Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:10:25.248Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:10:25.254Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:10:47.098Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:10:47.103Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:10:59.246Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:10:59.253Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:11:13.207Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:11:13.213Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:11:16.597Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:11:16.603Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:11:17.821Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:11:17.827Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:11:27.541Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:11:27.547Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:12:52.125Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:12:52.130Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:12:55.387Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:12:55.397Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:13:01.593Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:13:01.601Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:13:07.455Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:13:07.467Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:13:10.600Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:13:10.607Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:13:25.193Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:13:25.199Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:13:27.694Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:13:27.719Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:13:28.729Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:13:28.736Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:13:53.758Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:13:53.765Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:13:56.471Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:13:56.477Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:14:12.867Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:14:12.875Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:14:28.037Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:14:28.044Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:14:33.881Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:14:33.889Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:15:48.743Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:15:48.749Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:15:52.235Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:15:52.241Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:15:57.615Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:15:57.623Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:15:59.487Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:15:59.495Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:16:02.249Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:16:02.254Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:16:07.495Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:16:07.501Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:16:17.963Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:16:17.969Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:16:50.808Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:16:50.814Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:16:52.329Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:16:52.335Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:17:04.977Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:17:04.987Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:17:10.126Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:17:10.133Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:17:16.713Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:17:16.726Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:17:18.900Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:17:18.912Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:17:46.918Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:17:46.939Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:17:48.863Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:17:48.869Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:22:48.017Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:22:48.024Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:23:18.056Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:23:18.062Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:30:29.844Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:30:29.852Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:30:31.765Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:30:31.774Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:30:34.787Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:30:34.792Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:30:37.911Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:30:37.919Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:33:09.718Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:33:09.724Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:42:27.658Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:42:27.667Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:42:44.330Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:42:44.337Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:43:24.067Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:43:24.072Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:43:26.881Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:43:26.887Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:43:37.367Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:43:37.385Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:43:38.386Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:43:38.395Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:43:48.607Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:43:48.613Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:43:50.451Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:43:50.456Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:43:58.659Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:43:58.664Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:44:07.509Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:44:07.516Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:44:10.449Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:44:10.455Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:44:37.630Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:44:37.639Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:44:39.744Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:44:39.756Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:44:42.193Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:44:42.208Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:44:44.405Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:44:44.417Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T04:46:39.000Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T04:46:39.007Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:09:53.700Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:09:53.707Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:13:08.137Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:13:08.144Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:13:10.999Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:13:11.004Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:14:03.224Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:14:03.255Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:15:46.688Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:15:46.694Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:15:53.555Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:15:53.562Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:22:50.369Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:22:50.376Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:22:56.702Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:22:56.708Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:23:11.680Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:23:11.686Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:23:17.911Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:23:17.921Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:23:31.004Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:23:31.012Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:24:05.445Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:24:05.454Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:24:17.601Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:24:17.611Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:24:35.383Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:24:35.390Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:24:41.179Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:24:41.188Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:24:45.762Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:24:45.768Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:25:07.206Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:25:07.213Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:25:12.832Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:25:12.844Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:25:32.495Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:25:32.529Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:25:34.572Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:25:34.578Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:27:23.681Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:27:23.687Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:27:54.447Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:27:54.452Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:28:16.547Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:28:16.558Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:30:46.134Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:30:46.141Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:31:24.486Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:31:24.491Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:31:30.009Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:31:30.015Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:31:52.969Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:31:52.977Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:31:57.597Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:31:57.604Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:31:59.388Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:31:59.393Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:39:08.391Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:39:08.397Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:39:18.016Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:39:18.022Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:39:23.096Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:39:23.106Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:39:37.241Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:39:37.247Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:39:44.264Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:39:44.271Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:39:51.691Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:39:51.709Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:39:53.319Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:39:53.326Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:40:01.584Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:40:01.591Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:40:21.071Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:40:21.079Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:40:22.149Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:40:22.154Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:40:25.641Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:40:25.647Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:40:32.480Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:40:32.487Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:40:46.655Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:40:46.661Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:40:51.336Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:40:51.344Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:40:55.897Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:40:55.903Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:41:00.563Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:41:00.571Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:41:10.144Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:41:10.158Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:41:12.545Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:41:12.552Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:41:18.466Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:41:18.474Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:41:23.253Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:41:23.260Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:41:27.959Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:41:27.965Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:41:43.423Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:41:43.428Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:41:45.113Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:41:45.120Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:41:46.494Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:41:46.501Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:41:56.259Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:41:56.264Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:42:01.934Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:42:01.967Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:42:05.336Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:42:05.342Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:42:07.916Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:42:07.922Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:42:41.850Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:42:41.860Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:42:55.394Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:42:55.400Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:43:08.890Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:43:08.896Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:53:54.727Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:53:54.737Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:55:22.495Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:55:22.501Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:55:28.293Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:55:28.300Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:55:35.560Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:55:35.566Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:55:46.822Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:55:46.834Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:55:48.595Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:55:48.601Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:56:02.431Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:56:02.437Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:56:07.479Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:56:07.486Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:57:19.652Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:57:19.660Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T05:57:26.116Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T05:57:26.122Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:00:04.983Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:00:04.989Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:11:43.875Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:11:43.880Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:12:26.622Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:12:26.628Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:12:36.836Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:12:36.842Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:13:03.337Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:13:03.348Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:13:16.463Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:13:16.468Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:13:18.810Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:13:18.815Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:13:22.633Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:13:22.640Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:13:37.204Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:13:37.211Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:13:39.677Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:13:39.682Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:13:41.171Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:13:41.178Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:13:51.976Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:13:51.982Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:15:57.444Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:15:57.462Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:15:59.402Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:15:59.411Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:16:03.220Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:16:03.228Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:16:54.121Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:16:54.127Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:17:02.066Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:17:02.072Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:17:04.866Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:17:04.871Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:17:06.881Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:17:06.888Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:17:09.856Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:17:09.868Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:18:26.540Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:18:26.546Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:19:26.574Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:19:26.580Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:22:13.733Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:22:13.739Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:22:17.036Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:22:17.042Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:22:19.827Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:22:19.834Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:22:22.948Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:22:22.954Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:22:24.335Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:22:24.340Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:22:26.543Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:22:26.549Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:25:11.108Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:25:11.125Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:25:13.486Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:25:13.491Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:25:14.822Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:25:14.829Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:25:24.935Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:25:24.941Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:25:26.392Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:25:26.398Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:25:40.390Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:25:40.399Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:26:11.567Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:26:11.573Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:26:14.661Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:26:14.667Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:26:18.159Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:26:18.165Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:27:18.572Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:27:18.580Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:27:43.523Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:27:43.532Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:27:45.077Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:27:45.087Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:28:29.336Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:28:29.342Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:28:40.618Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:28:40.627Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:33:17.442Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:33:17.450Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:34:52.806Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:34:52.817Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:36:56.832Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:36:56.838Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:39:01.944Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:39:01.951Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:39:13.564Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:39:13.572Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:43:29.968Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:43:29.975Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:44:01.479Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:44:01.485Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:44:02.600Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:44:02.605Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:44:07.229Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:44:07.234Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:44:10.044Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:44:10.051Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:44:13.963Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:44:13.973Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:44:17.344Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:44:17.350Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:44:26.780Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:44:26.786Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:44:38.346Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:44:38.351Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:46:26.060Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:46:26.066Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:49:01.960Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:49:01.967Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:49:32.435Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:49:32.444Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:49:38.938Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:49:38.956Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:50:45.108Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:50:45.115Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:52:10.886Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:52:10.892Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:52:50.964Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:52:50.973Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:52:54.346Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:52:54.353Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:52:56.525Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:52:56.534Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:53:13.688Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:53:13.698Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:53:15.911Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:53:15.920Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:53:19.842Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:53:19.848Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:53:24.189Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:53:24.200Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:53:53.635Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:53:53.646Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:53:54.874Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:53:54.882Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:54:02.179Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:54:02.188Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:54:29.861Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:54:29.870Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:57:04.730Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:57:04.737Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:57:08.469Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:57:08.476Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:57:40.116Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:57:40.132Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:58:15.890Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:58:15.897Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:58:33.437Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:58:33.443Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:58:45.026Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:58:45.041Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:58:46.044Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:58:46.050Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:58:55.696Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:58:55.702Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:59:02.414Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:59:02.422Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T06:59:07.208Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T06:59:07.216Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T07:00:16.940Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T07:00:16.954Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T07:00:18.575Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T07:00:18.582Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T13:30:59.904Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T13:30:59.912Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T13:31:02.463Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T13:31:02.470Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T13:47:46.695Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T13:47:46.700Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T13:50:02.701Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T13:50:02.706Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T13:50:04.042Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T13:50:04.046Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T13:50:11.456Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T13:50:11.461Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T13:50:59.267Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T13:50:59.272Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T13:51:20.213Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T13:51:20.219Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T13:51:23.102Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T13:51:23.107Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T13:51:27.621Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T13:51:27.627Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T13:55:52.586Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T13:55:52.593Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T13:55:54.432Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T13:55:54.439Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T13:55:55.727Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T13:55:55.732Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T13:56:02.480Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T13:56:02.485Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T13:56:12.828Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T13:56:12.833Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T13:56:21.425Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T13:56:21.432Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T13:56:28.912Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T13:56:28.918Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T13:56:30.367Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T13:56:30.374Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T13:56:32.754Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T13:56:32.762Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T13:56:36.699Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T13:56:36.711Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T13:59:29.099Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T13:59:29.105Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T13:59:47.591Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T13:59:47.597Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T13:59:51.413Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T13:59:51.420Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T14:01:34.327Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T14:01:34.336Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T14:07:20.847Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T14:07:20.854Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T14:07:38.343Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T14:07:38.350Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T14:07:40.517Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T14:07:40.524Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T14:09:25.565Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T14:09:25.571Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T14:18:19.064Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T14:18:19.070Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T14:18:23.430Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T14:18:23.436Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T14:18:25.766Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T14:18:25.773Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T14:33:27.855Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T14:33:27.861Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T14:33:51.515Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T14:33:51.521Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T14:33:54.267Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T14:33:54.275Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T14:35:11.180Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T14:35:11.187Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T14:35:29.864Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T14:35:29.869Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T14:35:32.887Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T14:35:32.894Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T14:36:59.057Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T14:36:59.063Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T14:37:03.807Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T14:37:03.814Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T14:37:12.025Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T14:37:12.032Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T14:37:15.036Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T14:37:15.042Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T14:37:18.260Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T14:37:18.266Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T14:37:26.033Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T14:37:26.039Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T14:37:30.715Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T14:37:30.721Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T14:37:33.815Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T14:37:33.825Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T14:37:35.969Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T14:37:35.974Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T14:37:40.884Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T14:37:40.890Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T14:37:45.865Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T14:37:45.871Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T14:38:13.931Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T14:38:13.937Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T14:38:39.653Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T14:38:39.659Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T14:38:53.432Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T14:38:53.437Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T14:38:56.532Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T14:38:56.538Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T14:39:00.140Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T14:39:00.144Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T14:39:01.890Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T14:39:01.906Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T14:39:58.811Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T14:39:58.817Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T14:40:03.865Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T14:40:03.871Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T14:40:05.275Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T14:40:05.281Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T14:40:08.002Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T14:40:08.008Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T14:40:09.292Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T14:40:09.308Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T14:40:11.673Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T14:40:11.683Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:06:33.908Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:06:33.912Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:06:36.952Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:06:36.957Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:06:41.687Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:06:41.693Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:06:46.245Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:06:46.254Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:09:04.584Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:09:04.607Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:09:07.156Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:09:07.162Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:09:10.211Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:09:10.216Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:09:14.118Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:09:14.123Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:09:17.094Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:09:17.100Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:09:31.753Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:09:31.759Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:10:16.962Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:10:16.968Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:10:40.010Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:10:40.014Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:11:42.027Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:11:42.032Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:11:57.873Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:11:57.878Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:12:02.157Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:12:02.162Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:12:05.445Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:12:05.451Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:12:12.697Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:12:12.704Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:12:52.288Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:12:52.293Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:13:14.351Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:13:14.367Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:14:11.531Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:14:11.538Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:14:13.952Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:14:13.957Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:15:04.271Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:15:04.276Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:15:06.584Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:15:06.590Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:15:08.424Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:15:08.430Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:15:58.952Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:15:58.974Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:16:02.678Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:16:02.687Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:17:07.050Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:17:07.057Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:17:26.324Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:17:26.330Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:17:53.615Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:17:53.621Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:18:11.992Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:18:11.999Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:20:42.663Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:20:42.669Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:20:44.011Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:20:44.017Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:20:46.169Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:20:46.176Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:25:38.456Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:25:38.462Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:25:57.081Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:25:57.091Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:38:43.881Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:38:43.886Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:38:50.607Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:38:50.615Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:38:54.749Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:38:54.754Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:38:56.560Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:38:56.566Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:38:58.593Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:38:58.601Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:39:05.779Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:39:05.786Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:39:10.516Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:39:10.521Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:39:15.335Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:39:15.343Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:39:17.285Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:39:17.289Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:39:22.487Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:39:22.495Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:39:27.822Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:39:27.827Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:39:31.424Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:39:31.431Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:40:35.782Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:40:35.792Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:41:51.540Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:41:51.546Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:41:57.327Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:41:57.334Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:42:01.397Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:42:01.413Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T15:42:21.922Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T15:42:21.927Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:23:20.288Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:23:20.292Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:25:00.027Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:25:00.034Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:25:03.078Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:25:03.109Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:25:04.425Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:25:04.430Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:27:06.886Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:27:06.898Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:27:12.067Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:27:12.075Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:27:13.657Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:27:13.665Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:27:15.368Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:27:15.373Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:27:41.799Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:27:41.805Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:27:48.421Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:27:48.426Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:27:52.959Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:27:52.965Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:27:55.476Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:27:55.483Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:28:05.516Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:28:05.523Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:28:08.139Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:28:08.147Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:28:11.823Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:28:11.830Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:28:14.759Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:28:14.765Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:28:17.802Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:28:17.808Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:28:23.996Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:28:24.002Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:28:29.407Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:28:29.412Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:29:12.053Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:29:12.066Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:31:13.392Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:31:13.398Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:31:16.043Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:31:16.049Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:31:22.175Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:31:22.184Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:31:23.545Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:31:23.550Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:31:39.301Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:31:39.308Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:31:47.496Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:31:47.505Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:32:16.261Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:32:16.267Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:32:42.582Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:32:42.588Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:32:53.310Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:32:53.315Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:32:56.520Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:32:56.531Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:33:02.308Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:33:02.315Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:33:08.537Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:33:08.543Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:33:09.766Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:33:09.773Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:33:13.449Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:33:13.456Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:33:20.875Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:33:20.883Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:33:56.944Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:33:56.957Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:34:01.415Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:34:01.426Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:34:03.994Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:34:04.000Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:34:05.876Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:34:05.883Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:34:09.338Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:34:09.345Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:34:14.459Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:34:14.465Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:34:22.599Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:34:22.605Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:34:46.961Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:34:46.967Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:34:58.940Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:34:58.945Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:35:00.842Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:35:00.850Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:35:02.302Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:35:02.307Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:35:31.306Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:35:31.314Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:36:17.573Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:36:17.578Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T16:36:41.977Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T16:36:41.983Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T18:46:11.939Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T18:46:11.951Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T18:46:18.077Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T18:46:18.082Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T18:46:24.662Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T18:46:24.667Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T18:46:30.275Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T18:46:30.281Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T18:46:32.209Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T18:46:32.214Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T18:46:38.071Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T18:46:38.078Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T18:53:30.384Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T18:53:30.396Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T18:53:33.976Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T18:53:33.987Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T18:53:59.141Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T18:53:59.153Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T18:54:05.891Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T18:54:05.896Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T18:54:29.859Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T18:54:29.865Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T18:54:47.948Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T18:54:47.958Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T18:55:05.616Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T18:55:05.623Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T18:55:13.596Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T18:55:13.604Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T18:55:15.088Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T18:55:15.095Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T18:55:19.187Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T18:55:19.199Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T18:55:23.466Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T18:55:23.471Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T18:55:43.152Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T18:55:43.158Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T18:55:46.300Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T18:55:46.306Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T18:55:47.722Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T18:55:47.729Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T18:56:06.273Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T18:56:06.283Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T18:56:10.554Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T18:56:10.560Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T18:56:15.882Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T18:56:15.889Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T18:56:55.690Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T18:56:55.697Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T18:57:01.044Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T18:57:01.052Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T18:57:02.920Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T18:57:02.926Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T18:57:05.458Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T18:57:05.467Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T18:57:09.835Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T18:57:09.840Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T18:57:19.042Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T18:57:19.052Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T18:57:21.212Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T18:57:21.218Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T18:57:23.186Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T18:57:23.193Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T18:57:28.721Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T18:57:28.726Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T20:45:37.061Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T20:45:37.067Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T20:49:35.537Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T20:49:35.543Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T20:49:39.416Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T20:49:39.423Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T21:28:47.426Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T21:28:47.432Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T21:28:51.875Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T21:28:51.893Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T21:28:54.376Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T21:28:54.387Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T21:28:57.950Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T21:28:57.960Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T21:29:01.109Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T21:29:01.117Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T21:29:03.251Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T21:29:03.274Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T21:29:31.403Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T21:29:31.410Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T21:29:39.171Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T21:29:39.178Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T21:36:13.274Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T21:36:13.281Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T21:36:16.066Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T21:36:16.073Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T21:36:46.801Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T21:36:46.812Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T21:39:15.992Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T21:39:15.998Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T21:39:24.828Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T21:39:24.838Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T21:39:52.484Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T21:39:52.493Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T21:39:54.779Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T21:39:54.786Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T21:39:57.374Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T21:39:57.385Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T21:39:58.286Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T21:39:58.292Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T21:40:00.713Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T21:40:00.720Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T21:40:21.879Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T21:40:21.884Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T21:40:33.691Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T21:40:33.697Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T21:40:42.418Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T21:40:42.428Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T21:43:48.545Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T21:43:48.554Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T21:43:54.939Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T21:43:54.944Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T21:43:57.205Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T21:43:57.211Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T21:44:02.695Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T21:44:02.706Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T21:44:07.648Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T21:44:07.655Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T21:44:11.779Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T21:44:11.785Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T21:47:06.632Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T21:47:06.638Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-23T21:49:46.467Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-23T21:49:46.472Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:24:27.024Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:24:27.031Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:24:33.133Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:24:33.139Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:24:40.947Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:24:40.954Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:25:28.951Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:25:28.957Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:25:51.467Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:25:51.476Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:26:22.244Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:26:22.250Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:26:48.835Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:26:48.845Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:26:55.511Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:26:55.520Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:26:58.533Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:26:58.539Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:27:02.059Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:27:02.080Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:27:03.939Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:27:03.945Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:27:21.908Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:27:21.914Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:27:26.622Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:27:26.628Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:27:34.929Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:27:34.935Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:27:43.354Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:27:43.361Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:27:44.945Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:27:44.952Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:27:48.055Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:27:48.062Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:28:09.138Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:28:09.143Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:28:27.237Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:28:27.243Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:29:22.346Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:29:22.352Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:29:35.710Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:29:35.716Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:29:44.886Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:29:44.892Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:30:04.867Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:30:04.877Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:30:59.201Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:30:59.214Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:31:18.122Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:31:18.128Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:31:25.894Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:31:25.899Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:31:29.164Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:31:29.171Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:31:31.120Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:31:31.125Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:31:39.751Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:31:39.757Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:31:48.410Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:31:48.418Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:31:52.465Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:31:52.472Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:31:58.180Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:31:58.188Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:32:06.015Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:32:06.025Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:32:10.651Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:32:10.658Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:32:12.359Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:32:12.380Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:32:15.077Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:32:15.083Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:32:33.741Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:32:33.748Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:32:35.905Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:32:35.913Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:32:39.407Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:32:39.418Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:32:41.503Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:32:41.510Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:32:43.650Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:32:43.657Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:32:45.209Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:32:45.214Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:32:47.016Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:32:47.022Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:32:52.561Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:32:52.574Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:32:55.016Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:32:55.032Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:32:57.278Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:32:57.286Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:33:00.687Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:33:00.701Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:33:03.574Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:33:03.580Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:33:28.680Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:33:28.686Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:33:38.613Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:33:38.623Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:33:55.484Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:33:55.492Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:34:10.353Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:34:10.360Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:34:19.221Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:34:19.229Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:34:23.369Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:34:23.376Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:34:25.543Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:34:25.549Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:34:28.843Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:34:28.850Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:34:33.374Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:34:33.384Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:34:38.590Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:34:38.595Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:34:42.925Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:34:42.932Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:34:45.243Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:34:45.248Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:34:55.584Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:34:55.592Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:34:59.077Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:34:59.083Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:35:10.392Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:35:10.399Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:35:13.185Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:35:13.191Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:35:24.047Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:35:24.054Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:35:25.953Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:35:25.960Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:35:46.556Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:35:46.562Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:36:13.615Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:36:13.620Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:36:17.516Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:36:17.521Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:36:20.002Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:36:20.007Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:37:17.687Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:37:17.694Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:37:33.992Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:37:34.000Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:37:38.947Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:37:38.955Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:37:44.887Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:37:44.894Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:37:47.912Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:37:47.920Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:37:50.451Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:37:50.459Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:37:54.773Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:37:54.779Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:37:57.792Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:37:57.799Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:37:59.055Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:37:59.061Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:38:02.522Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:38:02.528Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:38:06.660Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:38:06.666Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:38:59.983Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:38:59.989Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:39:02.255Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:39:02.260Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:39:42.692Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:39:42.699Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:40:14.247Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:40:14.255Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:40:29.154Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:40:29.161Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:40:54.936Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:40:54.943Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:41:07.971Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:41:07.980Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:41:17.169Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:41:17.175Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:41:24.622Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:41:24.629Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:41:39.858Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:41:39.865Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:41:43.134Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:41:43.140Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:41:52.821Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:41:52.827Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:41:55.545Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:41:55.558Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:42:08.998Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:42:09.003Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:42:16.853Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:42:16.865Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:42:21.626Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:42:21.634Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:42:24.228Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:42:24.236Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:42:26.171Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:42:26.189Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:42:33.949Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:42:33.967Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:42:36.515Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:42:36.522Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:42:39.990Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:42:39.996Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:42:43.285Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:42:43.292Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:42:46.671Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:42:46.677Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:42:53.139Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:42:53.146Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:42:55.522Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:42:55.528Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:43:03.586Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:43:03.591Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:43:09.103Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:43:09.193Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:43:10.694Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:43:10.703Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:43:13.545Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:43:13.551Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:43:15.557Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:43:15.563Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:43:17.453Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:43:17.470Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:43:34.971Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:43:34.981Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:43:37.596Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:43:37.602Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:43:41.558Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:43:41.566Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:43:44.225Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:43:44.233Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:43:46.979Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:43:46.987Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:44:05.870Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:44:05.884Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:44:20.092Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:44:20.103Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:44:31.632Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:44:31.641Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:44:42.603Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:44:42.609Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:44:48.142Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:44:48.170Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:45:05.254Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:45:05.260Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:45:21.391Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:45:21.397Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:45:24.681Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:45:24.688Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:45:29.845Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:45:29.853Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:47:05.590Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:47:05.598Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:48:55.053Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:48:55.060Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:49:01.217Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:49:01.224Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:49:07.164Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:49:07.171Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:49:12.161Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:49:12.168Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:49:17.756Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:49:17.763Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:49:22.625Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:49:22.634Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:49:25.377Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:49:25.388Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:49:29.448Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:49:29.454Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:56:16.082Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:56:16.088Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:56:25.881Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:56:25.887Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:57:32.197Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:57:32.210Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:57:34.612Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:57:34.621Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:57:39.464Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:57:39.472Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:58:03.289Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:58:03.296Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:58:16.639Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:58:16.648Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:58:18.144Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:58:18.152Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:58:19.862Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:58:19.879Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:58:27.262Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:58:27.269Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:59:08.099Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:59:08.107Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:59:22.893Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:59:22.905Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:59:45.657Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:59:45.666Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T13:59:57.319Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T13:59:57.328Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:00:00.434Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:00:00.459Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:00:02.348Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:00:02.355Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:00:10.191Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:00:10.202Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:00:39.730Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:00:39.739Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:00:44.666Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:00:44.673Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:00:56.857Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:00:56.871Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:02:19.402Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:02:19.458Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:02:21.278Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:02:21.286Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:03:14.500Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:03:14.509Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:03:36.631Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:03:36.650Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:03:38.278Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:03:38.288Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:04:01.874Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:04:01.880Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:05:29.896Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:05:29.903Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:05:54.977Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:05:55.007Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:06:54.571Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:06:54.598Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:06:56.893Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:06:56.901Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:07:01.905Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:07:01.912Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:07:31.020Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:07:31.029Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:07:33.439Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:07:33.448Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:07:38.129Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:07:38.140Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:08:26.591Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:08:26.598Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:09:03.794Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:09:03.804Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:09:08.841Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:09:08.859Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:09:11.078Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:09:11.093Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:10:13.572Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:10:13.582Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:10:17.352Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:10:17.360Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:11:32.047Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:11:32.062Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:11:33.609Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:11:33.623Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:11:36.184Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:11:36.190Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:11:39.238Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:11:39.245Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:11:41.394Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:11:41.403Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:11:45.976Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:11:45.982Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:12:07.012Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:12:07.017Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:12:12.377Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:12:12.386Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:12:16.960Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:12:16.969Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:12:23.313Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:12:23.319Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:12:26.466Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:12:26.475Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:12:32.477Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:12:32.482Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:12:38.530Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:12:38.537Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:13:39.493Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:13:39.501Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:13:48.884Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:13:48.893Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:13:50.522Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:13:50.529Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:14:04.386Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:14:04.394Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:14:05.815Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:14:05.900Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:14:08.801Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:14:08.808Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:14:18.213Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:14:18.219Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:14:28.176Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:14:28.186Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:16:15.180Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:16:15.192Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:16:35.436Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:16:35.442Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:17:07.071Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:17:07.079Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:17:53.814Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:17:53.821Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:18:05.458Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:18:05.465Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:18:45.927Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:18:45.933Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:18:47.292Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:18:47.299Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:18:50.760Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:18:50.766Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:18:54.088Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:18:54.097Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:18:59.263Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:18:59.269Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:19:03.380Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:19:03.388Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:19:06.378Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:19:06.385Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:19:16.254Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:19:16.261Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:19:18.924Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:19:18.931Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:19:20.418Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:19:20.423Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:19:23.983Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:19:23.989Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:19:29.236Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:19:29.243Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:19:40.879Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:19:40.887Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:19:44.100Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:19:44.107Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:19:52.413Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:19:52.419Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:19:58.294Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:19:58.300Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:20:25.671Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:20:25.678Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:20:27.937Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:20:27.943Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:20:29.371Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:20:29.377Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:20:33.915Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:20:33.921Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:20:39.169Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:20:39.176Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:20:46.702Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:20:46.708Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:20:58.190Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:20:58.197Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:21:01.732Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:21:01.739Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:21:05.535Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:21:05.542Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:21:10.234Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:21:10.243Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:21:11.559Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:21:11.566Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:21:16.904Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:21:16.911Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:21:20.404Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:21:20.413Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:21:43.478Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:21:43.485Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:21:45.942Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:21:45.947Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:22:21.640Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:22:21.654Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:22:24.291Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:22:24.300Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:22:26.937Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:22:26.946Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:22:30.232Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:22:30.241Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:22:32.345Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:22:32.353Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:22:34.118Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:22:34.125Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:22:35.998Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:22:36.004Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:22:37.978Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:22:37.985Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:22:44.228Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:22:44.234Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:22:48.394Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:22:48.400Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:22:55.585Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:22:55.591Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:23:00.564Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:23:00.575Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:23:10.040Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:23:10.046Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:23:12.961Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:23:12.967Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:23:21.634Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:23:21.640Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:23:24.582Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:23:24.590Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:24:28.082Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:24:28.089Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:24:31.987Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:24:31.993Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:24:33.435Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:24:33.451Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:24:34.730Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:24:34.740Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:24:40.676Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:24:40.682Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:24:47.146Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:24:47.152Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:24:49.562Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:24:49.570Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:25:13.772Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:25:13.788Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:25:16.645Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:25:16.653Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:25:18.196Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:25:18.203Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:25:54.954Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:25:54.961Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:25:56.969Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:25:56.975Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:26:26.398Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:26:26.404Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:26:29.823Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:26:29.833Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:26:33.999Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:26:34.006Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:26:37.140Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:26:37.145Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:26:39.204Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:26:39.212Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:26:44.050Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:26:44.058Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:26:46.167Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:26:46.176Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:26:57.319Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:26:57.329Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:27:00.078Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:27:00.084Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:27:09.805Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:27:09.811Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:27:13.660Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:27:13.667Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:27:15.092Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:27:15.098Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:27:17.274Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:27:17.283Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:27:30.725Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:27:30.734Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:27:34.468Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:27:34.474Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:27:40.654Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:27:40.660Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:27:48.164Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:27:48.171Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:27:51.108Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:27:51.114Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:27:55.652Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:27:55.658Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:27:56.829Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:27:56.844Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:28:01.980Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:28:01.996Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:28:03.118Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:28:03.126Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:28:23.489Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:28:23.496Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:28:26.914Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:28:26.920Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:28:29.655Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:28:29.661Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:28:33.181Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:28:33.186Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:28:34.627Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:28:34.634Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:28:38.932Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:28:38.940Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:28:50.307Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:28:50.314Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:28:56.047Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:28:56.055Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:30:12.258Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:30:12.278Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:30:14.329Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:30:14.336Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:30:17.172Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:30:17.179Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:30:19.794Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:30:19.801Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:30:21.913Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:30:21.920Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:30:37.606Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:30:37.612Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:30:50.251Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:30:50.258Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:30:51.618Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:30:51.625Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:31:03.868Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:31:03.875Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:31:09.051Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:31:09.057Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:31:21.754Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:31:21.760Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:31:22.986Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:31:22.993Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:31:29.273Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:31:29.279Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:31:49.947Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:31:49.955Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:31:52.751Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:31:52.758Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:31:54.269Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:31:54.274Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:31:56.454Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:31:56.462Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:32:29.008Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:32:29.014Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:33:22.632Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:33:22.637Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:36:47.502Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:36:47.552Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:36:49.657Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:36:49.667Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:37:57.511Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:37:57.519Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:38:00.952Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:38:00.962Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:38:02.545Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:38:02.552Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:38:04.381Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:38:04.388Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:38:05.897Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:38:05.903Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:38:09.671Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:38:09.676Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:38:15.960Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:38:15.966Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:38:17.539Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:38:17.545Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:38:25.117Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:38:25.191Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:38:26.909Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:38:26.917Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:38:29.140Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:38:29.151Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:38:33.770Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:38:33.776Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:38:35.955Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:38:35.962Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:38:40.973Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:38:40.982Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:38:42.683Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:38:42.689Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:38:44.684Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:38:44.693Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:38:49.915Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:38:49.924Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:38:51.303Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:38:51.310Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:39:00.390Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:39:00.397Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:39:03.045Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:39:03.052Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:39:18.430Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:39:18.442Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:39:22.878Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:39:22.883Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:39:25.287Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:39:25.294Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:39:31.983Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:39:31.989Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:39:33.156Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:39:33.164Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:39:40.447Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:39:40.455Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:39:42.572Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:39:42.584Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:39:45.775Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:39:45.781Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:39:48.219Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:39:48.233Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:39:50.062Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:39:50.068Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:39:53.283Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:39:53.291Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:39:55.493Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:39:55.500Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:39:56.803Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:39:56.809Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:39:59.026Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:39:59.041Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:40:01.125Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:40:01.130Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:40:02.873Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:40:02.912Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:40:04.577Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:40:04.594Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:40:06.381Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:40:06.388Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:40:10.813Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:40:10.820Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:40:13.925Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:40:13.931Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:40:22.521Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:40:22.530Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:40:55.540Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:40:55.550Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:40:59.764Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:40:59.772Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:41:29.427Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:41:29.433Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:41:41.203Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:41:41.211Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:41:57.283Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:41:57.291Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:42:05.367Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:42:05.375Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:42:09.279Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:42:09.286Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:42:15.374Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:42:15.381Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:42:28.186Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:42:28.205Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:42:40.071Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:42:40.082Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:42:45.890Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:42:45.897Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:42:48.102Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:42:48.110Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:42:53.466Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:42:53.471Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:42:57.216Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:42:57.222Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:43:01.553Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:43:01.559Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:43:16.428Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:43:16.440Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:43:45.224Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:43:45.230Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:44:03.872Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:44:03.878Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:44:09.204Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:44:09.222Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:44:34.779Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:44:34.785Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:44:36.690Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:44:36.698Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:44:41.832Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:44:41.838Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:45:13.471Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:45:13.476Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:45:24.901Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:45:24.913Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:46:02.779Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:46:02.785Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:46:10.059Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:46:10.068Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:46:12.799Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:46:12.807Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:46:18.103Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:46:18.110Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:48:10.142Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:48:10.150Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:48:13.053Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:48:13.062Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:48:14.900Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:48:14.910Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:48:19.771Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:48:19.780Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:48:52.209Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:48:52.231Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:49:09.248Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:49:09.254Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:52:04.794Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:52:04.804Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:52:07.207Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:52:07.218Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:52:19.467Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:52:19.490Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:52:26.518Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:52:26.525Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:55:13.670Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:55:13.681Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:55:18.702Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:55:18.709Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:55:32.756Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:55:32.784Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:55:34.925Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:55:34.934Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:55:38.184Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:55:38.190Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:55:59.831Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:55:59.839Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T14:56:01.275Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T14:56:01.281Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T15:11:23.197Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T15:11:23.203Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T15:11:37.610Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T15:11:37.638Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T15:11:38.839Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T15:11:38.863Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T15:11:41.080Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T15:11:41.087Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T15:16:51.755Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T15:16:51.765Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T15:16:55.005Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T15:16:55.012Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T15:17:14.881Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T15:17:14.888Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T16:52:04.480Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T16:52:04.492Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T16:52:14.724Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T16:52:14.732Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T16:52:41.969Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T16:52:42.010Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:01:11.228Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:01:11.234Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:01:47.725Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:01:47.734Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:02:57.926Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:02:57.935Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:03:01.231Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:03:01.241Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:03:39.932Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:03:39.960Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:04:43.874Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:04:43.889Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:04:57.490Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:04:57.497Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:05:01.822Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:05:01.835Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:05:05.334Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:05:05.345Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:05:07.452Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:05:07.461Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:05:08.952Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:05:08.961Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:05:11.492Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:05:11.500Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:05:14.162Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:05:14.169Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:05:17.149Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:05:17.158Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:05:19.583Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:05:19.596Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:05:27.929Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:05:27.954Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:05:30.149Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:05:30.163Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:06:02.533Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:06:02.541Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:06:04.154Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:06:04.163Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:06:15.285Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:06:15.296Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:06:20.375Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:06:20.383Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:06:27.676Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:06:27.687Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:06:29.362Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:06:29.373Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:06:32.753Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:06:32.761Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:06:37.497Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:06:37.504Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:06:39.357Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:06:39.371Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:07:33.203Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:07:33.211Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:07:43.775Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:07:43.782Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:07:45.382Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:07:45.389Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:07:49.285Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:07:49.292Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:07:53.664Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:07:53.678Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:08:02.695Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:08:02.720Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:08:05.432Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:08:05.440Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:08:15.017Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:08:15.031Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:08:17.867Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:08:17.885Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:08:22.126Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:08:22.138Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:08:32.203Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:08:32.212Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:08:44.268Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:08:44.280Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:08:55.286Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:08:55.294Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:08:58.903Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:08:58.915Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:09:38.686Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:09:38.692Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:09:57.372Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:09:57.379Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:11:13.255Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:11:13.272Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:11:14.784Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:11:14.790Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:11:21.337Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:11:21.343Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:11:25.894Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:11:25.902Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:11:31.486Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:11:31.494Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:11:41.758Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:11:41.763Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:11:45.628Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:11:45.632Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:11:49.287Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:11:49.296Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:11:51.784Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:11:51.791Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:11:56.113Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:11:56.121Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:11:58.692Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:11:58.700Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:11:59.854Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:11:59.861Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:12:04.642Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:12:04.650Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:12:06.677Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:12:06.686Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:12:17.294Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:12:17.300Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:12:20.930Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:12:20.939Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:12:22.451Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:12:22.457Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:12:37.872Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:12:37.879Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:12:43.686Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:12:43.694Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:12:57.574Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:12:57.581Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:13:02.244Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:13:02.253Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:13:04.831Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:13:04.838Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:13:09.414Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:13:09.422Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:13:18.990Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:13:18.998Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:13:38.194Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:13:38.203Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:13:56.779Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:13:56.784Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:14:23.083Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:14:23.089Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:14:27.789Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:14:27.795Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:14:32.093Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:14:32.103Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:14:35.300Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:14:35.307Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:14:37.511Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:14:37.518Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:14:39.695Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:14:39.709Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:14:45.063Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:14:45.077Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:14:46.097Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:14:46.103Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:14:48.131Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:14:48.139Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:14:52.018Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:14:52.025Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:14:54.655Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:14:54.663Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:15:00.061Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:15:00.084Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:15:03.358Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:15:03.377Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:15:05.631Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:15:05.637Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:15:14.907Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:15:14.915Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:15:18.892Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:15:18.899Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:15:20.560Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:15:20.567Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:15:28.389Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:15:28.395Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:15:37.972Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:15:37.982Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:15:53.755Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:15:53.761Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:15:58.686Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:15:58.692Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:16:08.053Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:16:08.062Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:16:09.594Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:16:09.599Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:16:14.293Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:16:14.303Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:16:16.213Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:16:16.220Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:16:17.918Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:16:17.926Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:16:49.318Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:16:49.332Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:23:42.885Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:23:42.891Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:25:08.780Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:25:08.787Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:25:16.268Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:25:16.276Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:26:27.502Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:26:27.511Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:26:57.071Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:26:57.080Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:27:36.691Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:27:36.698Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:29:25.679Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:29:25.686Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:34:38.457Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:34:38.464Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:38:11.496Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:38:11.506Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:38:24.526Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:38:24.537Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:41:15.808Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:41:15.814Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:45:14.089Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:45:14.095Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:45:22.478Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:45:22.484Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:45:29.246Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:45:29.258Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:45:32.291Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:45:32.299Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:45:35.564Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:45:35.582Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:45:37.347Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:45:37.353Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:45:39.741Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:45:39.758Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:45:41.304Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:45:41.311Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:45:44.934Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:45:44.942Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:45:47.235Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:45:47.242Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:45:48.696Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:45:48.704Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:57:59.748Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:57:59.812Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:58:02.516Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:58:02.533Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:58:08.691Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:58:08.709Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:58:32.489Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:58:32.516Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:58:44.945Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:58:44.956Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:58:54.380Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:58:54.391Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T17:59:02.604Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T17:59:02.616Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T18:17:15.850Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T18:17:15.857Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T18:31:45.055Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T18:31:45.063Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T18:33:17.938Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T18:33:17.945Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T18:33:22.612Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T18:33:22.618Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T18:34:49.813Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T18:34:49.828Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T18:35:05.021Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T18:35:05.029Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T18:35:07.007Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T18:35:07.018Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T18:35:11.560Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T18:35:11.567Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T18:35:18.455Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T18:35:18.464Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T18:35:30.437Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T18:35:30.444Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T18:35:36.797Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T18:35:36.804Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T18:35:58.599Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T18:35:58.608Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T18:36:02.663Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T18:36:02.674Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T18:43:43.975Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T18:43:44.003Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:08:40.740Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:08:40.749Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:08:41.730Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:08:41.735Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:08:45.669Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:08:45.675Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:08:50.259Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:08:50.268Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:08:54.018Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:08:54.027Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:08:56.653Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:08:56.663Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:09:04.785Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:09:04.793Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:09:07.576Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:09:07.584Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:09:30.714Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:09:30.748Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:09:31.871Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:09:31.887Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:09:33.144Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:09:33.152Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:09:38.824Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:09:38.857Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:09:40.104Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:09:40.112Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:10:04.890Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:10:04.897Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:10:09.175Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:10:09.189Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:10:22.192Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:10:22.197Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:10:26.925Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:10:26.931Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:10:33.442Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:10:33.450Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:10:36.952Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:10:36.959Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:10:40.978Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:10:40.984Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:10:47.128Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:10:47.137Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:10:58.689Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:10:58.700Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:11:02.417Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:11:02.426Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:11:32.915Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:11:32.925Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:11:40.437Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:11:40.464Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:11:41.838Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:11:41.846Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:12:03.714Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:12:03.738Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:12:05.579Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:12:05.585Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:12:08.131Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:12:08.139Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:12:12.882Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:12:12.889Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:12:15.956Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:12:15.968Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:12:18.686Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:12:18.692Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:12:22.259Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:12:22.265Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:12:28.042Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:12:28.051Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:12:31.055Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:12:31.061Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:12:37.994Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:12:38.012Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:12:41.861Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:12:41.869Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:12:44.609Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:12:44.616Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:12:49.609Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:12:49.615Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:13:30.167Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:13:30.174Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:13:31.477Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:13:31.515Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:13:32.698Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:13:32.707Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:13:35.977Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:13:35.991Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:13:51.754Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:13:51.783Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:13:57.415Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:13:57.420Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:15:12.075Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:15:12.083Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:15:15.259Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:15:15.265Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:15:25.203Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:15:25.212Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:15:38.516Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:15:38.522Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:15:59.407Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:15:59.413Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:16:08.394Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:16:08.400Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:16:14.349Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:16:14.355Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:16:58.624Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:16:58.631Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:17:17.787Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:17:17.794Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:17:23.165Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:17:23.173Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:18:56.409Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:18:56.417Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:18:58.123Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:18:58.128Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:19:05.785Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:19:05.793Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:19:34.190Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:19:34.195Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:19:37.798Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:19:37.806Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:19:39.630Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:19:39.642Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:23:54.940Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:23:54.952Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:23:57.858Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:23:57.867Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:27:28.881Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:27:28.888Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:27:31.900Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:27:31.906Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:27:34.992Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:27:35.000Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:27:38.832Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:27:38.841Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:27:50.731Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:27:50.741Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:27:53.505Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:27:53.515Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:28:28.053Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:28:28.061Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:29:47.617Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:29:47.626Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:29:50.249Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:29:50.257Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:30:09.751Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:30:09.762Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:30:23.916Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:30:23.927Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:30:25.072Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:30:25.082Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:30:28.966Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:30:28.974Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:33:15.822Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:33:15.830Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:33:22.097Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:33:22.103Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:33:48.894Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:33:48.905Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:40:21.920Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:40:21.927Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:40:26.936Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:40:26.943Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:40:53.384Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:40:53.397Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:40:55.076Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:40:55.084Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:41:02.261Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:41:02.268Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:47:47.407Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:47:47.413Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:48:05.762Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:48:05.781Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:48:54.531Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:48:54.537Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:50:12.247Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:50:12.253Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:51:07.545Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:51:07.553Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T19:59:45.599Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T19:59:45.605Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:01:56.575Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:01:56.584Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:01:59.483Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:01:59.491Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:02:01.548Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:02:01.555Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:02:04.493Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:02:04.507Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:02:08.307Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:02:08.313Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:02:12.310Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:02:12.316Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:02:49.375Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:02:49.383Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:02:53.804Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:02:53.810Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:03:44.241Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:03:44.249Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:03:53.870Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:03:53.890Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:07:17.133Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:07:17.140Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:07:22.158Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:07:22.164Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:10:04.901Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:10:04.912Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:10:07.101Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:10:07.109Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:10:09.123Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:10:09.130Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:10:45.749Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:10:45.760Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:15:32.535Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:15:32.605Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:16:03.900Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:16:03.906Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:16:30.250Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:16:30.257Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:16:31.399Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:16:31.405Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:16:47.316Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:16:47.322Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:16:50.435Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:16:50.441Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:17:05.242Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:17:05.248Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:17:18.496Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:17:18.503Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:17:22.453Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:17:22.459Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:17:26.153Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:17:26.162Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:17:28.427Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:17:28.433Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:17:29.734Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:17:29.759Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:17:48.188Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:17:48.195Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:19:16.113Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:19:16.123Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:19:28.613Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:19:28.625Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:20:47.196Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:20:47.203Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:21:19.113Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:21:19.135Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:21:30.919Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:21:30.929Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:22:20.029Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:22:20.036Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:22:23.775Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:22:23.789Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:22:34.663Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:22:34.683Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:22:52.186Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:22:52.199Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:32:29.572Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:32:29.647Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:32:35.892Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:32:35.898Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:35:21.335Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:35:21.345Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:35:36.558Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:35:36.565Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:35:43.121Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:35:43.128Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T20:35:45.974Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T20:35:45.984Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:00:37.260Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:00:37.267Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:00:43.795Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:00:43.815Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:01:08.472Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:01:08.478Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:03:26.575Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:03:26.582Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:03:28.669Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:03:28.675Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:03:32.145Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:03:32.152Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:03:34.708Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:03:34.731Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:04:24.012Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:04:24.027Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:08:58.565Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:08:58.578Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:15:31.843Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:15:31.851Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:15:41.755Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:15:41.766Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:15:44.310Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:15:44.322Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:15:48.541Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:15:48.549Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:16:09.310Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:16:09.318Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:16:10.687Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:16:10.700Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:16:12.795Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:16:12.871Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:16:19.264Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:16:19.273Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:16:21.625Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:16:21.632Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:17:37.412Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:17:37.423Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:17:41.607Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:17:41.615Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:17:44.541Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:17:44.546Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:17:49.520Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:17:49.526Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:17:55.803Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:17:55.821Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:18:02.522Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:18:02.528Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:18:08.874Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:18:08.883Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:25:31.091Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:25:31.108Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:32:02.144Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:32:02.151Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:32:05.937Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:32:05.943Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:32:08.180Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:32:08.190Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:39:12.140Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:39:12.145Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:45:11.122Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:45:11.130Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:45:16.718Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:45:16.726Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:45:27.159Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:45:27.165Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:45:29.467Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:45:29.472Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:45:39.448Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:45:39.455Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:45:42.601Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:45:42.609Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:45:50.473Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:45:50.480Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:45:53.499Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:45:53.504Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:45:58.747Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:45:58.755Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:46:09.210Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:46:09.215Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:47:45.781Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:47:45.789Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:47:59.922Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:47:59.929Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:48:08.923Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:48:08.929Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:48:16.444Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:48:16.450Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:48:32.161Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:48:32.171Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:48:34.047Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:48:34.054Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:48:36.563Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:48:36.573Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:48:38.115Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:48:38.121Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:48:42.461Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:48:42.480Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:48:44.347Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:48:44.355Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:49:59.774Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:49:59.810Z'
}
{
  message: 'Servidor Escuchando Y Listo en https://localhost:3080',
  level: 'info',
  timestamp: '2022-06-24T21:50:33.275Z'
}
{
  message: 'Servidor Escuchando Y Listo en http://localhost:3081',
  level: 'info',
  timestamp: '2022-06-24T21:50:33.338Z'
}
